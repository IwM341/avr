
P007USARTDBG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002fa  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  0080010c  0080010c  0000039a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa4  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b6  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028f  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c7  00000000  00000000  00001eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3d       	cpi	r26, 0xD9	; 217
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  9e:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:


inline void set7seg(uint8_t num){
	uint16_t seg7 = digit[num] << 2;
	set_port(PORTD,0b11111100,seg7);
	set_port(PORTB,0b00000001,seg7>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	80 6c       	ori	r24, 0xC0	; 192
  ba:	80 83       	st	Z, r24
  bc:	8e e0       	ldi	r24, 0x0E	; 14
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  c2:	08 95       	ret

000000c4 <transmit_act>:
  c4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <output+0x65>
  c8:	81 11       	cpse	r24, r1
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <transmit_act+0xe>
  cc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
  d0:	08 95       	ret
  d2:	a1 e7       	ldi	r26, 0x71	; 113
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	ec 91       	ld	r30, X
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	9e 0f       	add	r25, r30
  dc:	9c 93       	st	X, r25
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <output+0x65>
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	e3 5f       	subi	r30, 0xF3	; 243
  e8:	fe 4f       	sbci	r31, 0xFE	; 254
  ea:	80 81       	ld	r24, Z
  ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f0:	08 95       	ret

000000f2 <enable_transmit_pocess>:
  f2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
  f6:	81 11       	cpse	r24, r1
  f8:	08 c0       	rjmp	.+16     	; 0x10a <enable_transmit_pocess+0x18>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 100:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 104:	85 fd       	sbrc	r24, 5
 106:	0e 94 62 00 	call	0xc4	; 0xc4 <transmit_act>
 10a:	08 95       	ret

0000010c <__vector_18>:
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
 12e:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 132:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <input+0x64>
 136:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <input+0x65>
 13a:	82 2f       	mov	r24, r18
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	83 0f       	add	r24, r19
 140:	91 1d       	adc	r25, r1
 142:	64 e6       	ldi	r22, 0x64	; 100
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__divmodhi4>
 14a:	38 13       	cpse	r19, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <__vector_18+0x46>
 14e:	21 11       	cpse	r18, r1
 150:	08 c0       	rjmp	.+16     	; 0x162 <__vector_18+0x56>
 152:	99 27       	eor	r25, r25
 154:	fc 01       	movw	r30, r24
 156:	ed 58       	subi	r30, 0x8D	; 141
 158:	fe 4f       	sbci	r31, 0xFE	; 254
 15a:	40 83       	st	Z, r20
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	20 93 d8 01 	sts	0x01D8, r18	; 0x8001d8 <input+0x65>
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_20>:
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
 1a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1aa:	81 11       	cpse	r24, r1
 1ac:	0e 94 62 00 	call	0xc4	; 0xc4 <transmit_act>
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <main>:


int main(void)
{
	/* Replace with your application code */
	DDRB = 0xFF;
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	84 b9       	out	0x04, r24	; 4
	set_port(DDRD,0b11111100,0xFF);
 1d6:	8a b1       	in	r24, 0x0a	; 10
 1d8:	8c 6f       	ori	r24, 0xFC	; 252
 1da:	8a b9       	out	0x0a, r24	; 10
	sei();
 1dc:	78 94       	sei
	USART_Init(16);
 1de:	80 e1       	ldi	r24, 0x10	; 16
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	set_port(PORTD,0b11111100,0x00);	
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	83 70       	andi	r24, 0x03	; 3
 1ea:	8b b9       	out	0x0b, r24	; 11
	
	set_port(PORTD,0b00111100,0xFF);
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	8c 63       	ori	r24, 0x3C	; 60
 1f0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	83 ed       	ldi	r24, 0xD3	; 211
 1f6:	90 e3       	ldi	r25, 0x30	; 48
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x26>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x30>
 202:	00 00       	nop
	_delay_ms(1000);	
	set_port(PORTD,0b00111100,0x00);
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	83 7c       	andi	r24, 0xC3	; 195
 208:	8b b9       	out	0x0b, r24	; 11
	uint8_t first;
	uint8_t len;
} queue;

inline uint8_t is_empty_queue(queue * _queue){
	return _queue->len == 0;
 20a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <input+0x65>
	while (1)
	{
		//enable_transmit_pocess();
		
		
		if(!is_empty_queue(&input)){
 20e:	88 23       	and	r24, r24
 210:	e1 f3       	breq	.-8      	; 0x20a <main+0x38>
			//set_port(PORTD,0b11111100,0x00);
			//set_port(PORTD,0b00011100,0xFF);
			//_delay_ms(500);
			set_port(PORTD,0b00011100,0x00);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	83 7e       	andi	r24, 0xE3	; 227
 216:	8b b9       	out	0x0b, r24	; 11
		return 0;
	}
}

inline uint8_t pop_queue(queue * _queue){
	uint8_t first = _queue->first;
 218:	a7 ed       	ldi	r26, 0xD7	; 215
 21a:	b1 e0       	ldi	r27, 0x01	; 1
 21c:	ec 91       	ld	r30, X
	_queue->first ++;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	8e 0f       	add	r24, r30
 222:	8c 93       	st	X, r24
	_queue->len --;
 224:	a8 ed       	ldi	r26, 0xD8	; 216
 226:	b1 e0       	ldi	r27, 0x01	; 1
 228:	8c 91       	ld	r24, X
 22a:	81 50       	subi	r24, 0x01	; 1
 22c:	8c 93       	st	X, r24
	return _queue->data[first];
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ed 58       	subi	r30, 0x8D	; 141
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	c0 81       	ld	r28, Z
inline uint8_t is_empty_queue(queue * _queue){
	return _queue->len == 0;
}

inline uint8_t push_queue(queue * _queue,uint8_t data){
	uint8_t newlast = (_queue->first + _queue->len)%QSIZE;
 236:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <output+0x64>
 23a:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <output+0x65>
 23e:	82 2f       	mov	r24, r18
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	83 0f       	add	r24, r19
 244:	91 1d       	adc	r25, r1
 246:	64 e6       	ldi	r22, 0x64	; 100
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__divmodhi4>
	if(newlast == _queue->first && _queue->len != 0){
 24e:	38 13       	cpse	r19, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <main+0x84>
 252:	21 11       	cpse	r18, r1
 254:	08 c0       	rjmp	.+16     	; 0x266 <main+0x94>
		return 1;
	}
	else{
		_queue->data[newlast] = data;
 256:	99 27       	eor	r25, r25
 258:	fc 01       	movw	r30, r24
 25a:	e3 5f       	subi	r30, 0xF3	; 243
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	c0 83       	st	Z, r28
		_queue->len ++;
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <output+0x65>
			set_port(PORTD,0b00011100,0x00);
			//_delay_ms(500);
			uint8_t data = pop_queue(&input);
			
			push_queue(&output,data);
			enable_transmit_pocess();
 266:	0e 94 79 00 	call	0xf2	; 0xf2 <enable_transmit_pocess>
			
			uint8_t num = (data - '0')%10;
 26a:	8c 2f       	mov	r24, r28
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	c0 97       	sbiw	r24, 0x30	; 48
 270:	6a e0       	ldi	r22, 0x0A	; 10
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__divmodhi4>

const unsigned char digit[11] = {DIGIT7_0,DIGIT7_1,DIGIT7_2,DIGIT7_3,DIGIT7_4,DIGIT7_5,DIGIT7_6,DIGIT7_7,DIGIT7_8,DIGIT7_9,DIGIT7_NONE};


inline void set7seg(uint8_t num){
	uint16_t seg7 = digit[num] << 2;
 278:	fc 01       	movw	r30, r24
 27a:	ff 27       	eor	r31, r31
 27c:	e0 50       	subi	r30, 0x00	; 0
 27e:	ff 4f       	sbci	r31, 0xFF	; 255
 280:	80 81       	ld	r24, Z
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
	set_port(PORTD,0b11111100,seg7);
 28c:	3b b1       	in	r19, 0x0b	; 11
 28e:	33 70       	andi	r19, 0x03	; 3
 290:	28 2f       	mov	r18, r24
 292:	2c 7f       	andi	r18, 0xFC	; 252
 294:	83 2f       	mov	r24, r19
 296:	82 2b       	or	r24, r18
 298:	8b b9       	out	0x0b, r24	; 11
	set_port(PORTB,0b00000001,seg7>>8);
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	8e 7f       	andi	r24, 0xFE	; 254
 29e:	91 70       	andi	r25, 0x01	; 1
 2a0:	89 2b       	or	r24, r25
 2a2:	85 b9       	out	0x05, r24	; 5
 2a4:	b2 cf       	rjmp	.-156    	; 0x20a <main+0x38>

000002a6 <__divmodhi4>:
 2a6:	97 fb       	bst	r25, 7
 2a8:	07 2e       	mov	r0, r23
 2aa:	16 f4       	brtc	.+4      	; 0x2b0 <__divmodhi4+0xa>
 2ac:	00 94       	com	r0
 2ae:	07 d0       	rcall	.+14     	; 0x2be <__divmodhi4_neg1>
 2b0:	77 fd       	sbrc	r23, 7
 2b2:	09 d0       	rcall	.+18     	; 0x2c6 <__divmodhi4_neg2>
 2b4:	0e 94 67 01 	call	0x2ce	; 0x2ce <__udivmodhi4>
 2b8:	07 fc       	sbrc	r0, 7
 2ba:	05 d0       	rcall	.+10     	; 0x2c6 <__divmodhi4_neg2>
 2bc:	3e f4       	brtc	.+14     	; 0x2cc <__divmodhi4_exit>

000002be <__divmodhi4_neg1>:
 2be:	90 95       	com	r25
 2c0:	81 95       	neg	r24
 2c2:	9f 4f       	sbci	r25, 0xFF	; 255
 2c4:	08 95       	ret

000002c6 <__divmodhi4_neg2>:
 2c6:	70 95       	com	r23
 2c8:	61 95       	neg	r22
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255

000002cc <__divmodhi4_exit>:
 2cc:	08 95       	ret

000002ce <__udivmodhi4>:
 2ce:	aa 1b       	sub	r26, r26
 2d0:	bb 1b       	sub	r27, r27
 2d2:	51 e1       	ldi	r21, 0x11	; 17
 2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <__udivmodhi4_ep>

000002d6 <__udivmodhi4_loop>:
 2d6:	aa 1f       	adc	r26, r26
 2d8:	bb 1f       	adc	r27, r27
 2da:	a6 17       	cp	r26, r22
 2dc:	b7 07       	cpc	r27, r23
 2de:	10 f0       	brcs	.+4      	; 0x2e4 <__udivmodhi4_ep>
 2e0:	a6 1b       	sub	r26, r22
 2e2:	b7 0b       	sbc	r27, r23

000002e4 <__udivmodhi4_ep>:
 2e4:	88 1f       	adc	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	5a 95       	dec	r21
 2ea:	a9 f7       	brne	.-22     	; 0x2d6 <__udivmodhi4_loop>
 2ec:	80 95       	com	r24
 2ee:	90 95       	com	r25
 2f0:	bc 01       	movw	r22, r24
 2f2:	cd 01       	movw	r24, r26
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
