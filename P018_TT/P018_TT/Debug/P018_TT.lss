
P018_TT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ea  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076b  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e0  00000000  00000000  00001361  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a8  00000000  00000000  00001bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
	} else if( reinterpret_cast<uint8_t *>(&helper)[0] == 0xAA &&  reinterpret_cast<uint8_t *>(&helper)[1] == 0xBB  ){
		return 0;
	} else {
		return 2;
	}
}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	89 27       	eor	r24, r25
  a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <main>:

int main(void){
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2b 97       	sbiw	r28, 0x0b	; 11
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	volatile uint8_t  x = alignof(max_align_t);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8b 87       	std	Y+11, r24	; 0x0b
	
	
	
	volatile size_t y = sizeof(void (M::*)(void));;
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9a 83       	std	Y+2, r25	; 0x02
  d6:	89 83       	std	Y+1, r24	; 0x01
    
	volatile uint8_t z = ((x+3)/4)*4;  
  d8:	8b 85       	ldd	r24, Y+11	; 0x0b
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	03 96       	adiw	r24, 0x03	; 3
  de:	95 95       	asr	r25
  e0:	87 95       	ror	r24
  e2:	95 95       	asr	r25
  e4:	87 95       	ror	r24
  e6:	88 0f       	add	r24, r24
  e8:	88 0f       	add	r24, r24
  ea:	8a 87       	std	Y+10, r24	; 0x0a
	volatile uint8_t z1 = (x % 4 == 0 ? x : (x + 4) & ~(4-1) );  
  ec:	8b 85       	ldd	r24, Y+11	; 0x0b
  ee:	83 70       	andi	r24, 0x03	; 3
  f0:	09 f4       	brne	.+2      	; 0xf4 <main+0x3c>
  f2:	64 c0       	rjmp	.+200    	; 0x1bc <main+0x104>
  f4:	8b 85       	ldd	r24, Y+11	; 0x0b
  f6:	8c 5f       	subi	r24, 0xFC	; 252
  f8:	8c 7f       	andi	r24, 0xFC	; 252
  fa:	89 87       	std	Y+9, r24	; 0x09
	
	volatile uint8_t z2 = (x+3)&3;
  fc:	8b 85       	ldd	r24, Y+11	; 0x0b
  fe:	8d 5f       	subi	r24, 0xFD	; 253
 100:	83 70       	andi	r24, 0x03	; 3
 102:	88 87       	std	Y+8, r24	; 0x08
	
	volatile uint8_t is_lbf = LBF();
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	8f 83       	std	Y+7, r24	; 0x07
	
	volatile uint8_t a = sizeof(S);
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint8_t b = sizeof(M);
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	8d 83       	std	Y+5, r24	; 0x05
	
	virtual_struct * vs = (virtual_struct *)DDRD;
 110:	0a b1       	in	r16, 0x0a	; 10
 112:	10 e0       	ldi	r17, 0x00	; 0
	
	volatile uint8_t ctz_blt = __builtin_ctz(a);
 114:	8e 81       	ldd	r24, Y+6	; 0x06
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <__ctzhi2>
 11c:	8c 83       	std	Y+4, r24	; 0x04
	volatile uint8_t ctz_my = my_ctz(a);
 11e:	9e 81       	ldd	r25, Y+6	; 0x06
	constexpr uint8_t i1 =  0b00001111;
	constexpr uint8_t i2 =  0b00000011;
	constexpr uint8_t i3 =  0b00000001;
	
	uint8_t cnt = 0;
	if( !(x & i1)){
 120:	89 2f       	mov	r24, r25
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	09 f4       	brne	.+2      	; 0x128 <main+0x70>
 126:	45 c0       	rjmp	.+138    	; 0x1b2 <main+0xfa>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	43 e0       	ldi	r20, 0x03	; 3
 12c:	32 e0       	ldi	r19, 0x02	; 2
uint8_t my_ctz(uint8_t x){
	constexpr uint8_t i1 =  0b00001111;
	constexpr uint8_t i2 =  0b00000011;
	constexpr uint8_t i3 =  0b00000001;
	
	uint8_t cnt = 0;
 12e:	20 e0       	ldi	r18, 0x00	; 0
	if( !(x & i1)){
		x >> 4;
		cnt += 4;	
	}
	if(!(x & i2)){
 130:	59 2f       	mov	r21, r25
 132:	53 70       	andi	r21, 0x03	; 3
 134:	11 f4       	brne	.+4      	; 0x13a <main+0x82>
 136:	84 2f       	mov	r24, r20
		cnt += 2;
 138:	23 2f       	mov	r18, r19
	}
	if(x & i3){
 13a:	90 fd       	sbrc	r25, 0
 13c:	38 c0       	rjmp	.+112    	; 0x1ae <main+0xf6>
		return cnt;
	}
	else {
		if(x)
 13e:	91 11       	cpse	r25, r1
 140:	01 c0       	rjmp	.+2      	; 0x144 <main+0x8c>
			return cnt + 1;
		else 
			return 8;
 142:	88 e0       	ldi	r24, 0x08	; 8
	volatile uint8_t b = sizeof(M);
	
	virtual_struct * vs = (virtual_struct *)DDRD;
	
	volatile uint8_t ctz_blt = __builtin_ctz(a);
	volatile uint8_t ctz_my = my_ctz(a);
 144:	8b 83       	std	Y+3, r24	; 0x03
	
	vs->f();
 146:	d8 01       	movw	r26, r16
 148:	ed 91       	ld	r30, X+
 14a:	fc 91       	ld	r31, X
 14c:	01 90       	ld	r0, Z+
 14e:	f0 81       	ld	r31, Z
 150:	e0 2d       	mov	r30, r0
 152:	c8 01       	movw	r24, r16
 154:	09 95       	icall
	vs->g();
 156:	d8 01       	movw	r26, r16
 158:	ed 91       	ld	r30, X+
 15a:	fc 91       	ld	r31, X
 15c:	02 80       	ldd	r0, Z+2	; 0x02
 15e:	f3 81       	ldd	r31, Z+3	; 0x03
 160:	e0 2d       	mov	r30, r0
 162:	c8 01       	movw	r24, r16
 164:	09 95       	icall
	
	sei();
 166:	78 94       	sei
bool flag;


void timer_ini(void)
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим —“— (сброс по совпадению)
 168:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 |= (1<<OCIE1A);	//устанавливаем бит разрешени€ прерывани€ 1ого счетчика по совпадению с OCR1A(H и L)
 172:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 176:	82 60       	ori	r24, 0x02	; 2
 178:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	OCR1AH = 0b00111100; //записываем в регистр число дл€ сравнени€
 17c:	8c e3       	ldi	r24, 0x3C	; 60
 17e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 0b10010010; //записываем в регистр число дл€ сравнени€
 182:	82 e9       	ldi	r24, 0x92	; 146
 184:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1<<CS12);//установим делитель.
 188:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	vs->f();
	vs->g();
	
	sei();
	timer_ini();
	DDRD = 0xFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	8a b9       	out	0x0a, r24	; 10
	while (1) {
		if(flag){
			PORTD = 0xFF;
 196:	9f ef       	ldi	r25, 0xFF	; 255
	
	sei();
	timer_ini();
	DDRD = 0xFF;
	while (1) {
		if(flag){
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19c:	88 23       	and	r24, r24
 19e:	29 f0       	breq	.+10     	; 0x1aa <main+0xf2>
			PORTD = 0xFF;
 1a0:	9b b9       	out	0x0b, r25	; 11
	
	sei();
	timer_ini();
	DDRD = 0xFF;
	while (1) {
		if(flag){
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	81 11       	cpse	r24, r1
 1a8:	fb cf       	rjmp	.-10     	; 0x1a0 <main+0xe8>
			PORTD = 0xFF;
		}
		else{
			PORTD = 0x00;
 1aa:	1b b8       	out	0x0b, r1	; 11
 1ac:	f5 cf       	rjmp	.-22     	; 0x198 <main+0xe0>
	}
	if(!(x & i2)){
		cnt += 2;
	}
	if(x & i3){
		return cnt;
 1ae:	82 2f       	mov	r24, r18
 1b0:	c9 cf       	rjmp	.-110    	; 0x144 <main+0x8c>
	constexpr uint8_t i1 =  0b00001111;
	constexpr uint8_t i2 =  0b00000011;
	constexpr uint8_t i3 =  0b00000001;
	
	uint8_t cnt = 0;
	if( !(x & i1)){
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	47 e0       	ldi	r20, 0x07	; 7
 1b6:	36 e0       	ldi	r19, 0x06	; 6
		x >> 4;
		cnt += 4;	
 1b8:	24 e0       	ldi	r18, 0x04	; 4
 1ba:	ba cf       	rjmp	.-140    	; 0x130 <main+0x78>
	
	
	volatile size_t y = sizeof(void (M::*)(void));;
    
	volatile uint8_t z = ((x+3)/4)*4;  
	volatile uint8_t z1 = (x % 4 == 0 ? x : (x + 4) & ~(4-1) );  
 1bc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1be:	9d cf       	rjmp	.-198    	; 0xfa <main+0x42>

000001c0 <__ctzhi2>:
 1c0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__ffshi2>
 1c4:	8a 95       	dec	r24
 1c6:	08 95       	ret

000001c8 <__ffshi2>:
 1c8:	aa 27       	eor	r26, r26
 1ca:	81 11       	cpse	r24, r1
 1cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__loop_ffsqi2>
 1d0:	a8 e0       	ldi	r26, 0x08	; 8
 1d2:	89 2b       	or	r24, r25
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <__ffshi2+0x4>
 1d6:	08 95       	ret

000001d8 <__loop_ffsqi2>:
 1d8:	a3 95       	inc	r26
 1da:	86 95       	lsr	r24
 1dc:	e8 f7       	brcc	.-6      	; 0x1d8 <__loop_ffsqi2>
 1de:	8a 2f       	mov	r24, r26
 1e0:	99 27       	eor	r25, r25
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
