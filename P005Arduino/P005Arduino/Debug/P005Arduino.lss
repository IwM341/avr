
P005Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000012  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, OCTETS
  4 .debug_aranges 000000a0  00000000  00000000  000001e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   0000076f  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000685  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   000002fc  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00000034  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00007d68  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 00000222  00000000  00000000  00009114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00002c13  00000000  00000000  00009336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000013  00000000  00000000  0000bf49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1

00000076 <.Loc.1>:
  76:	a0 e0       	ldi	r26, 0x00	; 0

00000078 <.Loc.2>:
  78:	b1 e0       	ldi	r27, 0x01	; 1

0000007a <.Loc.3>:
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.Loc.5>

0000007c <.Loc.4>:
  7c:	1d 92       	st	X+, r1

0000007e <.Loc.5>:
  7e:	a0 30       	cpi	r26, 0x00	; 0

00000080 <.Loc.6>:
  80:	b2 07       	cpc	r27, r18

00000082 <.Loc.7>:
  82:	e1 f7       	brne	.-8      	; 0x7c <.Loc.4>

00000084 <L0^A>:
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
struct S{
	int x;
	char c;
};
int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <L0^A>

00000096 <L0^A>:
  96:	00 d0       	rcall	.+0      	; 0x98 <L0^A>

00000098 <L0^A>:
  98:	00 d0       	rcall	.+0      	; 0x9a <L0^A>

0000009a <L0^A>:
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62

0000009e <.Loc.1>:
	uint8_t x =  DDRD;
  9e:	8a e2       	ldi	r24, 0x2A	; 42
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	fc 01       	movw	r30, r24
  a4:	80 81       	ld	r24, Z
  a6:	89 83       	std	Y+1, r24	; 0x01

000000a8 <.Loc.2>:
	volatile uint8_t y = __builtin_popcount(x);
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	88 2f       	mov	r24, r24
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 82 00 	call	0x104	; 0x104 <__popcounthi2>

000000b2 <.Loc.3>:
  b2:	8a 83       	std	Y+2, r24	; 0x02

000000b4 <.Loc.4>:
	volatile size_t sizeof_S = sizeof(S);
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	9c 83       	std	Y+4, r25	; 0x04
  ba:	8b 83       	std	Y+3, r24	; 0x03

000000bc <.Loc.5>:
	volatile size_t sizeof_size_t = sizeof(size_t);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	9e 83       	std	Y+6, r25	; 0x06
  c2:	8d 83       	std	Y+5, r24	; 0x05

000000c4 <.Loc.6>:
	while(sizeof_S + sizeof_size_t + y){
  c4:	03 c0       	rjmp	.+6      	; 0xcc <.L2>

000000c6 <.L4>:
		y += 1;
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	8a 83       	std	Y+2, r24	; 0x02

000000cc <.L2>:
	while(sizeof_S + sizeof_size_t + y){
  cc:	2b 81       	ldd	r18, Y+3	; 0x03
  ce:	3c 81       	ldd	r19, Y+4	; 0x04

000000d0 <.Loc.9>:
  d0:	8d 81       	ldd	r24, Y+5	; 0x05
  d2:	9e 81       	ldd	r25, Y+6	; 0x06

000000d4 <.Loc.10>:
  d4:	28 0f       	add	r18, r24
  d6:	39 1f       	adc	r19, r25

000000d8 <.Loc.11>:
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0

000000de <.Loc.12>:
  de:	82 0f       	add	r24, r18
  e0:	93 1f       	adc	r25, r19
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	09 f4       	brne	.+2      	; 0xea <.L3>
  e8:	20 e0       	ldi	r18, 0x00	; 0

000000ea <.L3>:
  ea:	22 23       	and	r18, r18
  ec:	61 f7       	brne	.-40     	; 0xc6 <.L4>

000000ee <.Loc.13>:
	}
}
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <__popcounthi2>:
 104:	0e 94 8c 00 	call	0x118	; 0x118 <__popcountqi2>

00000108 <.Loc.1>:
 108:	8f 93       	push	r24

0000010a <.Loc.2>:
 10a:	89 2f       	mov	r24, r25

0000010c <.Loc.3>:
 10c:	0e 94 8c 00 	call	0x118	; 0x118 <__popcountqi2>

00000110 <.Loc.4>:
 110:	99 27       	eor	r25, r25

00000112 <__popcounthi2_tail>:
 112:	0f 90       	pop	r0

00000114 <.Loc.6>:
 114:	80 0d       	add	r24, r0

00000116 <.Loc.7>:
 116:	08 95       	ret

00000118 <__popcountqi2>:
 118:	08 2e       	mov	r0, r24

0000011a <.Loc.1>:
 11a:	81 70       	andi	r24, 0x01	; 1

0000011c <.Loc.2>:
 11c:	06 94       	lsr	r0

0000011e <.Loc.3>:
 11e:	06 94       	lsr	r0

00000120 <.Loc.4>:
 120:	81 1d       	adc	r24, r1

00000122 <.Loc.5>:
 122:	06 94       	lsr	r0

00000124 <.Loc.6>:
 124:	81 1d       	adc	r24, r1

00000126 <.Loc.7>:
 126:	06 94       	lsr	r0

00000128 <.Loc.8>:
 128:	81 1d       	adc	r24, r1

0000012a <.Loc.9>:
 12a:	06 94       	lsr	r0

0000012c <.Loc.10>:
 12c:	81 1d       	adc	r24, r1

0000012e <.Loc.11>:
 12e:	06 94       	lsr	r0

00000130 <.Loc.12>:
 130:	81 1d       	adc	r24, r1

00000132 <.Loc.13>:
 132:	06 94       	lsr	r0

00000134 <.Loc.14>:
 134:	80 1d       	adc	r24, r0

00000136 <.Loc.15>:
 136:	08 95       	ret

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
