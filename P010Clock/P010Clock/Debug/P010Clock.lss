
P010Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000e8c  00000f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800130  00800130  00000f50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dae  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2b  00000000  00000000  00002dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000636  00000000  00000000  00003901  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00003f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d9a  00000000  00000000  00004110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a7  00000000  00000000  00004eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00005851  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 04 	call	0x952	; 0x952 <main>
  9e:	0c 94 44 07 	jmp	0xe88	; 0xe88 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZNK9ClassSlotI8my_clockIEE4callEv>:
	
	
	public:
	ClassSlot(T * Reciever,TFunction Func):Reciever(Reciever),Func(Func){}
	~ClassSlot(){}
	void call(Args... args)const{
  a6:	dc 01       	movw	r26, r24
		return (Reciever->*Func)(args...);
  a8:	16 96       	adiw	r26, 0x06	; 6
  aa:	2d 91       	ld	r18, X+
  ac:	3c 91       	ld	r19, X
  ae:	17 97       	sbiw	r26, 0x07	; 7
  b0:	20 fd       	sbrc	r18, 0
  b2:	05 c0       	rjmp	.+10     	; 0xbe <_ZNK9ClassSlotI8my_clockIEE4callEv+0x18>
  b4:	14 96       	adiw	r26, 0x04	; 4
  b6:	ed 91       	ld	r30, X+
  b8:	fc 91       	ld	r31, X
  ba:	15 97       	sbiw	r26, 0x05	; 5
  bc:	15 c0       	rjmp	.+42     	; 0xe8 <_ZNK9ClassSlotI8my_clockIEE4callEv+0x42>
  be:	12 96       	adiw	r26, 0x02	; 2
  c0:	ed 91       	ld	r30, X+
  c2:	fc 91       	ld	r31, X
  c4:	13 97       	sbiw	r26, 0x03	; 3
  c6:	c9 01       	movw	r24, r18
  c8:	95 95       	asr	r25
  ca:	87 95       	ror	r24
  cc:	e8 0f       	add	r30, r24
  ce:	f9 1f       	adc	r31, r25
  d0:	01 90       	ld	r0, Z+
  d2:	f0 81       	ld	r31, Z
  d4:	e0 2d       	mov	r30, r0
  d6:	14 96       	adiw	r26, 0x04	; 4
  d8:	8d 91       	ld	r24, X+
  da:	9c 91       	ld	r25, X
  dc:	15 97       	sbiw	r26, 0x05	; 5
  de:	e8 0f       	add	r30, r24
  e0:	f9 1f       	adc	r31, r25
  e2:	01 90       	ld	r0, Z+
  e4:	f0 81       	ld	r31, Z
  e6:	e0 2d       	mov	r30, r0
  e8:	12 96       	adiw	r26, 0x02	; 2
  ea:	8d 91       	ld	r24, X+
  ec:	9c 91       	ld	r25, X
  ee:	13 97       	sbiw	r26, 0x03	; 3
  f0:	35 95       	asr	r19
  f2:	27 95       	ror	r18
  f4:	82 0f       	add	r24, r18
  f6:	93 1f       	adc	r25, r19
  f8:	09 95       	icall
  fa:	08 95       	ret

000000fc <_ZNK9ClassSlotI8my_clockIEE4sizeEv>:
	}
	
	uint8_t size()const{return sizeof(ClassSlot);}
  fc:	88 e0       	ldi	r24, 0x08	; 8
  fe:	08 95       	ret

00000100 <_ZN9ClassSlotI8my_clockIEED1Ev>:
class AbstractDelegator{
	
	public:
	virtual void call(Args... args)const = 0;
	virtual uint8_t size() const= 0;
	virtual ~AbstractDelegator(){}
 100:	22 e1       	ldi	r18, 0x12	; 18
 102:	31 e0       	ldi	r19, 0x01	; 1
 104:	fc 01       	movw	r30, r24
 106:	31 83       	std	Z+1, r19	; 0x01
 108:	20 83       	st	Z, r18
 10a:	08 95       	ret

0000010c <_ZN9ClassSlotI8my_clockIEED0Ev>:
 10c:	22 e1       	ldi	r18, 0x12	; 18
 10e:	31 e0       	ldi	r19, 0x01	; 1
 110:	fc 01       	movw	r30, r24
 112:	31 83       	std	Z+1, r19	; 0x01
 114:	20 83       	st	Z, r18
	
	
	
	public:
	ClassSlot(T * Reciever,TFunction Func):Reciever(Reciever),Func(Func){}
	~ClassSlot(){}
 116:	68 e0       	ldi	r22, 0x08	; 8
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZdlPvj>
 11e:	08 95       	ret

00000120 <_ZN8my_clock8set_timeEv>:
}

struct my_clock{
	uint8_t c1,c2,c3,c4;
	uint8_t mask;
	void set_time(){
 120:	2f 92       	push	r2
 122:	3f 92       	push	r3
 124:	4f 92       	push	r4
 126:	5f 92       	push	r5
 128:	6f 92       	push	r6
 12a:	7f 92       	push	r7
 12c:	8f 92       	push	r8
 12e:	9f 92       	push	r9
 130:	af 92       	push	r10
 132:	bf 92       	push	r11
 134:	cf 92       	push	r12
 136:	df 92       	push	r13
 138:	ef 92       	push	r14
 13a:	ff 92       	push	r15
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	cd 54       	subi	r28, 0x4D	; 77
 14a:	d1 09       	sbc	r29, r1
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	2e 96       	adiw	r28, 0x0e	; 14
 158:	9f af       	std	Y+63, r25	; 0x3f
 15a:	8e af       	std	Y+62, r24	; 0x3e
 15c:	2e 97       	sbiw	r28, 0x0e	; 14
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	inline static scheduler & scheduler_r(){
		static scheduler S;
 15e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 162:	81 11       	cpse	r24, r1
 164:	16 c0       	rjmp	.+44     	; 0x192 <_ZN8my_clock8set_timeEv+0x72>
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 55 05 	call	0xaaa	; 0xaaa <__cxa_guard_acquire>
 16e:	89 2b       	or	r24, r25
 170:	81 f0       	breq	.+32     	; 0x192 <_ZN8my_clock8set_timeEv+0x72>
	void set_clock(const _data & dat){
		_clock = dat;
	}
	
	private:
	scheduler():_clock(0){}
 172:	e8 e3       	ldi	r30, 0x38	; 56
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	10 82       	st	Z, r1
 178:	11 82       	std	Z+1, r1	; 0x01
 17a:	12 82       	std	Z+2, r1	; 0x02
 17c:	13 82       	std	Z+3, r1	; 0x03
 17e:	14 82       	std	Z+4, r1	; 0x04
 180:	15 82       	std	Z+5, r1	; 0x05
 182:	16 82       	std	Z+6, r1	; 0x06
 184:	17 82       	std	Z+7, r1	; 0x07
template <typename T>
class list{
	list_data<T> *first;
	
	public:
	list():first(0){}
 186:	11 86       	std	Z+9, r1	; 0x09
 188:	10 86       	std	Z+8, r1	; 0x08
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	inline static scheduler & scheduler_r(){
		static scheduler S;
 18a:	80 e3       	ldi	r24, 0x30	; 48
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 5e 05 	call	0xabc	; 0xabc <__cxa_guard_release>
				++it;
		}
	}
	uint64_t clock() const{return _clock;}
	_data data_clock() const{
		return _data(_clock);
 192:	e8 e3       	ldi	r30, 0x38	; 56
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	20 80       	ld	r2, Z
 198:	31 80       	ldd	r3, Z+1	; 0x01
 19a:	42 80       	ldd	r4, Z+2	; 0x02
 19c:	53 80       	ldd	r5, Z+3	; 0x03
 19e:	64 80       	ldd	r6, Z+4	; 0x04
 1a0:	75 80       	ldd	r7, Z+5	; 0x05
 1a2:	86 80       	ldd	r8, Z+6	; 0x06
 1a4:	97 80       	ldd	r9, Z+7	; 0x07
		operator uint64_t() const{
			return millis + seconds*sec+minuts*min+hours*hour + days*day;
		}
		_data(){}
		_data(uint64_t _clk){
			millis = _clk % 1000;
 1a6:	0f 2e       	mov	r0, r31
 1a8:	f8 ee       	ldi	r31, 0xE8	; 232
 1aa:	af 2e       	mov	r10, r31
 1ac:	f0 2d       	mov	r31, r0
 1ae:	0f 2e       	mov	r0, r31
 1b0:	f3 e0       	ldi	r31, 0x03	; 3
 1b2:	bf 2e       	mov	r11, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	c1 2c       	mov	r12, r1
 1b8:	d1 2c       	mov	r13, r1
 1ba:	e1 2c       	mov	r14, r1
 1bc:	f1 2c       	mov	r15, r1
 1be:	00 e0       	ldi	r16, 0x00	; 0
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	22 2d       	mov	r18, r2
 1c4:	33 2d       	mov	r19, r3
 1c6:	44 2d       	mov	r20, r4
 1c8:	55 2d       	mov	r21, r5
 1ca:	66 2d       	mov	r22, r6
 1cc:	77 2d       	mov	r23, r7
 1ce:	88 2d       	mov	r24, r8
 1d0:	99 2d       	mov	r25, r9
 1d2:	0e 94 af 05 	call	0xb5e	; 0xb5e <__umoddi3>
 1d6:	2e 8f       	std	Y+30, r18	; 0x1e
			_clk /= 1000;
 1d8:	22 2d       	mov	r18, r2
 1da:	33 2d       	mov	r19, r3
 1dc:	44 2d       	mov	r20, r4
 1de:	55 2d       	mov	r21, r5
 1e0:	66 2d       	mov	r22, r6
 1e2:	77 2d       	mov	r23, r7
 1e4:	88 2d       	mov	r24, r8
 1e6:	99 2d       	mov	r25, r9
 1e8:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivdi3>
			
			seconds = _clk % 60;
 1ec:	0f 2e       	mov	r0, r31
 1ee:	fc e3       	ldi	r31, 0x3C	; 60
 1f0:	af 2e       	mov	r10, r31
 1f2:	f0 2d       	mov	r31, r0
 1f4:	b1 2c       	mov	r11, r1
 1f6:	0e 94 af 05 	call	0xb5e	; 0xb5e <__umoddi3>
 1fa:	2d 8f       	std	Y+29, r18	; 0x1d
			_clk /= 60;
 1fc:	0f 2e       	mov	r0, r31
 1fe:	f0 e6       	ldi	r31, 0x60	; 96
 200:	af 2e       	mov	r10, r31
 202:	f0 2d       	mov	r31, r0
 204:	0f 2e       	mov	r0, r31
 206:	fa ee       	ldi	r31, 0xEA	; 234
 208:	bf 2e       	mov	r11, r31
 20a:	f0 2d       	mov	r31, r0
 20c:	22 2d       	mov	r18, r2
 20e:	33 2d       	mov	r19, r3
 210:	44 2d       	mov	r20, r4
 212:	55 2d       	mov	r21, r5
 214:	66 2d       	mov	r22, r6
 216:	77 2d       	mov	r23, r7
 218:	88 2d       	mov	r24, r8
 21a:	99 2d       	mov	r25, r9
 21c:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivdi3>
			
			minuts= _clk % 60;
 220:	0f 2e       	mov	r0, r31
 222:	fc e3       	ldi	r31, 0x3C	; 60
 224:	af 2e       	mov	r10, r31
 226:	f0 2d       	mov	r31, r0
 228:	b1 2c       	mov	r11, r1
 22a:	0e 94 af 05 	call	0xb5e	; 0xb5e <__umoddi3>
 22e:	2c 8f       	std	Y+28, r18	; 0x1c
			_clk /= 60;
 230:	68 94       	set
 232:	aa 24       	eor	r10, r10
 234:	a7 f8       	bld	r10, 7
 236:	0f 2e       	mov	r0, r31
 238:	fe ee       	ldi	r31, 0xEE	; 238
 23a:	bf 2e       	mov	r11, r31
 23c:	f0 2d       	mov	r31, r0
 23e:	0f 2e       	mov	r0, r31
 240:	f6 e3       	ldi	r31, 0x36	; 54
 242:	cf 2e       	mov	r12, r31
 244:	f0 2d       	mov	r31, r0
 246:	22 2d       	mov	r18, r2
 248:	33 2d       	mov	r19, r3
 24a:	44 2d       	mov	r20, r4
 24c:	55 2d       	mov	r21, r5
 24e:	66 2d       	mov	r22, r6
 250:	77 2d       	mov	r23, r7
 252:	88 2d       	mov	r24, r8
 254:	99 2d       	mov	r25, r9
 256:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivdi3>
			
			hours = _clk % 24;
 25a:	0f 2e       	mov	r0, r31
 25c:	f8 e1       	ldi	r31, 0x18	; 24
 25e:	af 2e       	mov	r10, r31
 260:	f0 2d       	mov	r31, r0
 262:	b1 2c       	mov	r11, r1
 264:	c1 2c       	mov	r12, r1
 266:	0e 94 af 05 	call	0xb5e	; 0xb5e <__umoddi3>
 26a:	2b 8f       	std	Y+27, r18	; 0x1b
			_clk /= 24;
 26c:	a1 2c       	mov	r10, r1
 26e:	0f 2e       	mov	r0, r31
 270:	fc e5       	ldi	r31, 0x5C	; 92
 272:	bf 2e       	mov	r11, r31
 274:	f0 2d       	mov	r31, r0
 276:	0f 2e       	mov	r0, r31
 278:	f6 e2       	ldi	r31, 0x26	; 38
 27a:	cf 2e       	mov	r12, r31
 27c:	f0 2d       	mov	r31, r0
 27e:	0f 2e       	mov	r0, r31
 280:	f5 e0       	ldi	r31, 0x05	; 5
 282:	df 2e       	mov	r13, r31
 284:	f0 2d       	mov	r31, r0
 286:	22 2d       	mov	r18, r2
 288:	33 2d       	mov	r19, r3
 28a:	44 2d       	mov	r20, r4
 28c:	55 2d       	mov	r21, r5
 28e:	66 2d       	mov	r22, r6
 290:	77 2d       	mov	r23, r7
 292:	88 2d       	mov	r24, r8
 294:	99 2d       	mov	r25, r9
 296:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivdi3>
			
			days = _clk;	
 29a:	2a 8f       	std	Y+26, r18	; 0x1a
				++it;
		}
	}
	uint64_t clock() const{return _clock;}
	_data data_clock() const{
		return _data(_clock);
 29c:	85 e0       	ldi	r24, 0x05	; 5
 29e:	fe 01       	movw	r30, r28
 2a0:	7a 96       	adiw	r30, 0x1a	; 26
 2a2:	de 01       	movw	r26, r28
 2a4:	55 96       	adiw	r26, 0x15	; 21
 2a6:	01 90       	ld	r0, Z+
 2a8:	0d 92       	st	X+, r0
 2aa:	8a 95       	dec	r24
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <_ZN8my_clock8set_timeEv+0x186>
 2ae:	85 e0       	ldi	r24, 0x05	; 5
 2b0:	fe 01       	movw	r30, r28
 2b2:	75 96       	adiw	r30, 0x15	; 21
 2b4:	de 01       	movw	r26, r28
 2b6:	99 96       	adiw	r26, 0x29	; 41
 2b8:	01 90       	ld	r0, Z+
 2ba:	0d 92       	st	X+, r0
 2bc:	8a 95       	dec	r24
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <_ZN8my_clock8set_timeEv+0x198>
		scheduler::_data D  = scheduler::scheduler_r().data_clock();
		c1 = digit[D.minuts / 10];
 2c0:	eb a5       	ldd	r30, Y+43	; 0x2b
 2c2:	8d ec       	ldi	r24, 0xCD	; 205
 2c4:	e8 9f       	mul	r30, r24
 2c6:	91 2d       	mov	r25, r1
 2c8:	11 24       	eor	r1, r1
 2ca:	96 95       	lsr	r25
 2cc:	96 95       	lsr	r25
 2ce:	96 95       	lsr	r25
 2d0:	a9 2f       	mov	r26, r25
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	aa 5d       	subi	r26, 0xDA	; 218
 2d6:	be 4f       	sbci	r27, 0xFE	; 254
 2d8:	2c 91       	ld	r18, X
 2da:	2e 96       	adiw	r28, 0x0e	; 14
 2dc:	ae ad       	ldd	r26, Y+62	; 0x3e
 2de:	bf ad       	ldd	r27, Y+63	; 0x3f
 2e0:	2e 97       	sbiw	r28, 0x0e	; 14
 2e2:	2c 93       	st	X, r18
		c2 = digit[D.minuts % 10];
 2e4:	99 0f       	add	r25, r25
 2e6:	29 2f       	mov	r18, r25
 2e8:	22 0f       	add	r18, r18
 2ea:	22 0f       	add	r18, r18
 2ec:	92 0f       	add	r25, r18
 2ee:	e9 1b       	sub	r30, r25
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	ea 5d       	subi	r30, 0xDA	; 218
 2f4:	fe 4f       	sbci	r31, 0xFE	; 254
 2f6:	90 81       	ld	r25, Z
 2f8:	11 96       	adiw	r26, 0x01	; 1
 2fa:	9c 93       	st	X, r25
		c3 = digit[D.seconds / 10];
 2fc:	ec a5       	ldd	r30, Y+44	; 0x2c
 2fe:	e8 9f       	mul	r30, r24
 300:	81 2d       	mov	r24, r1
 302:	11 24       	eor	r1, r1
 304:	86 95       	lsr	r24
 306:	86 95       	lsr	r24
 308:	86 95       	lsr	r24
 30a:	a8 2f       	mov	r26, r24
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	aa 5d       	subi	r26, 0xDA	; 218
 310:	be 4f       	sbci	r27, 0xFE	; 254
 312:	9c 91       	ld	r25, X
 314:	2e 96       	adiw	r28, 0x0e	; 14
 316:	ae ad       	ldd	r26, Y+62	; 0x3e
 318:	bf ad       	ldd	r27, Y+63	; 0x3f
 31a:	2e 97       	sbiw	r28, 0x0e	; 14
 31c:	12 96       	adiw	r26, 0x02	; 2
 31e:	9c 93       	st	X, r25
 320:	12 97       	sbiw	r26, 0x02	; 2
		c4 = digit[D.seconds % 10];
 322:	88 0f       	add	r24, r24
 324:	98 2f       	mov	r25, r24
 326:	99 0f       	add	r25, r25
 328:	99 0f       	add	r25, r25
 32a:	89 0f       	add	r24, r25
 32c:	e8 1b       	sub	r30, r24
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	ea 5d       	subi	r30, 0xDA	; 218
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	80 81       	ld	r24, Z
 336:	13 96       	adiw	r26, 0x03	; 3
 338:	8c 93       	st	X, r24
		scheduler::scheduler_r().conect_by_delta_clock(1000,this,&my_clock::set_time);
 33a:	0f 2e       	mov	r0, r31
 33c:	f0 e9       	ldi	r31, 0x90	; 144
 33e:	4f 2e       	mov	r4, r31
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	5f 2e       	mov	r5, r31
 344:	f0 2d       	mov	r31, r0
 346:	61 2c       	mov	r6, r1
 348:	71 2c       	mov	r7, r1
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	inline static scheduler & scheduler_r(){
		static scheduler S;
 34a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 34e:	81 11       	cpse	r24, r1
 350:	16 c0       	rjmp	.+44     	; 0x37e <_ZN8my_clock8set_timeEv+0x25e>
 352:	80 e3       	ldi	r24, 0x30	; 48
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 55 05 	call	0xaaa	; 0xaaa <__cxa_guard_acquire>
 35a:	89 2b       	or	r24, r25
 35c:	81 f0       	breq	.+32     	; 0x37e <_ZN8my_clock8set_timeEv+0x25e>
	void set_clock(const _data & dat){
		_clock = dat;
	}
	
	private:
	scheduler():_clock(0){}
 35e:	e8 e3       	ldi	r30, 0x38	; 56
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	10 82       	st	Z, r1
 364:	11 82       	std	Z+1, r1	; 0x01
 366:	12 82       	std	Z+2, r1	; 0x02
 368:	13 82       	std	Z+3, r1	; 0x03
 36a:	14 82       	std	Z+4, r1	; 0x04
 36c:	15 82       	std	Z+5, r1	; 0x05
 36e:	16 82       	std	Z+6, r1	; 0x06
 370:	17 82       	std	Z+7, r1	; 0x07
 372:	11 86       	std	Z+9, r1	; 0x09
 374:	10 86       	std	Z+8, r1	; 0x08
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	inline static scheduler & scheduler_r(){
		static scheduler S;
 376:	80 e3       	ldi	r24, 0x30	; 48
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 5e 05 	call	0xabc	; 0xabc <__cxa_guard_release>

template <typename... Args>
struct DelegatorConstructor{
	template <typename T>
	static AbstractDelegator<Args...> * Construct(T * Reciever, typename ClassSlot<T,Args...>::TFunction Func){
		return new ClassSlot<T,Args...>(Reciever,Func);
 37e:	88 e0       	ldi	r24, 0x08	; 8
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Znwj>
 386:	fc 01       	movw	r30, r24
	TFunction Func;
	
	
	
	public:
	ClassSlot(T * Reciever,TFunction Func):Reciever(Reciever),Func(Func){}
 388:	8e e1       	ldi	r24, 0x1E	; 30
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	91 83       	std	Z+1, r25	; 0x01
 38e:	80 83       	st	Z, r24
 390:	2e 96       	adiw	r28, 0x0e	; 14
 392:	8e ad       	ldd	r24, Y+62	; 0x3e
 394:	9f ad       	ldd	r25, Y+63	; 0x3f
 396:	2e 97       	sbiw	r28, 0x0e	; 14
 398:	93 83       	std	Z+3, r25	; 0x03
 39a:	82 83       	std	Z+2, r24	; 0x02
 39c:	44 82       	std	Z+4, r4	; 0x04
 39e:	55 82       	std	Z+5, r5	; 0x05
 3a0:	66 82       	std	Z+6, r6	; 0x06
 3a2:	77 82       	std	Z+7, r7	; 0x07
	
	
	
	template <typename...FunctionInfo>
	void conect_by_delta_clock(uint64_t delta_clock,FunctionInfo...fInfo){
		alarm_calls.push_back(_alarm(delta_clock+_clock,DelegatorConstructor<>::Construct(fInfo...)) );
 3a4:	08 e3       	ldi	r16, 0x38	; 56
 3a6:	11 e0       	ldi	r17, 0x01	; 1
 3a8:	d8 01       	movw	r26, r16
 3aa:	2c 91       	ld	r18, X
 3ac:	11 96       	adiw	r26, 0x01	; 1
 3ae:	3c 91       	ld	r19, X
 3b0:	11 97       	sbiw	r26, 0x01	; 1
 3b2:	12 96       	adiw	r26, 0x02	; 2
 3b4:	4c 91       	ld	r20, X
 3b6:	12 97       	sbiw	r26, 0x02	; 2
 3b8:	13 96       	adiw	r26, 0x03	; 3
 3ba:	5c 91       	ld	r21, X
 3bc:	13 97       	sbiw	r26, 0x03	; 3
 3be:	14 96       	adiw	r26, 0x04	; 4
 3c0:	6c 91       	ld	r22, X
 3c2:	14 97       	sbiw	r26, 0x04	; 4
 3c4:	15 96       	adiw	r26, 0x05	; 5
 3c6:	7c 91       	ld	r23, X
 3c8:	15 97       	sbiw	r26, 0x05	; 5
 3ca:	16 96       	adiw	r26, 0x06	; 6
 3cc:	8c 91       	ld	r24, X
 3ce:	16 97       	sbiw	r26, 0x06	; 6
 3d0:	17 96       	adiw	r26, 0x07	; 7
 3d2:	9c 91       	ld	r25, X
 3d4:	28 51       	subi	r18, 0x18	; 24
 3d6:	3c 4f       	sbci	r19, 0xFC	; 252
 3d8:	4f 4f       	sbci	r20, 0xFF	; 255
 3da:	5f 4f       	sbci	r21, 0xFF	; 255
 3dc:	6f 4f       	sbci	r22, 0xFF	; 255
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	8f 4f       	sbci	r24, 0xFF	; 255
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
	uint64_t _clock;
	
	struct _alarm{
		uint64_t alarm_clock;
		AbstractDelegator<> * Slot;
		_alarm(uint64_t alarm_clock,AbstractDelegator<> * Slot):alarm_clock(alarm_clock),Slot(Slot){}
 3e4:	2f 8f       	std	Y+31, r18	; 0x1f
 3e6:	38 a3       	std	Y+32, r19	; 0x20
 3e8:	49 a3       	std	Y+33, r20	; 0x21
 3ea:	5a a3       	std	Y+34, r21	; 0x22
 3ec:	6b a3       	std	Y+35, r22	; 0x23
 3ee:	7c a3       	std	Y+36, r23	; 0x24
 3f0:	8d a3       	std	Y+37, r24	; 0x25
 3f2:	9e a3       	std	Y+38, r25	; 0x26
 3f4:	f8 a7       	std	Y+40, r31	; 0x28
 3f6:	ef a3       	std	Y+39, r30	; 0x27
 3f8:	8a e0       	ldi	r24, 0x0A	; 10
 3fa:	fe 01       	movw	r30, r28
 3fc:	7f 96       	adiw	r30, 0x1f	; 31
 3fe:	de 01       	movw	r26, r28
 400:	ae 5b       	subi	r26, 0xBE	; 190
 402:	bf 4f       	sbci	r27, 0xFF	; 255
 404:	01 90       	ld	r0, Z+
 406:	0d 92       	st	X+, r0
 408:	8a 95       	dec	r24
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	
	void push_back(T val){
		if(first){
 40c:	f8 01       	movw	r30, r16
 40e:	80 84       	ldd	r8, Z+8	; 0x08
 410:	91 84       	ldd	r9, Z+9	; 0x09
 412:	81 14       	cp	r8, r1
 414:	91 04       	cpc	r9, r1
 416:	11 f4       	brne	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	30 c0       	rjmp	.+96     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			auto it = first;
			for(;it->next != 0; it = it->next);
 41a:	4c 01       	movw	r8, r24
 41c:	d4 01       	movw	r26, r8
 41e:	1a 96       	adiw	r26, 0x0a	; 10
 420:	8d 91       	ld	r24, X+
 422:	9c 91       	ld	r25, X
 424:	1b 97       	sbiw	r26, 0x0b	; 11
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	c1 f7       	brne	.-16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			it->next = new list_data<T>(val);
 42a:	8a e0       	ldi	r24, 0x0A	; 10
 42c:	fe 01       	movw	r30, r28
 42e:	ee 5b       	subi	r30, 0xBE	; 190
 430:	ff 4f       	sbci	r31, 0xFF	; 255
 432:	de 01       	movw	r26, r28
 434:	11 96       	adiw	r26, 0x01	; 1
 436:	01 90       	ld	r0, Z+
 438:	0d 92       	st	X+, r0
 43a:	8a 95       	dec	r24
 43c:	e1 f7       	brne	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	8c e0       	ldi	r24, 0x0C	; 12
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Znwj>
 446:	2a e0       	ldi	r18, 0x0A	; 10
 448:	fe 01       	movw	r30, r28
 44a:	31 96       	adiw	r30, 0x01	; 1
 44c:	de 01       	movw	r26, r28
 44e:	9e 96       	adiw	r26, 0x2e	; 46
 450:	01 90       	ld	r0, Z+
 452:	0d 92       	st	X+, r0
 454:	2a 95       	dec	r18
 456:	e1 f7       	brne	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>

template <typename T>
struct list_data{
	T data;
	struct list_data * next;
	list_data(T data,list_data * next = 0):data(data),next(next){}
 458:	2a e0       	ldi	r18, 0x0A	; 10
 45a:	fe 01       	movw	r30, r28
 45c:	be 96       	adiw	r30, 0x2e	; 46
 45e:	dc 01       	movw	r26, r24
 460:	01 90       	ld	r0, Z+
 462:	0d 92       	st	X+, r0
 464:	2a 95       	dec	r18
 466:	e1 f7       	brne	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	fc 01       	movw	r30, r24
 46a:	13 86       	std	Z+11, r1	; 0x0b
 46c:	12 86       	std	Z+10, r1	; 0x0a
	
	void push_back(T val){
		if(first){
			auto it = first;
			for(;it->next != 0; it = it->next);
			it->next = new list_data<T>(val);
 46e:	d4 01       	movw	r26, r8
 470:	1b 96       	adiw	r26, 0x0b	; 11
 472:	9c 93       	st	X, r25
 474:	8e 93       	st	-X, r24
 476:	1a 97       	sbiw	r26, 0x0a	; 10
 478:	26 c0       	rjmp	.+76     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
		}
		else{
			first = new list_data<T>(val);
 47a:	8a e0       	ldi	r24, 0x0A	; 10
 47c:	fe 01       	movw	r30, r28
 47e:	ee 5b       	subi	r30, 0xBE	; 190
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	de 01       	movw	r26, r28
 484:	1b 96       	adiw	r26, 0x0b	; 11
 486:	01 90       	ld	r0, Z+
 488:	0d 92       	st	X+, r0
 48a:	8a 95       	dec	r24
 48c:	e1 f7       	brne	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	8c e0       	ldi	r24, 0x0C	; 12
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Znwj>
 496:	2a e0       	ldi	r18, 0x0A	; 10
 498:	fe 01       	movw	r30, r28
 49a:	3b 96       	adiw	r30, 0x0b	; 11
 49c:	de 01       	movw	r26, r28
 49e:	d8 96       	adiw	r26, 0x38	; 56
 4a0:	01 90       	ld	r0, Z+
 4a2:	0d 92       	st	X+, r0
 4a4:	2a 95       	dec	r18
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>

template <typename T>
struct list_data{
	T data;
	struct list_data * next;
	list_data(T data,list_data * next = 0):data(data),next(next){}
 4a8:	2a e0       	ldi	r18, 0x0A	; 10
 4aa:	fe 01       	movw	r30, r28
 4ac:	f8 96       	adiw	r30, 0x38	; 56
 4ae:	dc 01       	movw	r26, r24
 4b0:	01 90       	ld	r0, Z+
 4b2:	0d 92       	st	X+, r0
 4b4:	2a 95       	dec	r18
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b8:	fc 01       	movw	r30, r24
 4ba:	13 86       	std	Z+11, r1	; 0x0b
 4bc:	12 86       	std	Z+10, r1	; 0x0a
			auto it = first;
			for(;it->next != 0; it = it->next);
			it->next = new list_data<T>(val);
		}
		else{
			first = new list_data<T>(val);
 4be:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <_ZZN9scheduler11scheduler_rEvE1S+0x9>
 4c2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_ZZN9scheduler11scheduler_rEvE1S+0x8>
	}
 4c6:	c3 5b       	subi	r28, 0xB3	; 179
 4c8:	df 4f       	sbci	r29, 0xFF	; 255
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
 4e0:	df 90       	pop	r13
 4e2:	cf 90       	pop	r12
 4e4:	bf 90       	pop	r11
 4e6:	af 90       	pop	r10
 4e8:	9f 90       	pop	r9
 4ea:	8f 90       	pop	r8
 4ec:	7f 90       	pop	r7
 4ee:	6f 90       	pop	r6
 4f0:	5f 90       	pop	r5
 4f2:	4f 90       	pop	r4
 4f4:	3f 90       	pop	r3
 4f6:	2f 90       	pop	r2
 4f8:	08 95       	ret

000004fa <_ZN9scheduler11scheduler_rEv>:
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	inline static scheduler & scheduler_r(){
		static scheduler S;
 4fa:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 4fe:	81 11       	cpse	r24, r1
 500:	16 c0       	rjmp	.+44     	; 0x52e <_ZN9scheduler11scheduler_rEv+0x34>
 502:	80 e3       	ldi	r24, 0x30	; 48
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 55 05 	call	0xaaa	; 0xaaa <__cxa_guard_acquire>
 50a:	89 2b       	or	r24, r25
 50c:	81 f0       	breq	.+32     	; 0x52e <_ZN9scheduler11scheduler_rEv+0x34>
	void set_clock(const _data & dat){
		_clock = dat;
	}
	
	private:
	scheduler():_clock(0){}
 50e:	e8 e3       	ldi	r30, 0x38	; 56
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	10 82       	st	Z, r1
 514:	11 82       	std	Z+1, r1	; 0x01
 516:	12 82       	std	Z+2, r1	; 0x02
 518:	13 82       	std	Z+3, r1	; 0x03
 51a:	14 82       	std	Z+4, r1	; 0x04
 51c:	15 82       	std	Z+5, r1	; 0x05
 51e:	16 82       	std	Z+6, r1	; 0x06
 520:	17 82       	std	Z+7, r1	; 0x07
template <typename T>
class list{
	list_data<T> *first;
	
	public:
	list():first(0){}
 522:	11 86       	std	Z+9, r1	; 0x09
 524:	10 86       	std	Z+8, r1	; 0x08
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	inline static scheduler & scheduler_r(){
		static scheduler S;
 526:	80 e3       	ldi	r24, 0x30	; 48
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 5e 05 	call	0xabc	; 0xabc <__cxa_guard_release>
		return S;
	}
 52e:	88 e3       	ldi	r24, 0x38	; 56
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	08 95       	ret

00000534 <__vector_14>:
	inline static scheduler * scheduler_p(){
		return &scheduler_r();
	}
};

ISR(TIMER0_COMPA_vect){
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	8f 92       	push	r8
 540:	9f 92       	push	r9
 542:	af 92       	push	r10
 544:	bf 92       	push	r11
 546:	cf 92       	push	r12
 548:	df 92       	push	r13
 54a:	ef 92       	push	r14
 54c:	ff 92       	push	r15
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	2f 93       	push	r18
 554:	3f 93       	push	r19
 556:	4f 93       	push	r20
 558:	5f 93       	push	r21
 55a:	6f 93       	push	r22
 55c:	7f 93       	push	r23
 55e:	8f 93       	push	r24
 560:	9f 93       	push	r25
 562:	af 93       	push	r26
 564:	bf 93       	push	r27
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	inline static scheduler & scheduler_r(){
		static scheduler S;
 56e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 572:	81 11       	cpse	r24, r1
 574:	16 c0       	rjmp	.+44     	; 0x5a2 <__vector_14+0x6e>
 576:	80 e3       	ldi	r24, 0x30	; 48
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 55 05 	call	0xaaa	; 0xaaa <__cxa_guard_acquire>
 57e:	89 2b       	or	r24, r25
 580:	81 f0       	breq	.+32     	; 0x5a2 <__vector_14+0x6e>
	void set_clock(const _data & dat){
		_clock = dat;
	}
	
	private:
	scheduler():_clock(0){}
 582:	e8 e3       	ldi	r30, 0x38	; 56
 584:	f1 e0       	ldi	r31, 0x01	; 1
 586:	10 82       	st	Z, r1
 588:	11 82       	std	Z+1, r1	; 0x01
 58a:	12 82       	std	Z+2, r1	; 0x02
 58c:	13 82       	std	Z+3, r1	; 0x03
 58e:	14 82       	std	Z+4, r1	; 0x04
 590:	15 82       	std	Z+5, r1	; 0x05
 592:	16 82       	std	Z+6, r1	; 0x06
 594:	17 82       	std	Z+7, r1	; 0x07
 596:	11 86       	std	Z+9, r1	; 0x09
 598:	10 86       	std	Z+8, r1	; 0x08
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	inline static scheduler & scheduler_r(){
		static scheduler S;
 59a:	80 e3       	ldi	r24, 0x30	; 48
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 5e 05 	call	0xabc	; 0xabc <__cxa_guard_release>
	template <typename...FunctionInfo>
	void conect_by_delta_clock(uint64_t delta_clock,FunctionInfo...fInfo){
		alarm_calls.push_back(_alarm(delta_clock+_clock,DelegatorConstructor<>::Construct(fInfo...)) );
	}
	void timer_ocr_interrupt(){
		++_clock;
 5a2:	e8 e3       	ldi	r30, 0x38	; 56
 5a4:	f1 e0       	ldi	r31, 0x01	; 1
 5a6:	20 81       	ld	r18, Z
 5a8:	31 81       	ldd	r19, Z+1	; 0x01
 5aa:	42 81       	ldd	r20, Z+2	; 0x02
 5ac:	53 81       	ldd	r21, Z+3	; 0x03
 5ae:	64 81       	ldd	r22, Z+4	; 0x04
 5b0:	75 81       	ldd	r23, Z+5	; 0x05
 5b2:	86 81       	ldd	r24, Z+6	; 0x06
 5b4:	97 81       	ldd	r25, Z+7	; 0x07
 5b6:	a1 e0       	ldi	r26, 0x01	; 1
 5b8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__adddi3_s8>
 5bc:	20 83       	st	Z, r18
 5be:	31 83       	std	Z+1, r19	; 0x01
 5c0:	42 83       	std	Z+2, r20	; 0x02
 5c2:	53 83       	std	Z+3, r21	; 0x03
 5c4:	64 83       	std	Z+4, r22	; 0x04
 5c6:	75 83       	std	Z+5, r23	; 0x05
 5c8:	86 83       	std	Z+6, r24	; 0x06
 5ca:	97 83       	std	Z+7, r25	; 0x07
	
	struct iterator{
		list_data<T> *ptr;
		list_data<T> *prev;
		
		iterator(list_data<T> *ptr):ptr(ptr),prev(0){}
 5cc:	80 85       	ldd	r24, Z+8	; 0x08
 5ce:	91 85       	ldd	r25, Z+9	; 0x09
 5d0:	d8 2f       	mov	r29, r24
 5d2:	c9 2f       	mov	r28, r25
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	88 2e       	mov	r8, r24
 5da:	99 2e       	mov	r9, r25
		}
		bool operator ==(const iterator & it) const{
			return ptr == it.ptr;
		}
		bool operator !=(const iterator & it) const{
			return ptr != it.ptr;
 5dc:	ed 2f       	mov	r30, r29
 5de:	fc 2f       	mov	r31, r28
		for(auto it = alarm_calls.begin();it != alarm_calls.end();){
 5e0:	30 97       	sbiw	r30, 0x00	; 0
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <__vector_14+0xb2>
 5e4:	70 c0       	rjmp	.+224    	; 0x6c6 <__vector_14+0x192>
			if((*it).alarm_clock <= _clock ){
 5e6:	20 81       	ld	r18, Z
 5e8:	31 81       	ldd	r19, Z+1	; 0x01
 5ea:	42 81       	ldd	r20, Z+2	; 0x02
 5ec:	53 81       	ldd	r21, Z+3	; 0x03
 5ee:	64 81       	ldd	r22, Z+4	; 0x04
 5f0:	75 81       	ldd	r23, Z+5	; 0x05
 5f2:	a8 e3       	ldi	r26, 0x38	; 56
 5f4:	b1 e0       	ldi	r27, 0x01	; 1
 5f6:	ac 90       	ld	r10, X
 5f8:	11 96       	adiw	r26, 0x01	; 1
 5fa:	bc 90       	ld	r11, X
 5fc:	11 97       	sbiw	r26, 0x01	; 1
 5fe:	12 96       	adiw	r26, 0x02	; 2
 600:	cc 90       	ld	r12, X
 602:	12 97       	sbiw	r26, 0x02	; 2
 604:	13 96       	adiw	r26, 0x03	; 3
 606:	dc 90       	ld	r13, X
 608:	13 97       	sbiw	r26, 0x03	; 3
 60a:	14 96       	adiw	r26, 0x04	; 4
 60c:	ec 90       	ld	r14, X
 60e:	14 97       	sbiw	r26, 0x04	; 4
 610:	15 96       	adiw	r26, 0x05	; 5
 612:	fc 90       	ld	r15, X
 614:	15 97       	sbiw	r26, 0x05	; 5
 616:	16 96       	adiw	r26, 0x06	; 6
 618:	0c 91       	ld	r16, X
 61a:	16 97       	sbiw	r26, 0x06	; 6
 61c:	17 96       	adiw	r26, 0x07	; 7
 61e:	1c 91       	ld	r17, X
 620:	86 81       	ldd	r24, Z+6	; 0x06
 622:	97 81       	ldd	r25, Z+7	; 0x07
 624:	0e 94 1a 06 	call	0xc34	; 0xc34 <__cmpdi2>
 628:	11 f0       	breq	.+4      	; 0x62e <__vector_14+0xfa>
 62a:	08 f0       	brcs	.+2      	; 0x62e <__vector_14+0xfa>
 62c:	44 c0       	rjmp	.+136    	; 0x6b6 <__vector_14+0x182>
				(*it).Slot->call();
 62e:	80 85       	ldd	r24, Z+8	; 0x08
 630:	91 85       	ldd	r25, Z+9	; 0x09
 632:	dc 01       	movw	r26, r24
 634:	ed 91       	ld	r30, X+
 636:	fc 91       	ld	r31, X
 638:	01 90       	ld	r0, Z+
 63a:	f0 81       	ld	r31, Z
 63c:	e0 2d       	mov	r30, r0
 63e:	09 95       	icall
		}
		T & operator *(){
			return ptr->data;
 640:	8d 2f       	mov	r24, r29
 642:	9c 2f       	mov	r25, r28
 644:	fc 01       	movw	r30, r24
				delete (*it).Slot;
 646:	80 85       	ldd	r24, Z+8	; 0x08
 648:	91 85       	ldd	r25, Z+9	; 0x09
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	39 f0       	breq	.+14     	; 0x65c <__vector_14+0x128>
 64e:	dc 01       	movw	r26, r24
 650:	ed 91       	ld	r30, X+
 652:	fc 91       	ld	r31, X
 654:	06 80       	ldd	r0, Z+6	; 0x06
 656:	f7 81       	ldd	r31, Z+7	; 0x07
 658:	e0 2d       	mov	r30, r0
 65a:	09 95       	icall
	iterator end(){
		return iterator(0);
	}
	
	iterator & remove(iterator & it){
		if(it.ptr){
 65c:	8d 2f       	mov	r24, r29
 65e:	9c 2f       	mov	r25, r28
 660:	fc 01       	movw	r30, r24
 662:	30 97       	sbiw	r30, 0x00	; 0
 664:	09 f4       	brne	.+2      	; 0x668 <__vector_14+0x134>
 666:	ba cf       	rjmp	.-140    	; 0x5dc <__vector_14+0xa8>
			if(it.prev){
 668:	28 2d       	mov	r18, r8
 66a:	39 2d       	mov	r19, r9
 66c:	d9 01       	movw	r26, r18
 66e:	10 97       	sbiw	r26, 0x00	; 0
 670:	69 f0       	breq	.+26     	; 0x68c <__vector_14+0x158>
				auto tmp_ptr = it.ptr->next;
 672:	02 85       	ldd	r16, Z+10	; 0x0a
 674:	13 85       	ldd	r17, Z+11	; 0x0b
				it.prev->next = tmp_ptr;
 676:	1b 96       	adiw	r26, 0x0b	; 11
 678:	1c 93       	st	X, r17
 67a:	0e 93       	st	-X, r16
 67c:	1a 97       	sbiw	r26, 0x0a	; 10
				delete it.ptr;
 67e:	6c e0       	ldi	r22, 0x0C	; 12
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZdlPvj>
				it.ptr = tmp_ptr;
 686:	d0 2f       	mov	r29, r16
 688:	c1 2f       	mov	r28, r17
 68a:	a8 cf       	rjmp	.-176    	; 0x5dc <__vector_14+0xa8>
			}
			else{
				first = it.ptr->next;
 68c:	82 85       	ldd	r24, Z+10	; 0x0a
 68e:	93 85       	ldd	r25, Z+11	; 0x0b
 690:	08 e3       	ldi	r16, 0x38	; 56
 692:	11 e0       	ldi	r17, 0x01	; 1
 694:	f8 01       	movw	r30, r16
 696:	91 87       	std	Z+9, r25	; 0x09
 698:	80 87       	std	Z+8, r24	; 0x08
				delete it.ptr;
 69a:	6c e0       	ldi	r22, 0x0C	; 12
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	8d 2f       	mov	r24, r29
 6a0:	9c 2f       	mov	r25, r28
 6a2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZdlPvj>
				it.ptr =  first;
 6a6:	d8 01       	movw	r26, r16
 6a8:	18 96       	adiw	r26, 0x08	; 8
 6aa:	8d 91       	ld	r24, X+
 6ac:	9c 91       	ld	r25, X
 6ae:	19 97       	sbiw	r26, 0x09	; 9
 6b0:	d8 2f       	mov	r29, r24
 6b2:	c9 2f       	mov	r28, r25
 6b4:	93 cf       	rjmp	.-218    	; 0x5dc <__vector_14+0xa8>
		list_data<T> *ptr;
		list_data<T> *prev;
		
		iterator(list_data<T> *ptr):ptr(ptr),prev(0){}
		iterator & operator ++(){
			prev = ptr;
 6b6:	cf 01       	movw	r24, r30
 6b8:	88 2e       	mov	r8, r24
 6ba:	99 2e       	mov	r9, r25
			ptr = ptr->next;
 6bc:	82 85       	ldd	r24, Z+10	; 0x0a
 6be:	93 85       	ldd	r25, Z+11	; 0x0b
 6c0:	d8 2f       	mov	r29, r24
 6c2:	c9 2f       	mov	r28, r25
 6c4:	8b cf       	rjmp	.-234    	; 0x5dc <__vector_14+0xa8>
	}
};

ISR(TIMER0_COMPA_vect){
	scheduler::scheduler_r().timer_ocr_interrupt();
}
 6c6:	ff 91       	pop	r31
 6c8:	ef 91       	pop	r30
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	bf 91       	pop	r27
 6d0:	af 91       	pop	r26
 6d2:	9f 91       	pop	r25
 6d4:	8f 91       	pop	r24
 6d6:	7f 91       	pop	r23
 6d8:	6f 91       	pop	r22
 6da:	5f 91       	pop	r21
 6dc:	4f 91       	pop	r20
 6de:	3f 91       	pop	r19
 6e0:	2f 91       	pop	r18
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	bf 90       	pop	r11
 6f0:	af 90       	pop	r10
 6f2:	9f 90       	pop	r9
 6f4:	8f 90       	pop	r8
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <_Z7set7segh>:
#include "../../framework/scheduler_process.hpp"
#include "../../framework/seg7.h"
#include "../../framework/ports.h"

void set7seg(uint8_t m_digit){
	uint16_t seg7 = m_digit << 2;
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
	set_port(PORTD,0b11111100,seg7);
 70a:	3b b1       	in	r19, 0x0b	; 11
 70c:	33 70       	andi	r19, 0x03	; 3
 70e:	28 2f       	mov	r18, r24
 710:	2c 7f       	andi	r18, 0xFC	; 252
 712:	83 2f       	mov	r24, r19
 714:	82 2b       	or	r24, r18
 716:	8b b9       	out	0x0b, r24	; 11
	set_port(PORTB,0b00000001,seg7>>8);
 718:	85 b1       	in	r24, 0x05	; 5
 71a:	8e 7f       	andi	r24, 0xFE	; 254
 71c:	91 70       	andi	r25, 0x01	; 1
 71e:	89 2b       	or	r24, r25
 720:	85 b9       	out	0x05, r24	; 5
 722:	08 95       	ret

00000724 <_ZN8my_clock11change_maskEv>:
		c2 = digit[D.minuts % 10];
		c3 = digit[D.seconds / 10];
		c4 = digit[D.seconds % 10];
		scheduler::scheduler_r().conect_by_delta_clock(1000,this,&my_clock::set_time);
	}
	void change_mask(){
 724:	cf 92       	push	r12
 726:	df 92       	push	r13
 728:	ef 92       	push	r14
 72a:	ff 92       	push	r15
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
 738:	ec 97       	sbiw	r28, 0x3c	; 60
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	de bf       	out	0x3e, r29	; 62
 740:	0f be       	out	0x3f, r0	; 63
 742:	cd bf       	out	0x3d, r28	; 61
 744:	8c 01       	movw	r16, r24
		switch (mask)
 746:	dc 01       	movw	r26, r24
 748:	14 96       	adiw	r26, 0x04	; 4
 74a:	8c 91       	ld	r24, X
 74c:	84 30       	cpi	r24, 0x04	; 4
 74e:	91 f0       	breq	.+36     	; 0x774 <_ZN8my_clock11change_maskEv+0x50>
 750:	18 f4       	brcc	.+6      	; 0x758 <_ZN8my_clock11change_maskEv+0x34>
 752:	82 30       	cpi	r24, 0x02	; 2
 754:	31 f0       	breq	.+12     	; 0x762 <_ZN8my_clock11change_maskEv+0x3e>
 756:	29 c0       	rjmp	.+82     	; 0x7aa <_ZN8my_clock11change_maskEv+0x86>
 758:	88 30       	cpi	r24, 0x08	; 8
 75a:	a9 f0       	breq	.+42     	; 0x786 <_ZN8my_clock11change_maskEv+0x62>
 75c:	80 31       	cpi	r24, 0x10	; 16
 75e:	e1 f0       	breq	.+56     	; 0x798 <_ZN8my_clock11change_maskEv+0x74>
 760:	24 c0       	rjmp	.+72     	; 0x7aa <_ZN8my_clock11change_maskEv+0x86>
		{
			case 0b00000010: {
				set7seg(c2);
 762:	f8 01       	movw	r30, r16
 764:	81 81       	ldd	r24, Z+1	; 0x01
 766:	0e 94 80 03 	call	0x700	; 0x700 <_Z7set7segh>
				mask = 0b00000100;
 76a:	84 e0       	ldi	r24, 0x04	; 4
 76c:	d8 01       	movw	r26, r16
 76e:	14 96       	adiw	r26, 0x04	; 4
 770:	8c 93       	st	X, r24
				break;
 772:	1e c0       	rjmp	.+60     	; 0x7b0 <_ZN8my_clock11change_maskEv+0x8c>
			}
			case 0b00000100:{
				set7seg(c3);
 774:	f8 01       	movw	r30, r16
 776:	82 81       	ldd	r24, Z+2	; 0x02
 778:	0e 94 80 03 	call	0x700	; 0x700 <_Z7set7segh>
				mask = 0b00001000;
 77c:	88 e0       	ldi	r24, 0x08	; 8
 77e:	d8 01       	movw	r26, r16
 780:	14 96       	adiw	r26, 0x04	; 4
 782:	8c 93       	st	X, r24
				break;
 784:	15 c0       	rjmp	.+42     	; 0x7b0 <_ZN8my_clock11change_maskEv+0x8c>
			}
			case 0b00001000:{
				set7seg(c4);
 786:	f8 01       	movw	r30, r16
 788:	83 81       	ldd	r24, Z+3	; 0x03
 78a:	0e 94 80 03 	call	0x700	; 0x700 <_Z7set7segh>
				mask = 0b00010000;
 78e:	80 e1       	ldi	r24, 0x10	; 16
 790:	d8 01       	movw	r26, r16
 792:	14 96       	adiw	r26, 0x04	; 4
 794:	8c 93       	st	X, r24
				break;
 796:	0c c0       	rjmp	.+24     	; 0x7b0 <_ZN8my_clock11change_maskEv+0x8c>
			}
			case 0b00010000:{
				set7seg(c1);
 798:	f8 01       	movw	r30, r16
 79a:	80 81       	ld	r24, Z
 79c:	0e 94 80 03 	call	0x700	; 0x700 <_Z7set7segh>
				mask = 0b00000010;
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	d8 01       	movw	r26, r16
 7a4:	14 96       	adiw	r26, 0x04	; 4
 7a6:	8c 93       	st	X, r24
				break;
 7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <_ZN8my_clock11change_maskEv+0x8c>
			}
			default:{
				mask = 0b00000010;
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	f8 01       	movw	r30, r16
 7ae:	84 83       	std	Z+4, r24	; 0x04
				break;
			}
		}
		set_port(PORTB,0b00011110,mask);
 7b0:	95 b1       	in	r25, 0x05	; 5
 7b2:	d8 01       	movw	r26, r16
 7b4:	14 96       	adiw	r26, 0x04	; 4
 7b6:	8c 91       	ld	r24, X
 7b8:	91 7e       	andi	r25, 0xE1	; 225
 7ba:	8e 71       	andi	r24, 0x1E	; 30
 7bc:	89 2b       	or	r24, r25
 7be:	85 b9       	out	0x05, r24	; 5
		scheduler::scheduler_r().conect_by_delta_clock(20,this,&my_clock::change_mask);
 7c0:	0f 2e       	mov	r0, r31
 7c2:	f2 e9       	ldi	r31, 0x92	; 146
 7c4:	cf 2e       	mov	r12, r31
 7c6:	f3 e0       	ldi	r31, 0x03	; 3
 7c8:	df 2e       	mov	r13, r31
 7ca:	f0 2d       	mov	r31, r0
 7cc:	e1 2c       	mov	r14, r1
 7ce:	f1 2c       	mov	r15, r1
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	inline static scheduler & scheduler_r(){
		static scheduler S;
 7d0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 7d4:	81 11       	cpse	r24, r1
 7d6:	16 c0       	rjmp	.+44     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7d8:	80 e3       	ldi	r24, 0x30	; 48
 7da:	91 e0       	ldi	r25, 0x01	; 1
 7dc:	0e 94 55 05 	call	0xaaa	; 0xaaa <__cxa_guard_acquire>
 7e0:	89 2b       	or	r24, r25
 7e2:	81 f0       	breq	.+32     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	void set_clock(const _data & dat){
		_clock = dat;
	}
	
	private:
	scheduler():_clock(0){}
 7e4:	e8 e3       	ldi	r30, 0x38	; 56
 7e6:	f1 e0       	ldi	r31, 0x01	; 1
 7e8:	10 82       	st	Z, r1
 7ea:	11 82       	std	Z+1, r1	; 0x01
 7ec:	12 82       	std	Z+2, r1	; 0x02
 7ee:	13 82       	std	Z+3, r1	; 0x03
 7f0:	14 82       	std	Z+4, r1	; 0x04
 7f2:	15 82       	std	Z+5, r1	; 0x05
 7f4:	16 82       	std	Z+6, r1	; 0x06
 7f6:	17 82       	std	Z+7, r1	; 0x07
template <typename T>
class list{
	list_data<T> *first;
	
	public:
	list():first(0){}
 7f8:	11 86       	std	Z+9, r1	; 0x09
 7fa:	10 86       	std	Z+8, r1	; 0x08
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	inline static scheduler & scheduler_r(){
		static scheduler S;
 7fc:	80 e3       	ldi	r24, 0x30	; 48
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	0e 94 5e 05 	call	0xabc	; 0xabc <__cxa_guard_release>

template <typename... Args>
struct DelegatorConstructor{
	template <typename T>
	static AbstractDelegator<Args...> * Construct(T * Reciever, typename ClassSlot<T,Args...>::TFunction Func){
		return new ClassSlot<T,Args...>(Reciever,Func);
 804:	88 e0       	ldi	r24, 0x08	; 8
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Znwj>
 80c:	fc 01       	movw	r30, r24
	TFunction Func;
	
	
	
	public:
	ClassSlot(T * Reciever,TFunction Func):Reciever(Reciever),Func(Func){}
 80e:	8e e1       	ldi	r24, 0x1E	; 30
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	91 83       	std	Z+1, r25	; 0x01
 814:	80 83       	st	Z, r24
 816:	13 83       	std	Z+3, r17	; 0x03
 818:	02 83       	std	Z+2, r16	; 0x02
 81a:	c4 82       	std	Z+4, r12	; 0x04
 81c:	d5 82       	std	Z+5, r13	; 0x05
 81e:	e6 82       	std	Z+6, r14	; 0x06
 820:	f7 82       	std	Z+7, r15	; 0x07
	
	
	
	template <typename...FunctionInfo>
	void conect_by_delta_clock(uint64_t delta_clock,FunctionInfo...fInfo){
		alarm_calls.push_back(_alarm(delta_clock+_clock,DelegatorConstructor<>::Construct(fInfo...)) );
 822:	08 e3       	ldi	r16, 0x38	; 56
 824:	11 e0       	ldi	r17, 0x01	; 1
 826:	d8 01       	movw	r26, r16
 828:	2c 91       	ld	r18, X
 82a:	11 96       	adiw	r26, 0x01	; 1
 82c:	3c 91       	ld	r19, X
 82e:	11 97       	sbiw	r26, 0x01	; 1
 830:	12 96       	adiw	r26, 0x02	; 2
 832:	4c 91       	ld	r20, X
 834:	12 97       	sbiw	r26, 0x02	; 2
 836:	13 96       	adiw	r26, 0x03	; 3
 838:	5c 91       	ld	r21, X
 83a:	13 97       	sbiw	r26, 0x03	; 3
 83c:	14 96       	adiw	r26, 0x04	; 4
 83e:	6c 91       	ld	r22, X
 840:	14 97       	sbiw	r26, 0x04	; 4
 842:	15 96       	adiw	r26, 0x05	; 5
 844:	7c 91       	ld	r23, X
 846:	15 97       	sbiw	r26, 0x05	; 5
 848:	16 96       	adiw	r26, 0x06	; 6
 84a:	8c 91       	ld	r24, X
 84c:	16 97       	sbiw	r26, 0x06	; 6
 84e:	17 96       	adiw	r26, 0x07	; 7
 850:	9c 91       	ld	r25, X
 852:	a4 e1       	ldi	r26, 0x14	; 20
 854:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__adddi3_s8>
	uint64_t _clock;
	
	struct _alarm{
		uint64_t alarm_clock;
		AbstractDelegator<> * Slot;
		_alarm(uint64_t alarm_clock,AbstractDelegator<> * Slot):alarm_clock(alarm_clock),Slot(Slot){}
 858:	2d 8b       	std	Y+21, r18	; 0x15
 85a:	3e 8b       	std	Y+22, r19	; 0x16
 85c:	4f 8b       	std	Y+23, r20	; 0x17
 85e:	58 8f       	std	Y+24, r21	; 0x18
 860:	69 8f       	std	Y+25, r22	; 0x19
 862:	7a 8f       	std	Y+26, r23	; 0x1a
 864:	8b 8f       	std	Y+27, r24	; 0x1b
 866:	9c 8f       	std	Y+28, r25	; 0x1c
 868:	fe 8f       	std	Y+30, r31	; 0x1e
 86a:	ed 8f       	std	Y+29, r30	; 0x1d
 86c:	8a e0       	ldi	r24, 0x0A	; 10
 86e:	fe 01       	movw	r30, r28
 870:	75 96       	adiw	r30, 0x15	; 21
 872:	de 01       	movw	r26, r28
 874:	d3 96       	adiw	r26, 0x33	; 51
 876:	01 90       	ld	r0, Z+
 878:	0d 92       	st	X+, r0
 87a:	8a 95       	dec	r24
 87c:	e1 f7       	brne	.-8      	; 0x876 <__DATA_REGION_LENGTH__+0x76>
	
	void push_back(T val){
		if(first){
 87e:	f8 01       	movw	r30, r16
 880:	00 85       	ldd	r16, Z+8	; 0x08
 882:	11 85       	ldd	r17, Z+9	; 0x09
 884:	01 15       	cp	r16, r1
 886:	11 05       	cpc	r17, r1
 888:	11 f4       	brne	.+4      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 88a:	2f c0       	rjmp	.+94     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
			auto it = first;
			for(;it->next != 0; it = it->next);
 88c:	8c 01       	movw	r16, r24
 88e:	d8 01       	movw	r26, r16
 890:	1a 96       	adiw	r26, 0x0a	; 10
 892:	8d 91       	ld	r24, X+
 894:	9c 91       	ld	r25, X
 896:	1b 97       	sbiw	r26, 0x0b	; 11
 898:	00 97       	sbiw	r24, 0x00	; 0
 89a:	c1 f7       	brne	.-16     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
			it->next = new list_data<T>(val);
 89c:	8a e0       	ldi	r24, 0x0A	; 10
 89e:	fe 01       	movw	r30, r28
 8a0:	f3 96       	adiw	r30, 0x33	; 51
 8a2:	de 01       	movw	r26, r28
 8a4:	11 96       	adiw	r26, 0x01	; 1
 8a6:	01 90       	ld	r0, Z+
 8a8:	0d 92       	st	X+, r0
 8aa:	8a 95       	dec	r24
 8ac:	e1 f7       	brne	.-8      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 8ae:	8c e0       	ldi	r24, 0x0C	; 12
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Znwj>
 8b6:	2a e0       	ldi	r18, 0x0A	; 10
 8b8:	fe 01       	movw	r30, r28
 8ba:	31 96       	adiw	r30, 0x01	; 1
 8bc:	de 01       	movw	r26, r28
 8be:	5f 96       	adiw	r26, 0x1f	; 31
 8c0:	01 90       	ld	r0, Z+
 8c2:	0d 92       	st	X+, r0
 8c4:	2a 95       	dec	r18
 8c6:	e1 f7       	brne	.-8      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>

template <typename T>
struct list_data{
	T data;
	struct list_data * next;
	list_data(T data,list_data * next = 0):data(data),next(next){}
 8c8:	2a e0       	ldi	r18, 0x0A	; 10
 8ca:	fe 01       	movw	r30, r28
 8cc:	7f 96       	adiw	r30, 0x1f	; 31
 8ce:	dc 01       	movw	r26, r24
 8d0:	01 90       	ld	r0, Z+
 8d2:	0d 92       	st	X+, r0
 8d4:	2a 95       	dec	r18
 8d6:	e1 f7       	brne	.-8      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8d8:	fc 01       	movw	r30, r24
 8da:	13 86       	std	Z+11, r1	; 0x0b
 8dc:	12 86       	std	Z+10, r1	; 0x0a
	
	void push_back(T val){
		if(first){
			auto it = first;
			for(;it->next != 0; it = it->next);
			it->next = new list_data<T>(val);
 8de:	d8 01       	movw	r26, r16
 8e0:	1b 96       	adiw	r26, 0x0b	; 11
 8e2:	9c 93       	st	X, r25
 8e4:	8e 93       	st	-X, r24
 8e6:	1a 97       	sbiw	r26, 0x0a	; 10
 8e8:	25 c0       	rjmp	.+74     	; 0x934 <__stack+0x35>
		}
		else{
			first = new list_data<T>(val);
 8ea:	8a e0       	ldi	r24, 0x0A	; 10
 8ec:	fe 01       	movw	r30, r28
 8ee:	f3 96       	adiw	r30, 0x33	; 51
 8f0:	de 01       	movw	r26, r28
 8f2:	1b 96       	adiw	r26, 0x0b	; 11
 8f4:	01 90       	ld	r0, Z+
 8f6:	0d 92       	st	X+, r0
 8f8:	8a 95       	dec	r24
 8fa:	e1 f7       	brne	.-8      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8fc:	8c e0       	ldi	r24, 0x0C	; 12
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Znwj>
 904:	2a e0       	ldi	r18, 0x0A	; 10
 906:	fe 01       	movw	r30, r28
 908:	3b 96       	adiw	r30, 0x0b	; 11
 90a:	de 01       	movw	r26, r28
 90c:	99 96       	adiw	r26, 0x29	; 41
 90e:	01 90       	ld	r0, Z+
 910:	0d 92       	st	X+, r0
 912:	2a 95       	dec	r18
 914:	e1 f7       	brne	.-8      	; 0x90e <__stack+0xf>

template <typename T>
struct list_data{
	T data;
	struct list_data * next;
	list_data(T data,list_data * next = 0):data(data),next(next){}
 916:	2a e0       	ldi	r18, 0x0A	; 10
 918:	fe 01       	movw	r30, r28
 91a:	b9 96       	adiw	r30, 0x29	; 41
 91c:	dc 01       	movw	r26, r24
 91e:	01 90       	ld	r0, Z+
 920:	0d 92       	st	X+, r0
 922:	2a 95       	dec	r18
 924:	e1 f7       	brne	.-8      	; 0x91e <__stack+0x1f>
 926:	fc 01       	movw	r30, r24
 928:	13 86       	std	Z+11, r1	; 0x0b
 92a:	12 86       	std	Z+10, r1	; 0x0a
			auto it = first;
			for(;it->next != 0; it = it->next);
			it->next = new list_data<T>(val);
		}
		else{
			first = new list_data<T>(val);
 92c:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <_ZZN9scheduler11scheduler_rEvE1S+0x9>
 930:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_ZZN9scheduler11scheduler_rEvE1S+0x8>
	}
 934:	ec 96       	adiw	r28, 0x3c	; 60
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	f8 94       	cli
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	cd bf       	out	0x3d, r28	; 61
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	1f 91       	pop	r17
 946:	0f 91       	pop	r16
 948:	ff 90       	pop	r15
 94a:	ef 90       	pop	r14
 94c:	df 90       	pop	r13
 94e:	cf 90       	pop	r12
 950:	08 95       	ret

00000952 <main>:
		change_mask();
	}
};

int main(void)
{
 952:	cf 93       	push	r28
 954:	df 93       	push	r29
 956:	cd b7       	in	r28, 0x3d	; 61
 958:	de b7       	in	r29, 0x3e	; 62
 95a:	2d 97       	sbiw	r28, 0x0d	; 13
 95c:	0f b6       	in	r0, 0x3f	; 63
 95e:	f8 94       	cli
 960:	de bf       	out	0x3e, r29	; 62
 962:	0f be       	out	0x3f, r0	; 63
 964:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	84 b9       	out	0x04, r24	; 4
	set_port(DDRD,0b11111100,0xFF);
 96a:	8a b1       	in	r24, 0x0a	; 10
 96c:	8c 6f       	ori	r24, 0xFC	; 252
 96e:	8a b9       	out	0x0a, r24	; 10
	sei();
 970:	78 94       	sei
		}
		set_port(PORTB,0b00011110,mask);
		scheduler::scheduler_r().conect_by_delta_clock(20,this,&my_clock::change_mask);
	}
	void init(){
		mask = 0b00000100;
 972:	84 e0       	ldi	r24, 0x04	; 4
 974:	8d 83       	std	Y+5, r24	; 0x05
		set_time();
 976:	ce 01       	movw	r24, r28
 978:	01 96       	adiw	r24, 0x01	; 1
 97a:	0e 94 90 00 	call	0x120	; 0x120 <_ZN8my_clock8set_timeEv>
		change_mask();
 97e:	ce 01       	movw	r24, r28
 980:	01 96       	adiw	r24, 0x01	; 1
 982:	0e 94 92 03 	call	0x724	; 0x724 <_ZN8my_clock11change_maskEv>
	DDRB = 0xFF;
	set_port(DDRD,0b11111100,0xFF);
	sei();
	my_clock clk;
	clk.init();
    scheduler::scheduler_r().init();
 986:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN9scheduler11scheduler_rEv>
		}
	};
	
	
	void init(){
		TCCR0B |= (1<<WGM12);
 98a:	85 b5       	in	r24, 0x25	; 37
 98c:	88 60       	ori	r24, 0x08	; 8
 98e:	85 bd       	out	0x25, r24	; 37
		TIMSK0 |= (1<<OCIE0A);
 990:	ee e6       	ldi	r30, 0x6E	; 110
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	82 60       	ori	r24, 0x02	; 2
 998:	80 83       	st	Z, r24
};

constexpr TimerParams bestTimerParams(uint32_t f_cpu,uint32_t f_target){
	struct TimerParams TP{255,3};
	
	uint16_t divs[4] = {1,8,64,256};
 99a:	88 e0       	ldi	r24, 0x08	; 8
 99c:	e6 e0       	ldi	r30, 0x06	; 6
 99e:	f1 e0       	ldi	r31, 0x01	; 1
 9a0:	de 01       	movw	r26, r28
 9a2:	16 96       	adiw	r26, 0x06	; 6
 9a4:	01 90       	ld	r0, Z+
 9a6:	0d 92       	st	X+, r0
 9a8:	8a 95       	dec	r24
 9aa:	e1 f7       	brne	.-8      	; 0x9a4 <main+0x52>
	uint8_t bcs = 1;
 9ac:	11 e0       	ldi	r17, 0x01	; 1
	
	for(;bcs < 5 && (f_cpu/(f_target*2*divs[bcs-1])) >= 255;++bcs);
 9ae:	15 30       	cpi	r17, 0x05	; 5
 9b0:	20 f5       	brcc	.+72     	; 0x9fa <main+0xa8>
 9b2:	e1 2f       	mov	r30, r17
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	31 97       	sbiw	r30, 0x01	; 1
 9b8:	ee 0f       	add	r30, r30
 9ba:	ff 1f       	adc	r31, r31
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	8c 0f       	add	r24, r28
 9c2:	9d 1f       	adc	r25, r29
 9c4:	e8 0f       	add	r30, r24
 9c6:	f9 1f       	adc	r31, r25
 9c8:	25 81       	ldd	r18, Z+5	; 0x05
 9ca:	36 81       	ldd	r19, Z+6	; 0x06
 9cc:	a8 ee       	ldi	r26, 0xE8	; 232
 9ce:	b3 e0       	ldi	r27, 0x03	; 3
 9d0:	0e 94 95 05 	call	0xb2a	; 0xb2a <__umulhisi3>
 9d4:	9b 01       	movw	r18, r22
 9d6:	ac 01       	movw	r20, r24
 9d8:	22 0f       	add	r18, r18
 9da:	33 1f       	adc	r19, r19
 9dc:	44 1f       	adc	r20, r20
 9de:	55 1f       	adc	r21, r21
 9e0:	60 e0       	ldi	r22, 0x00	; 0
 9e2:	74 e2       	ldi	r23, 0x24	; 36
 9e4:	84 ef       	ldi	r24, 0xF4	; 244
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	0e 94 73 05 	call	0xae6	; 0xae6 <__udivmodsi4>
 9ec:	2f 3f       	cpi	r18, 0xFF	; 255
 9ee:	31 05       	cpc	r19, r1
 9f0:	41 05       	cpc	r20, r1
 9f2:	51 05       	cpc	r21, r1
 9f4:	10 f0       	brcs	.+4      	; 0x9fa <main+0xa8>
 9f6:	1f 5f       	subi	r17, 0xFF	; 255
 9f8:	da cf       	rjmp	.-76     	; 0x9ae <main+0x5c>
	
	uint16_t bocra = f_cpu/(f_target*2*divs[bcs-1]) - 1;
 9fa:	e1 2f       	mov	r30, r17
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	31 97       	sbiw	r30, 0x01	; 1
 a00:	ee 0f       	add	r30, r30
 a02:	ff 1f       	adc	r31, r31
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	8c 0f       	add	r24, r28
 a0a:	9d 1f       	adc	r25, r29
 a0c:	e8 0f       	add	r30, r24
 a0e:	f9 1f       	adc	r31, r25
 a10:	25 81       	ldd	r18, Z+5	; 0x05
 a12:	36 81       	ldd	r19, Z+6	; 0x06
 a14:	a8 ee       	ldi	r26, 0xE8	; 232
 a16:	b3 e0       	ldi	r27, 0x03	; 3
 a18:	0e 94 95 05 	call	0xb2a	; 0xb2a <__umulhisi3>
 a1c:	2b 01       	movw	r4, r22
 a1e:	3c 01       	movw	r6, r24
 a20:	9b 01       	movw	r18, r22
 a22:	ac 01       	movw	r20, r24
 a24:	22 0f       	add	r18, r18
 a26:	33 1f       	adc	r19, r19
 a28:	44 1f       	adc	r20, r20
 a2a:	55 1f       	adc	r21, r21
 a2c:	0f 2e       	mov	r0, r31
 a2e:	81 2c       	mov	r8, r1
 a30:	f4 e2       	ldi	r31, 0x24	; 36
 a32:	9f 2e       	mov	r9, r31
 a34:	f4 ef       	ldi	r31, 0xF4	; 244
 a36:	af 2e       	mov	r10, r31
 a38:	b1 2c       	mov	r11, r1
 a3a:	f0 2d       	mov	r31, r0
 a3c:	c5 01       	movw	r24, r10
 a3e:	b4 01       	movw	r22, r8
 a40:	0e 94 73 05 	call	0xae6	; 0xae6 <__udivmodsi4>
 a44:	69 01       	movw	r12, r18
 a46:	7a 01       	movw	r14, r20
 a48:	02 2f       	mov	r16, r18
 a4a:	f9 01       	movw	r30, r18
 a4c:	31 97       	sbiw	r30, 0x01	; 1
	
	if(f_cpu - (f_target*2*divs[bcs-1])*(bocra + 1) > (f_target*2*divs[bcs-1])*(bocra + 2) - f_cpu){
 a4e:	44 27       	eor	r20, r20
 a50:	55 27       	eor	r21, r21
 a52:	c3 01       	movw	r24, r6
 a54:	b2 01       	movw	r22, r4
 a56:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsi3>
 a5a:	dc 01       	movw	r26, r24
 a5c:	cb 01       	movw	r24, r22
 a5e:	88 0f       	add	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	aa 1f       	adc	r26, r26
 a64:	bb 1f       	adc	r27, r27
 a66:	88 1a       	sub	r8, r24
 a68:	99 0a       	sbc	r9, r25
 a6a:	aa 0a       	sbc	r10, r26
 a6c:	bb 0a       	sbc	r11, r27
 a6e:	d6 01       	movw	r26, r12
 a70:	11 96       	adiw	r26, 0x01	; 1
 a72:	a3 01       	movw	r20, r6
 a74:	92 01       	movw	r18, r4
 a76:	0e 94 a4 05 	call	0xb48	; 0xb48 <__muluhisi3>
 a7a:	dc 01       	movw	r26, r24
 a7c:	cb 01       	movw	r24, r22
 a7e:	88 0f       	add	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	aa 1f       	adc	r26, r26
 a84:	bb 1f       	adc	r27, r27
 a86:	94 52       	subi	r25, 0x24	; 36
 a88:	a4 4f       	sbci	r26, 0xF4	; 244
 a8a:	b1 09       	sbc	r27, r1
 a8c:	88 15       	cp	r24, r8
 a8e:	99 05       	cpc	r25, r9
 a90:	aa 05       	cpc	r26, r10
 a92:	bb 05       	cpc	r27, r11
 a94:	08 f0       	brcs	.+2      	; 0xa98 <main+0x146>
	uint16_t divs[4] = {1,8,64,256};
	uint8_t bcs = 1;
	
	for(;bcs < 5 && (f_cpu/(f_target*2*divs[bcs-1])) >= 255;++bcs);
	
	uint16_t bocra = f_cpu/(f_target*2*divs[bcs-1]) - 1;
 a96:	0e 2f       	mov	r16, r30
	void init(){
		TCCR0B |= (1<<WGM12);
		TIMSK0 |= (1<<OCIE0A);
		
		TimerParams TP = bestTimerParams(F_CPU,1000);
		OCR0A = TP.OCRA; //124
 a98:	07 bd       	out	0x27, r16	; 39
		TCCR0B |= TP.CS; //3
 a9a:	85 b5       	in	r24, 0x25	; 37
 a9c:	18 2b       	or	r17, r24
 a9e:	15 bd       	out	0x25, r17	; 37
 aa0:	ff cf       	rjmp	.-2      	; 0xaa0 <main+0x14e>

00000aa2 <_Znwj>:
 aa2:	0c 94 23 06 	jmp	0xc46	; 0xc46 <malloc>

00000aa6 <_ZdlPvj>:
 aa6:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <free>

00000aaa <__cxa_guard_acquire>:
 aaa:	fc 01       	movw	r30, r24
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	20 81       	ld	r18, Z
 ab2:	22 23       	and	r18, r18
 ab4:	11 f0       	breq	.+4      	; 0xaba <__cxa_guard_acquire+0x10>
 ab6:	80 e0       	ldi	r24, 0x00	; 0
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	08 95       	ret

00000abc <__cxa_guard_release>:
 abc:	21 e0       	ldi	r18, 0x01	; 1
 abe:	fc 01       	movw	r30, r24
 ac0:	20 83       	st	Z, r18
 ac2:	08 95       	ret

00000ac4 <__cxa_pure_virtual>:
 ac4:	08 95       	ret

00000ac6 <__mulsi3>:
 ac6:	db 01       	movw	r26, r22
 ac8:	8f 93       	push	r24
 aca:	9f 93       	push	r25
 acc:	0e 94 a4 05 	call	0xb48	; 0xb48 <__muluhisi3>
 ad0:	bf 91       	pop	r27
 ad2:	af 91       	pop	r26
 ad4:	a2 9f       	mul	r26, r18
 ad6:	80 0d       	add	r24, r0
 ad8:	91 1d       	adc	r25, r1
 ada:	a3 9f       	mul	r26, r19
 adc:	90 0d       	add	r25, r0
 ade:	b2 9f       	mul	r27, r18
 ae0:	90 0d       	add	r25, r0
 ae2:	11 24       	eor	r1, r1
 ae4:	08 95       	ret

00000ae6 <__udivmodsi4>:
 ae6:	a1 e2       	ldi	r26, 0x21	; 33
 ae8:	1a 2e       	mov	r1, r26
 aea:	aa 1b       	sub	r26, r26
 aec:	bb 1b       	sub	r27, r27
 aee:	fd 01       	movw	r30, r26
 af0:	0d c0       	rjmp	.+26     	; 0xb0c <__udivmodsi4_ep>

00000af2 <__udivmodsi4_loop>:
 af2:	aa 1f       	adc	r26, r26
 af4:	bb 1f       	adc	r27, r27
 af6:	ee 1f       	adc	r30, r30
 af8:	ff 1f       	adc	r31, r31
 afa:	a2 17       	cp	r26, r18
 afc:	b3 07       	cpc	r27, r19
 afe:	e4 07       	cpc	r30, r20
 b00:	f5 07       	cpc	r31, r21
 b02:	20 f0       	brcs	.+8      	; 0xb0c <__udivmodsi4_ep>
 b04:	a2 1b       	sub	r26, r18
 b06:	b3 0b       	sbc	r27, r19
 b08:	e4 0b       	sbc	r30, r20
 b0a:	f5 0b       	sbc	r31, r21

00000b0c <__udivmodsi4_ep>:
 b0c:	66 1f       	adc	r22, r22
 b0e:	77 1f       	adc	r23, r23
 b10:	88 1f       	adc	r24, r24
 b12:	99 1f       	adc	r25, r25
 b14:	1a 94       	dec	r1
 b16:	69 f7       	brne	.-38     	; 0xaf2 <__udivmodsi4_loop>
 b18:	60 95       	com	r22
 b1a:	70 95       	com	r23
 b1c:	80 95       	com	r24
 b1e:	90 95       	com	r25
 b20:	9b 01       	movw	r18, r22
 b22:	ac 01       	movw	r20, r24
 b24:	bd 01       	movw	r22, r26
 b26:	cf 01       	movw	r24, r30
 b28:	08 95       	ret

00000b2a <__umulhisi3>:
 b2a:	a2 9f       	mul	r26, r18
 b2c:	b0 01       	movw	r22, r0
 b2e:	b3 9f       	mul	r27, r19
 b30:	c0 01       	movw	r24, r0
 b32:	a3 9f       	mul	r26, r19
 b34:	70 0d       	add	r23, r0
 b36:	81 1d       	adc	r24, r1
 b38:	11 24       	eor	r1, r1
 b3a:	91 1d       	adc	r25, r1
 b3c:	b2 9f       	mul	r27, r18
 b3e:	70 0d       	add	r23, r0
 b40:	81 1d       	adc	r24, r1
 b42:	11 24       	eor	r1, r1
 b44:	91 1d       	adc	r25, r1
 b46:	08 95       	ret

00000b48 <__muluhisi3>:
 b48:	0e 94 95 05 	call	0xb2a	; 0xb2a <__umulhisi3>
 b4c:	a5 9f       	mul	r26, r21
 b4e:	90 0d       	add	r25, r0
 b50:	b4 9f       	mul	r27, r20
 b52:	90 0d       	add	r25, r0
 b54:	a4 9f       	mul	r26, r20
 b56:	80 0d       	add	r24, r0
 b58:	91 1d       	adc	r25, r1
 b5a:	11 24       	eor	r1, r1
 b5c:	08 95       	ret

00000b5e <__umoddi3>:
 b5e:	68 94       	set
 b60:	01 c0       	rjmp	.+2      	; 0xb64 <__udivdi3_umoddi3>

00000b62 <__udivdi3>:
 b62:	e8 94       	clt

00000b64 <__udivdi3_umoddi3>:
 b64:	8f 92       	push	r8
 b66:	9f 92       	push	r9
 b68:	cf 93       	push	r28
 b6a:	df 93       	push	r29
 b6c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmod64>
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	9f 90       	pop	r9
 b76:	8f 90       	pop	r8
 b78:	08 95       	ret

00000b7a <__udivmod64>:
 b7a:	88 24       	eor	r8, r8
 b7c:	99 24       	eor	r9, r9
 b7e:	f4 01       	movw	r30, r8
 b80:	e4 01       	movw	r28, r8
 b82:	b0 e4       	ldi	r27, 0x40	; 64
 b84:	9f 93       	push	r25
 b86:	aa 27       	eor	r26, r26
 b88:	9a 15       	cp	r25, r10
 b8a:	8b 04       	cpc	r8, r11
 b8c:	9c 04       	cpc	r9, r12
 b8e:	ed 05       	cpc	r30, r13
 b90:	fe 05       	cpc	r31, r14
 b92:	cf 05       	cpc	r28, r15
 b94:	d0 07       	cpc	r29, r16
 b96:	a1 07       	cpc	r26, r17
 b98:	98 f4       	brcc	.+38     	; 0xbc0 <__udivmod64+0x46>
 b9a:	ad 2f       	mov	r26, r29
 b9c:	dc 2f       	mov	r29, r28
 b9e:	cf 2f       	mov	r28, r31
 ba0:	fe 2f       	mov	r31, r30
 ba2:	e9 2d       	mov	r30, r9
 ba4:	98 2c       	mov	r9, r8
 ba6:	89 2e       	mov	r8, r25
 ba8:	98 2f       	mov	r25, r24
 baa:	87 2f       	mov	r24, r23
 bac:	76 2f       	mov	r23, r22
 bae:	65 2f       	mov	r22, r21
 bb0:	54 2f       	mov	r21, r20
 bb2:	43 2f       	mov	r20, r19
 bb4:	32 2f       	mov	r19, r18
 bb6:	22 27       	eor	r18, r18
 bb8:	b8 50       	subi	r27, 0x08	; 8
 bba:	31 f7       	brne	.-52     	; 0xb88 <__udivmod64+0xe>
 bbc:	bf 91       	pop	r27
 bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__udivmod64+0x94>
 bc0:	1b 2e       	mov	r1, r27
 bc2:	bf 91       	pop	r27
 bc4:	bb 27       	eor	r27, r27
 bc6:	22 0f       	add	r18, r18
 bc8:	33 1f       	adc	r19, r19
 bca:	44 1f       	adc	r20, r20
 bcc:	55 1f       	adc	r21, r21
 bce:	66 1f       	adc	r22, r22
 bd0:	77 1f       	adc	r23, r23
 bd2:	88 1f       	adc	r24, r24
 bd4:	99 1f       	adc	r25, r25
 bd6:	88 1c       	adc	r8, r8
 bd8:	99 1c       	adc	r9, r9
 bda:	ee 1f       	adc	r30, r30
 bdc:	ff 1f       	adc	r31, r31
 bde:	cc 1f       	adc	r28, r28
 be0:	dd 1f       	adc	r29, r29
 be2:	aa 1f       	adc	r26, r26
 be4:	bb 1f       	adc	r27, r27
 be6:	8a 14       	cp	r8, r10
 be8:	9b 04       	cpc	r9, r11
 bea:	ec 05       	cpc	r30, r12
 bec:	fd 05       	cpc	r31, r13
 bee:	ce 05       	cpc	r28, r14
 bf0:	df 05       	cpc	r29, r15
 bf2:	a0 07       	cpc	r26, r16
 bf4:	b1 07       	cpc	r27, r17
 bf6:	48 f0       	brcs	.+18     	; 0xc0a <__udivmod64+0x90>
 bf8:	8a 18       	sub	r8, r10
 bfa:	9b 08       	sbc	r9, r11
 bfc:	ec 09       	sbc	r30, r12
 bfe:	fd 09       	sbc	r31, r13
 c00:	ce 09       	sbc	r28, r14
 c02:	df 09       	sbc	r29, r15
 c04:	a0 0b       	sbc	r26, r16
 c06:	b1 0b       	sbc	r27, r17
 c08:	21 60       	ori	r18, 0x01	; 1
 c0a:	1a 94       	dec	r1
 c0c:	e1 f6       	brne	.-72     	; 0xbc6 <__udivmod64+0x4c>
 c0e:	2e f4       	brtc	.+10     	; 0xc1a <__udivmod64+0xa0>
 c10:	94 01       	movw	r18, r8
 c12:	af 01       	movw	r20, r30
 c14:	be 01       	movw	r22, r28
 c16:	cd 01       	movw	r24, r26
 c18:	00 0c       	add	r0, r0
 c1a:	08 95       	ret

00000c1c <__adddi3_s8>:
 c1c:	00 24       	eor	r0, r0
 c1e:	a7 fd       	sbrc	r26, 7
 c20:	00 94       	com	r0
 c22:	2a 0f       	add	r18, r26
 c24:	30 1d       	adc	r19, r0
 c26:	40 1d       	adc	r20, r0
 c28:	50 1d       	adc	r21, r0
 c2a:	60 1d       	adc	r22, r0
 c2c:	70 1d       	adc	r23, r0
 c2e:	80 1d       	adc	r24, r0
 c30:	90 1d       	adc	r25, r0
 c32:	08 95       	ret

00000c34 <__cmpdi2>:
 c34:	2a 15       	cp	r18, r10
 c36:	3b 05       	cpc	r19, r11
 c38:	4c 05       	cpc	r20, r12
 c3a:	5d 05       	cpc	r21, r13
 c3c:	6e 05       	cpc	r22, r14
 c3e:	7f 05       	cpc	r23, r15
 c40:	80 07       	cpc	r24, r16
 c42:	91 07       	cpc	r25, r17
 c44:	08 95       	ret

00000c46 <malloc>:
 c46:	0f 93       	push	r16
 c48:	1f 93       	push	r17
 c4a:	cf 93       	push	r28
 c4c:	df 93       	push	r29
 c4e:	82 30       	cpi	r24, 0x02	; 2
 c50:	91 05       	cpc	r25, r1
 c52:	10 f4       	brcc	.+4      	; 0xc58 <malloc+0x12>
 c54:	82 e0       	ldi	r24, 0x02	; 2
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__flp>
 c5c:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <__flp+0x1>
 c60:	20 e0       	ldi	r18, 0x00	; 0
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	a0 e0       	ldi	r26, 0x00	; 0
 c66:	b0 e0       	ldi	r27, 0x00	; 0
 c68:	30 97       	sbiw	r30, 0x00	; 0
 c6a:	19 f1       	breq	.+70     	; 0xcb2 <malloc+0x6c>
 c6c:	40 81       	ld	r20, Z
 c6e:	51 81       	ldd	r21, Z+1	; 0x01
 c70:	02 81       	ldd	r16, Z+2	; 0x02
 c72:	13 81       	ldd	r17, Z+3	; 0x03
 c74:	48 17       	cp	r20, r24
 c76:	59 07       	cpc	r21, r25
 c78:	c8 f0       	brcs	.+50     	; 0xcac <malloc+0x66>
 c7a:	84 17       	cp	r24, r20
 c7c:	95 07       	cpc	r25, r21
 c7e:	69 f4       	brne	.+26     	; 0xc9a <malloc+0x54>
 c80:	10 97       	sbiw	r26, 0x00	; 0
 c82:	31 f0       	breq	.+12     	; 0xc90 <malloc+0x4a>
 c84:	12 96       	adiw	r26, 0x02	; 2
 c86:	0c 93       	st	X, r16
 c88:	12 97       	sbiw	r26, 0x02	; 2
 c8a:	13 96       	adiw	r26, 0x03	; 3
 c8c:	1c 93       	st	X, r17
 c8e:	27 c0       	rjmp	.+78     	; 0xcde <malloc+0x98>
 c90:	00 93 44 01 	sts	0x0144, r16	; 0x800144 <__flp>
 c94:	10 93 45 01 	sts	0x0145, r17	; 0x800145 <__flp+0x1>
 c98:	22 c0       	rjmp	.+68     	; 0xcde <malloc+0x98>
 c9a:	21 15       	cp	r18, r1
 c9c:	31 05       	cpc	r19, r1
 c9e:	19 f0       	breq	.+6      	; 0xca6 <malloc+0x60>
 ca0:	42 17       	cp	r20, r18
 ca2:	53 07       	cpc	r21, r19
 ca4:	18 f4       	brcc	.+6      	; 0xcac <malloc+0x66>
 ca6:	9a 01       	movw	r18, r20
 ca8:	bd 01       	movw	r22, r26
 caa:	ef 01       	movw	r28, r30
 cac:	df 01       	movw	r26, r30
 cae:	f8 01       	movw	r30, r16
 cb0:	db cf       	rjmp	.-74     	; 0xc68 <malloc+0x22>
 cb2:	21 15       	cp	r18, r1
 cb4:	31 05       	cpc	r19, r1
 cb6:	f9 f0       	breq	.+62     	; 0xcf6 <malloc+0xb0>
 cb8:	28 1b       	sub	r18, r24
 cba:	39 0b       	sbc	r19, r25
 cbc:	24 30       	cpi	r18, 0x04	; 4
 cbe:	31 05       	cpc	r19, r1
 cc0:	80 f4       	brcc	.+32     	; 0xce2 <malloc+0x9c>
 cc2:	8a 81       	ldd	r24, Y+2	; 0x02
 cc4:	9b 81       	ldd	r25, Y+3	; 0x03
 cc6:	61 15       	cp	r22, r1
 cc8:	71 05       	cpc	r23, r1
 cca:	21 f0       	breq	.+8      	; 0xcd4 <malloc+0x8e>
 ccc:	fb 01       	movw	r30, r22
 cce:	93 83       	std	Z+3, r25	; 0x03
 cd0:	82 83       	std	Z+2, r24	; 0x02
 cd2:	04 c0       	rjmp	.+8      	; 0xcdc <malloc+0x96>
 cd4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__flp+0x1>
 cd8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__flp>
 cdc:	fe 01       	movw	r30, r28
 cde:	32 96       	adiw	r30, 0x02	; 2
 ce0:	44 c0       	rjmp	.+136    	; 0xd6a <malloc+0x124>
 ce2:	fe 01       	movw	r30, r28
 ce4:	e2 0f       	add	r30, r18
 ce6:	f3 1f       	adc	r31, r19
 ce8:	81 93       	st	Z+, r24
 cea:	91 93       	st	Z+, r25
 cec:	22 50       	subi	r18, 0x02	; 2
 cee:	31 09       	sbc	r19, r1
 cf0:	39 83       	std	Y+1, r19	; 0x01
 cf2:	28 83       	st	Y, r18
 cf4:	3a c0       	rjmp	.+116    	; 0xd6a <malloc+0x124>
 cf6:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__brkval>
 cfa:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__brkval+0x1>
 cfe:	23 2b       	or	r18, r19
 d00:	41 f4       	brne	.+16     	; 0xd12 <malloc+0xcc>
 d02:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 d06:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 d0a:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__brkval+0x1>
 d0e:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__brkval>
 d12:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 d16:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d1a:	21 15       	cp	r18, r1
 d1c:	31 05       	cpc	r19, r1
 d1e:	41 f4       	brne	.+16     	; 0xd30 <malloc+0xea>
 d20:	2d b7       	in	r18, 0x3d	; 61
 d22:	3e b7       	in	r19, 0x3e	; 62
 d24:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 d28:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 d2c:	24 1b       	sub	r18, r20
 d2e:	35 0b       	sbc	r19, r21
 d30:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__brkval>
 d34:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__brkval+0x1>
 d38:	e2 17       	cp	r30, r18
 d3a:	f3 07       	cpc	r31, r19
 d3c:	a0 f4       	brcc	.+40     	; 0xd66 <malloc+0x120>
 d3e:	2e 1b       	sub	r18, r30
 d40:	3f 0b       	sbc	r19, r31
 d42:	28 17       	cp	r18, r24
 d44:	39 07       	cpc	r19, r25
 d46:	78 f0       	brcs	.+30     	; 0xd66 <malloc+0x120>
 d48:	ac 01       	movw	r20, r24
 d4a:	4e 5f       	subi	r20, 0xFE	; 254
 d4c:	5f 4f       	sbci	r21, 0xFF	; 255
 d4e:	24 17       	cp	r18, r20
 d50:	35 07       	cpc	r19, r21
 d52:	48 f0       	brcs	.+18     	; 0xd66 <malloc+0x120>
 d54:	4e 0f       	add	r20, r30
 d56:	5f 1f       	adc	r21, r31
 d58:	50 93 43 01 	sts	0x0143, r21	; 0x800143 <__brkval+0x1>
 d5c:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__brkval>
 d60:	81 93       	st	Z+, r24
 d62:	91 93       	st	Z+, r25
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <malloc+0x124>
 d66:	e0 e0       	ldi	r30, 0x00	; 0
 d68:	f0 e0       	ldi	r31, 0x00	; 0
 d6a:	cf 01       	movw	r24, r30
 d6c:	df 91       	pop	r29
 d6e:	cf 91       	pop	r28
 d70:	1f 91       	pop	r17
 d72:	0f 91       	pop	r16
 d74:	08 95       	ret

00000d76 <free>:
 d76:	cf 93       	push	r28
 d78:	df 93       	push	r29
 d7a:	00 97       	sbiw	r24, 0x00	; 0
 d7c:	09 f4       	brne	.+2      	; 0xd80 <free+0xa>
 d7e:	81 c0       	rjmp	.+258    	; 0xe82 <free+0x10c>
 d80:	fc 01       	movw	r30, r24
 d82:	32 97       	sbiw	r30, 0x02	; 2
 d84:	13 82       	std	Z+3, r1	; 0x03
 d86:	12 82       	std	Z+2, r1	; 0x02
 d88:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <__flp>
 d8c:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <__flp+0x1>
 d90:	10 97       	sbiw	r26, 0x00	; 0
 d92:	81 f4       	brne	.+32     	; 0xdb4 <free+0x3e>
 d94:	20 81       	ld	r18, Z
 d96:	31 81       	ldd	r19, Z+1	; 0x01
 d98:	82 0f       	add	r24, r18
 d9a:	93 1f       	adc	r25, r19
 d9c:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__brkval>
 da0:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__brkval+0x1>
 da4:	28 17       	cp	r18, r24
 da6:	39 07       	cpc	r19, r25
 da8:	51 f5       	brne	.+84     	; 0xdfe <free+0x88>
 daa:	f0 93 43 01 	sts	0x0143, r31	; 0x800143 <__brkval+0x1>
 dae:	e0 93 42 01 	sts	0x0142, r30	; 0x800142 <__brkval>
 db2:	67 c0       	rjmp	.+206    	; 0xe82 <free+0x10c>
 db4:	ed 01       	movw	r28, r26
 db6:	20 e0       	ldi	r18, 0x00	; 0
 db8:	30 e0       	ldi	r19, 0x00	; 0
 dba:	ce 17       	cp	r28, r30
 dbc:	df 07       	cpc	r29, r31
 dbe:	40 f4       	brcc	.+16     	; 0xdd0 <free+0x5a>
 dc0:	4a 81       	ldd	r20, Y+2	; 0x02
 dc2:	5b 81       	ldd	r21, Y+3	; 0x03
 dc4:	9e 01       	movw	r18, r28
 dc6:	41 15       	cp	r20, r1
 dc8:	51 05       	cpc	r21, r1
 dca:	f1 f0       	breq	.+60     	; 0xe08 <free+0x92>
 dcc:	ea 01       	movw	r28, r20
 dce:	f5 cf       	rjmp	.-22     	; 0xdba <free+0x44>
 dd0:	d3 83       	std	Z+3, r29	; 0x03
 dd2:	c2 83       	std	Z+2, r28	; 0x02
 dd4:	40 81       	ld	r20, Z
 dd6:	51 81       	ldd	r21, Z+1	; 0x01
 dd8:	84 0f       	add	r24, r20
 dda:	95 1f       	adc	r25, r21
 ddc:	c8 17       	cp	r28, r24
 dde:	d9 07       	cpc	r29, r25
 de0:	59 f4       	brne	.+22     	; 0xdf8 <free+0x82>
 de2:	88 81       	ld	r24, Y
 de4:	99 81       	ldd	r25, Y+1	; 0x01
 de6:	84 0f       	add	r24, r20
 de8:	95 1f       	adc	r25, r21
 dea:	02 96       	adiw	r24, 0x02	; 2
 dec:	91 83       	std	Z+1, r25	; 0x01
 dee:	80 83       	st	Z, r24
 df0:	8a 81       	ldd	r24, Y+2	; 0x02
 df2:	9b 81       	ldd	r25, Y+3	; 0x03
 df4:	93 83       	std	Z+3, r25	; 0x03
 df6:	82 83       	std	Z+2, r24	; 0x02
 df8:	21 15       	cp	r18, r1
 dfa:	31 05       	cpc	r19, r1
 dfc:	29 f4       	brne	.+10     	; 0xe08 <free+0x92>
 dfe:	f0 93 45 01 	sts	0x0145, r31	; 0x800145 <__flp+0x1>
 e02:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <__flp>
 e06:	3d c0       	rjmp	.+122    	; 0xe82 <free+0x10c>
 e08:	e9 01       	movw	r28, r18
 e0a:	fb 83       	std	Y+3, r31	; 0x03
 e0c:	ea 83       	std	Y+2, r30	; 0x02
 e0e:	49 91       	ld	r20, Y+
 e10:	59 91       	ld	r21, Y+
 e12:	c4 0f       	add	r28, r20
 e14:	d5 1f       	adc	r29, r21
 e16:	ec 17       	cp	r30, r28
 e18:	fd 07       	cpc	r31, r29
 e1a:	61 f4       	brne	.+24     	; 0xe34 <free+0xbe>
 e1c:	80 81       	ld	r24, Z
 e1e:	91 81       	ldd	r25, Z+1	; 0x01
 e20:	84 0f       	add	r24, r20
 e22:	95 1f       	adc	r25, r21
 e24:	02 96       	adiw	r24, 0x02	; 2
 e26:	e9 01       	movw	r28, r18
 e28:	99 83       	std	Y+1, r25	; 0x01
 e2a:	88 83       	st	Y, r24
 e2c:	82 81       	ldd	r24, Z+2	; 0x02
 e2e:	93 81       	ldd	r25, Z+3	; 0x03
 e30:	9b 83       	std	Y+3, r25	; 0x03
 e32:	8a 83       	std	Y+2, r24	; 0x02
 e34:	e0 e0       	ldi	r30, 0x00	; 0
 e36:	f0 e0       	ldi	r31, 0x00	; 0
 e38:	12 96       	adiw	r26, 0x02	; 2
 e3a:	8d 91       	ld	r24, X+
 e3c:	9c 91       	ld	r25, X
 e3e:	13 97       	sbiw	r26, 0x03	; 3
 e40:	00 97       	sbiw	r24, 0x00	; 0
 e42:	19 f0       	breq	.+6      	; 0xe4a <free+0xd4>
 e44:	fd 01       	movw	r30, r26
 e46:	dc 01       	movw	r26, r24
 e48:	f7 cf       	rjmp	.-18     	; 0xe38 <free+0xc2>
 e4a:	8d 91       	ld	r24, X+
 e4c:	9c 91       	ld	r25, X
 e4e:	11 97       	sbiw	r26, 0x01	; 1
 e50:	9d 01       	movw	r18, r26
 e52:	2e 5f       	subi	r18, 0xFE	; 254
 e54:	3f 4f       	sbci	r19, 0xFF	; 255
 e56:	82 0f       	add	r24, r18
 e58:	93 1f       	adc	r25, r19
 e5a:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__brkval>
 e5e:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__brkval+0x1>
 e62:	28 17       	cp	r18, r24
 e64:	39 07       	cpc	r19, r25
 e66:	69 f4       	brne	.+26     	; 0xe82 <free+0x10c>
 e68:	30 97       	sbiw	r30, 0x00	; 0
 e6a:	29 f4       	brne	.+10     	; 0xe76 <free+0x100>
 e6c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__flp+0x1>
 e70:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__flp>
 e74:	02 c0       	rjmp	.+4      	; 0xe7a <free+0x104>
 e76:	13 82       	std	Z+3, r1	; 0x03
 e78:	12 82       	std	Z+2, r1	; 0x02
 e7a:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <__brkval+0x1>
 e7e:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <__brkval>
 e82:	df 91       	pop	r29
 e84:	cf 91       	pop	r28
 e86:	08 95       	ret

00000e88 <_exit>:
 e88:	f8 94       	cli

00000e8a <__stop_program>:
 e8a:	ff cf       	rjmp	.-2      	; 0xe8a <__stop_program>
