
P013_TestTwi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000079  00800100  00800100  00000b54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002721  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a44  00000000  00000000  00003345  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8f  00000000  00000000  00003d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00004818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ea1  00000000  00000000  00004958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c6c  00000000  00000000  000057f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00006465  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
   8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
   c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  10:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  14:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  18:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  1c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  20:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  24:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  28:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  34:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  38:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  3c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  44:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  48:	0c 94 22 03 	jmp	0x644	; 0x644 <__vector_18>
  4c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_20>
  54:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  58:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  5c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  60:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  68:	95 01       	movw	r18, r10
  6a:	ca 01       	movw	r24, r20
  6c:	99 01       	movw	r18, r18
  6e:	ca 01       	movw	r24, r20
  70:	9e 01       	movw	r18, r28
  72:	ca 01       	movw	r24, r20
  74:	a3 01       	movw	r20, r6
  76:	ca 01       	movw	r24, r20
  78:	a8 01       	movw	r20, r16
  7a:	ca 01       	movw	r24, r20
  7c:	ad 01       	movw	r20, r26
  7e:	ca 01       	movw	r24, r20
  80:	b2 01       	movw	r22, r4
  82:	ca 01       	movw	r24, r20
  84:	b7 01       	movw	r22, r14
  86:	ca 01       	movw	r24, r20
  88:	bc 01       	movw	r22, r24
  8a:	ca 01       	movw	r24, r20
  8c:	c1 01       	movw	r24, r2
  8e:	ca 01       	movw	r24, r20
  90:	c6 01       	movw	r24, r12

00000092 <__ctors_start>:
  92:	04 04       	cpc	r0, r4

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a9 37       	cpi	r26, 0x79	; 121
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e0 ee       	ldi	r30, 0xE0	; 224
  b8:	fa e0       	ldi	r31, 0x0A	; 10
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	a0 30       	cpi	r26, 0x00	; 0
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_global_ctors>:
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	ca e4       	ldi	r28, 0x4A	; 74
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <__do_global_ctors+0x10>
  ce:	21 97       	sbiw	r28, 0x01	; 1
  d0:	fe 01       	movw	r30, r28
  d2:	0e 94 37 05 	call	0xa6e	; 0xa6e <__tablejump2__>
  d6:	c9 34       	cpi	r28, 0x49	; 73
  d8:	d1 07       	cpc	r29, r17
  da:	c9 f7       	brne	.-14     	; 0xce <__do_global_ctors+0x8>
  dc:	0e 94 2c 03 	call	0x658	; 0x658 <main>
  e0:	0c 94 6e 05 	jmp	0xadc	; 0xadc <_exit>

000000e4 <__bad_interrupt>:
  e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e8 <_Z41__static_initialization_and_destruction_0ii>:



char c_num(uint8_t x){
	return (x<10 ? x + '0' :x + 'A'-10);
}
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	b9 f4       	brne	.+46     	; 0x11a <_Z41__static_initialization_and_destruction_0ii+0x32>
  ec:	6f 3f       	cpi	r22, 0xFF	; 255
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	a1 f4       	brne	.+40     	; 0x11a <_Z41__static_initialization_and_destruction_0ii+0x32>
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	81 11       	cpse	r24, r1
  f8:	10 c0       	rjmp	.+32     	; 0x11a <_Z41__static_initialization_and_destruction_0ii+0x32>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 0b 05 	call	0xa16	; 0xa16 <__cxa_guard_acquire>
 102:	89 2b       	or	r24, r25
 104:	51 f0       	breq	.+20     	; 0x11a <_Z41__static_initialization_and_destruction_0ii+0x32>
 106:	e8 e0       	ldi	r30, 0x08	; 8
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	80 83       	st	Z, r24
 10e:	88 e0       	ldi	r24, 0x08	; 8
 110:	81 83       	std	Z+1, r24	; 0x01
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 14 05 	call	0xa28	; 0xa28 <__cxa_guard_release>
 11a:	08 95       	ret

0000011c <_ZN4uart14uart_process_rEv>:
 11c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZGVZN4uart14uart_process_rEvE1U>
 120:	81 11       	cpse	r24, r1
 122:	10 c0       	rjmp	.+32     	; 0x144 <_ZN4uart14uart_process_rEv+0x28>
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 0b 05 	call	0xa16	; 0xa16 <__cxa_guard_acquire>
 12c:	89 2b       	or	r24, r25
 12e:	51 f0       	breq	.+20     	; 0x144 <_ZN4uart14uart_process_rEv+0x28>
 130:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <_ZZN4uart14uart_process_rEvE1U+0x64>
 134:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
 138:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <_ZZN4uart14uart_process_rEvE1U+0x66>
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 14 05 	call	0xa28	; 0xa28 <__cxa_guard_release>
 144:	82 e1       	ldi	r24, 0x12	; 18
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	08 95       	ret

0000014a <__vector_20>:
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
 16c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZGVZN4uart14uart_process_rEvE1U>
 170:	81 11       	cpse	r24, r1
 172:	10 c0       	rjmp	.+32     	; 0x194 <__vector_20+0x4a>
 174:	8a e0       	ldi	r24, 0x0A	; 10
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 0b 05 	call	0xa16	; 0xa16 <__cxa_guard_acquire>
 17c:	89 2b       	or	r24, r25
 17e:	51 f0       	breq	.+20     	; 0x194 <__vector_20+0x4a>
 180:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <_ZZN4uart14uart_process_rEvE1U+0x64>
 184:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
 188:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <_ZZN4uart14uart_process_rEvE1U+0x66>
 18c:	8a e0       	ldi	r24, 0x0A	; 10
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 14 05 	call	0xa28	; 0xa28 <__cxa_guard_release>
 194:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
 198:	81 11       	cpse	r24, r1
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <__vector_20+0x58>
 19c:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <_ZZN4uart14uart_process_rEvE1U+0x66>
 1a0:	15 c0       	rjmp	.+42     	; 0x1cc <__vector_20+0x82>
 1a2:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <_ZZN4uart14uart_process_rEvE1U+0x66>
 1a6:	99 23       	and	r25, r25
 1a8:	89 f0       	breq	.+34     	; 0x1cc <__vector_20+0x82>
 1aa:	88 23       	and	r24, r24
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <__vector_20+0x6a>
 1ae:	81 50       	subi	r24, 0x01	; 1
 1b0:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
 1b4:	a6 e7       	ldi	r26, 0x76	; 118
 1b6:	b1 e0       	ldi	r27, 0x01	; 1
 1b8:	ec 91       	ld	r30, X
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	8e 0f       	add	r24, r30
 1be:	8c 93       	st	X, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	ee 5e       	subi	r30, 0xEE	; 238
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	80 81       	ld	r24, Z
 1c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <_ZN6bmp18019readCalibrationDataEv>:
	
	public:	
	
	bmp180(i2c_hardware *m_i2c):m_i2c(m_i2c){}
	
	uint8_t readCalibrationData() {
 1ee:	dc 01       	movw	r26, r24
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
	}
	
	void start() {
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 1f0:	94 ea       	ldi	r25, 0xA4	; 164
 1f2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 1f6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fa:	99 23       	and	r25, r25
 1fc:	e4 f7       	brge	.-8      	; 0x1f6 <_ZN6bmp18019readCalibrationDataEv+0x8>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 1fe:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		m_i2c->start();

		if (m_i2c->getStatus() != I2C_STATUS_START_TRANSMITTED) {
 202:	98 30       	cpi	r25, 0x08	; 8
 204:	19 f0       	breq	.+6      	; 0x20c <_ZN6bmp18019readCalibrationDataEv+0x1e>
 206:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 20a:	08 95       	ret
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
		while ((TWCR & (1 << TWSTO)));
	}
	
	void sendData(uint8_t data) {
		TWDR = data;
 20c:	8e ee       	ldi	r24, 0xEE	; 238
 20e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEN);
 212:	84 e8       	ldi	r24, 0x84	; 132
 214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 218:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21c:	99 23       	and	r25, r25
 21e:	e4 f7       	brge	.-8      	; 0x218 <_ZN6bmp18019readCalibrationDataEv+0x2a>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 220:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->sendSlaveAddress(BMP180_ADDRESS, I2C_WRITE);
		if (m_i2c->getStatus() != I2C_STATUS_ADDRESS_WRITE_ACK_RECEIVED) {
 224:	88 31       	cpi	r24, 0x18	; 24
 226:	19 f0       	breq	.+6      	; 0x22e <_ZN6bmp18019readCalibrationDataEv+0x40>
 228:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 22c:	08 95       	ret
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
		while ((TWCR & (1 << TWSTO)));
	}
	
	void sendData(uint8_t data) {
		TWDR = data;
 22e:	8a ea       	ldi	r24, 0xAA	; 170
 230:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEN);
 234:	84 e8       	ldi	r24, 0x84	; 132
 236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 23a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23e:	99 23       	and	r25, r25
 240:	e4 f7       	brge	.-8      	; 0x23a <_ZN6bmp18019readCalibrationDataEv+0x4c>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 242:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->sendData(0xAA);
		if (m_i2c->getStatus() != I2C_STATUS_DATA_WRITE_ACK_RECEIVED) {
 246:	88 32       	cpi	r24, 0x28	; 40
 248:	19 f0       	breq	.+6      	; 0x250 <_ZN6bmp18019readCalibrationDataEv+0x62>
 24a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 24e:	08 95       	ret
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
		wait();
	}
	
	void stop() {
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 250:	84 e9       	ldi	r24, 0x94	; 148
 252:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while ((TWCR & (1 << TWSTO)));
 256:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 25a:	94 fd       	sbrc	r25, 4
 25c:	fc cf       	rjmp	.-8      	; 0x256 <_ZN6bmp18019readCalibrationDataEv+0x68>
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
	}
	
	void start() {
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 25e:	84 ea       	ldi	r24, 0xA4	; 164
 260:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 264:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 268:	99 23       	and	r25, r25
 26a:	e4 f7       	brge	.-8      	; 0x264 <_ZN6bmp18019readCalibrationDataEv+0x76>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 26c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->stop();

		m_i2c->start();
		if (m_i2c->getStatus() != I2C_STATUS_START_TRANSMITTED) {
 270:	88 30       	cpi	r24, 0x08	; 8
 272:	19 f0       	breq	.+6      	; 0x27a <_ZN6bmp18019readCalibrationDataEv+0x8c>
 274:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 278:	08 95       	ret
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
		while ((TWCR & (1 << TWSTO)));
	}
	
	void sendData(uint8_t data) {
		TWDR = data;
 27a:	8f ee       	ldi	r24, 0xEF	; 239
 27c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEN);
 280:	84 e8       	ldi	r24, 0x84	; 132
 282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 286:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 28a:	88 23       	and	r24, r24
 28c:	e4 f7       	brge	.-8      	; 0x286 <_ZN6bmp18019readCalibrationDataEv+0x98>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 28e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->sendSlaveAddress(BMP180_ADDRESS, I2C_READ);
		if (m_i2c->getStatus() != I2C_STATUS_ADDRESS_READ_ACK_SENT) {
 292:	80 34       	cpi	r24, 0x40	; 64
 294:	19 f0       	breq	.+6      	; 0x29c <_ZN6bmp18019readCalibrationDataEv+0xae>
 296:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 29a:	08 95       	ret
 29c:	2a ea       	ldi	r18, 0xAA	; 170
 29e:	30 e0       	ldi	r19, 0x00	; 0
		}

		for (int reg = 0xAA; reg <= 0xBE; reg += 2) {
 2a0:	2f 3b       	cpi	r18, 0xBF	; 191
 2a2:	31 05       	cpc	r19, r1
 2a4:	0c f0       	brlt	.+2      	; 0x2a8 <_ZN6bmp18019readCalibrationDataEv+0xba>
 2a6:	79 c0       	rjmp	.+242    	; 0x39a <_ZN6bmp18019readCalibrationDataEv+0x1ac>
		TWCR = (1 << TWINT) | (1 << TWEN);
		wait();
	}	
	
	uint8_t readDataAck() {
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 2a8:	84 ec       	ldi	r24, 0xC4	; 196
 2aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 2ae:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b2:	99 23       	and	r25, r25
 2b4:	e4 f7       	brge	.-8      	; 0x2ae <_ZN6bmp18019readCalibrationDataEv+0xc0>
	}	
	
	uint8_t readDataAck() {
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
		wait();
		return TWDR;
 2b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 2ba:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			uint16_t bits = 0;
			uint8_t msb = m_i2c->readDataAck();
			if (m_i2c->getStatus() != I2C_STATUS_DATA_READ_ACK_SENT) {
 2be:	90 35       	cpi	r25, 0x50	; 80
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <_ZN6bmp18019readCalibrationDataEv+0xda>
 2c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
				return m_i2c->getStatus();
 2c6:	08 95       	ret
			}

			uint8_t lsb;
			if (reg == 0xBE) {
 2c8:	2e 3b       	cpi	r18, 0xBE	; 190
 2ca:	31 05       	cpc	r19, r1
 2cc:	81 f4       	brne	.+32     	; 0x2ee <_ZN6bmp18019readCalibrationDataEv+0x100>
		wait();
		return TWDR;
	}
	
	uint8_t readDataNotAck() {
		TWCR = (1 << TWINT) | (1 << TWEN);
 2ce:	94 e8       	ldi	r25, 0x84	; 132
 2d0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 2d4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d8:	99 23       	and	r25, r25
 2da:	e4 f7       	brge	.-8      	; 0x2d4 <_ZN6bmp18019readCalibrationDataEv+0xe6>
	}
	
	uint8_t readDataNotAck() {
		TWCR = (1 << TWINT) | (1 << TWEN);
		wait();
		return TWDR;
 2dc:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 2e0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
				lsb = m_i2c->readDataNotAck();
				if (m_i2c->getStatus() != I2C_STATUS_DATA_READ_ACK_NOT_SENT) {
 2e4:	98 35       	cpi	r25, 0x58	; 88
 2e6:	99 f0       	breq	.+38     	; 0x30e <_ZN6bmp18019readCalibrationDataEv+0x120>
 2e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
					return m_i2c->getStatus();
 2ec:	08 95       	ret
		TWCR = (1 << TWINT) | (1 << TWEN);
		wait();
	}	
	
	uint8_t readDataAck() {
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 2ee:	94 ec       	ldi	r25, 0xC4	; 196
 2f0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 2f4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2f8:	99 23       	and	r25, r25
 2fa:	e4 f7       	brge	.-8      	; 0x2f4 <_ZN6bmp18019readCalibrationDataEv+0x106>
	}	
	
	uint8_t readDataAck() {
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
		wait();
		return TWDR;
 2fc:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 300:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
				}
			} 
			else {
				lsb = m_i2c->readDataAck();
				if (m_i2c->getStatus() != I2C_STATUS_DATA_READ_ACK_SENT) {
 304:	90 35       	cpi	r25, 0x50	; 80
 306:	19 f0       	breq	.+6      	; 0x30e <_ZN6bmp18019readCalibrationDataEv+0x120>
 308:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
					return m_i2c->getStatus();
 30c:	08 95       	ret
				}	
			}

			bits |= (msb << 8) | lsb;
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	98 2f       	mov	r25, r24
 312:	88 27       	eor	r24, r24
 314:	84 2b       	or	r24, r20

			switch (reg) {
 316:	f9 01       	movw	r30, r18
 318:	ea 5a       	subi	r30, 0xAA	; 170
 31a:	f1 09       	sbc	r31, r1
 31c:	e5 31       	cpi	r30, 0x15	; 21
 31e:	f1 05       	cpc	r31, r1
 320:	c8 f5       	brcc	.+114    	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
 322:	ec 5c       	subi	r30, 0xCC	; 204
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__tablejump2__>
				case 0xAA:
				m_calibration.ac1 = bits;
 32a:	11 96       	adiw	r26, 0x01	; 1
 32c:	9c 93       	st	X, r25
 32e:	8e 93       	st	-X, r24
				break;
 330:	31 c0       	rjmp	.+98     	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
				case 0xAC:
				m_calibration.ac2 = bits;
 332:	13 96       	adiw	r26, 0x03	; 3
 334:	9c 93       	st	X, r25
 336:	8e 93       	st	-X, r24
 338:	12 97       	sbiw	r26, 0x02	; 2
				break;
 33a:	2c c0       	rjmp	.+88     	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
				case 0xAE:
				m_calibration.ac3 = bits;
 33c:	15 96       	adiw	r26, 0x05	; 5
 33e:	9c 93       	st	X, r25
 340:	8e 93       	st	-X, r24
 342:	14 97       	sbiw	r26, 0x04	; 4
				break;
 344:	27 c0       	rjmp	.+78     	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
				case 0xB0:
				m_calibration.ac4 = bits;
 346:	17 96       	adiw	r26, 0x07	; 7
 348:	9c 93       	st	X, r25
 34a:	8e 93       	st	-X, r24
 34c:	16 97       	sbiw	r26, 0x06	; 6
				break;
 34e:	22 c0       	rjmp	.+68     	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
				case 0xB2:
				m_calibration.ac5 = bits;
 350:	19 96       	adiw	r26, 0x09	; 9
 352:	9c 93       	st	X, r25
 354:	8e 93       	st	-X, r24
 356:	18 97       	sbiw	r26, 0x08	; 8
				break;
 358:	1d c0       	rjmp	.+58     	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
				case 0xB4:
				m_calibration.ac6 = bits;
 35a:	1b 96       	adiw	r26, 0x0b	; 11
 35c:	9c 93       	st	X, r25
 35e:	8e 93       	st	-X, r24
 360:	1a 97       	sbiw	r26, 0x0a	; 10
				break;
 362:	18 c0       	rjmp	.+48     	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
				case 0xB6:
				m_calibration.b1 = bits;
 364:	1d 96       	adiw	r26, 0x0d	; 13
 366:	9c 93       	st	X, r25
 368:	8e 93       	st	-X, r24
 36a:	1c 97       	sbiw	r26, 0x0c	; 12
				break;
 36c:	13 c0       	rjmp	.+38     	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
				case 0xB8:
				m_calibration.b2 = bits;
 36e:	1f 96       	adiw	r26, 0x0f	; 15
 370:	9c 93       	st	X, r25
 372:	8e 93       	st	-X, r24
 374:	1e 97       	sbiw	r26, 0x0e	; 14
				break;
 376:	0e c0       	rjmp	.+28     	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
				case 0xBA:
				m_calibration.mb = bits;
 378:	51 96       	adiw	r26, 0x11	; 17
 37a:	9c 93       	st	X, r25
 37c:	8e 93       	st	-X, r24
 37e:	50 97       	sbiw	r26, 0x10	; 16
				break;
 380:	09 c0       	rjmp	.+18     	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
				case 0xBC:
				m_calibration.mc = bits;
 382:	53 96       	adiw	r26, 0x13	; 19
 384:	9c 93       	st	X, r25
 386:	8e 93       	st	-X, r24
 388:	52 97       	sbiw	r26, 0x12	; 18
				break;
 38a:	04 c0       	rjmp	.+8      	; 0x394 <_ZN6bmp18019readCalibrationDataEv+0x1a6>
				case 0xBE:
				m_calibration.md = bits;
 38c:	55 96       	adiw	r26, 0x15	; 21
 38e:	9c 93       	st	X, r25
 390:	8e 93       	st	-X, r24
 392:	54 97       	sbiw	r26, 0x14	; 20
		m_i2c->sendSlaveAddress(BMP180_ADDRESS, I2C_READ);
		if (m_i2c->getStatus() != I2C_STATUS_ADDRESS_READ_ACK_SENT) {
			return m_i2c->getStatus();
		}

		for (int reg = 0xAA; reg <= 0xBE; reg += 2) {
 394:	2e 5f       	subi	r18, 0xFE	; 254
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	83 cf       	rjmp	.-250    	; 0x2a0 <_ZN6bmp18019readCalibrationDataEv+0xb2>
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
		wait();
	}
	
	void stop() {
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 39a:	84 e9       	ldi	r24, 0x94	; 148
 39c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while ((TWCR & (1 << TWSTO)));
 3a0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a4:	89 2f       	mov	r24, r25
 3a6:	80 71       	andi	r24, 0x10	; 16
 3a8:	94 fd       	sbrc	r25, 4
 3aa:	fa cf       	rjmp	.-12     	; 0x3a0 <_ZN6bmp18019readCalibrationDataEv+0x1b2>
		}

		m_i2c->stop();

		return BMP180_OK;
	}	
 3ac:	08 95       	ret

000003ae <_ZN6bmp18017updateTemperatureEv>:
	uint8_t updateTemperature() {
 3ae:	8f 92       	push	r8
 3b0:	9f 92       	push	r9
 3b2:	af 92       	push	r10
 3b4:	bf 92       	push	r11
 3b6:	cf 92       	push	r12
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	9c 01       	movw	r18, r24
	i2c_hardware(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
 3c6:	90 e2       	ldi	r25, 0x20	; 32
 3c8:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
		TWSR |= mTWPS & 0x00000011;
 3cc:	e9 eb       	ldi	r30, 0xB9	; 185
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	90 81       	ld	r25, Z
 3d2:	90 83       	st	Z, r25
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
	}
	
	void start() {
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 3d4:	94 ea       	ldi	r25, 0xA4	; 164
 3d6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 3da:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3de:	99 23       	and	r25, r25
 3e0:	e4 f7       	brge	.-8      	; 0x3da <_ZN6bmp18017updateTemperatureEv+0x2c>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 3e2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		
		
		m_i2c->init();
		m_i2c->start();

		if (m_i2c->getStatus() != I2C_STATUS_START_TRANSMITTED) {
 3e6:	98 30       	cpi	r25, 0x08	; 8
 3e8:	19 f0       	breq	.+6      	; 0x3f0 <_ZN6bmp18017updateTemperatureEv+0x42>
 3ea:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 3ee:	1d c1       	rjmp	.+570    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
		while ((TWCR & (1 << TWSTO)));
	}
	
	void sendData(uint8_t data) {
		TWDR = data;
 3f0:	8e ee       	ldi	r24, 0xEE	; 238
 3f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEN);
 3f6:	84 e8       	ldi	r24, 0x84	; 132
 3f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 3fc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 400:	99 23       	and	r25, r25
 402:	e4 f7       	brge	.-8      	; 0x3fc <_ZN6bmp18017updateTemperatureEv+0x4e>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 404:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->sendSlaveAddress(BMP180_ADDRESS, I2C_WRITE);
		if (m_i2c->getStatus() != I2C_STATUS_ADDRESS_WRITE_ACK_RECEIVED) {
 408:	88 31       	cpi	r24, 0x18	; 24
 40a:	19 f0       	breq	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40c:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 410:	0c c1       	rjmp	.+536    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
		while ((TWCR & (1 << TWSTO)));
	}
	
	void sendData(uint8_t data) {
		TWDR = data;
 412:	84 ef       	ldi	r24, 0xF4	; 244
 414:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEN);
 418:	84 e8       	ldi	r24, 0x84	; 132
 41a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 41e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 422:	99 23       	and	r25, r25
 424:	e4 f7       	brge	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 426:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->sendData(0xF4);
		if (m_i2c->getStatus() != I2C_STATUS_DATA_WRITE_ACK_RECEIVED) {
 42a:	88 32       	cpi	r24, 0x28	; 40
 42c:	19 f0       	breq	.+6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42e:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 432:	fb c0       	rjmp	.+502    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
		while ((TWCR & (1 << TWSTO)));
	}
	
	void sendData(uint8_t data) {
		TWDR = data;
 434:	8e e2       	ldi	r24, 0x2E	; 46
 436:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEN);
 43a:	84 e8       	ldi	r24, 0x84	; 132
 43c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 440:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 444:	99 23       	and	r25, r25
 446:	e4 f7       	brge	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 448:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->sendData(0x2E);
		if (m_i2c->getStatus() != I2C_STATUS_DATA_WRITE_ACK_RECEIVED) {
 44c:	88 32       	cpi	r24, 0x28	; 40
 44e:	19 f0       	breq	.+6      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 450:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 454:	ea c0       	rjmp	.+468    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
		wait();
	}
	
	void stop() {
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 456:	84 e9       	ldi	r24, 0x94	; 148
 458:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while ((TWCR & (1 << TWSTO)));
 45c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 460:	84 fd       	sbrc	r24, 4
 462:	fc cf       	rjmp	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 464:	8f e4       	ldi	r24, 0x4F	; 79
 466:	96 e4       	ldi	r25, 0x46	; 70
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46e:	00 00       	nop
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
	}
	
	void start() {
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 470:	84 ea       	ldi	r24, 0xA4	; 164
 472:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 476:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 47a:	88 23       	and	r24, r24
 47c:	e4 f7       	brge	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 47e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		m_i2c->stop();
		_delay_us(4500);

		m_i2c->start();
		if (m_i2c->getStatus() != I2C_STATUS_START_TRANSMITTED) {
 482:	88 30       	cpi	r24, 0x08	; 8
 484:	19 f0       	breq	.+6      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 486:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 48a:	cf c0       	rjmp	.+414    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
		while ((TWCR & (1 << TWSTO)));
	}
	
	void sendData(uint8_t data) {
		TWDR = data;
 48c:	8e ee       	ldi	r24, 0xEE	; 238
 48e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEN);
 492:	84 e8       	ldi	r24, 0x84	; 132
 494:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 498:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 49c:	88 23       	and	r24, r24
 49e:	e4 f7       	brge	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 4a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->sendSlaveAddress(BMP180_ADDRESS, I2C_WRITE);
		if (m_i2c->getStatus() != I2C_STATUS_ADDRESS_WRITE_ACK_RECEIVED) {
 4a4:	88 31       	cpi	r24, 0x18	; 24
 4a6:	19 f0       	breq	.+6      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4a8:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 4ac:	be c0       	rjmp	.+380    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
		while ((TWCR & (1 << TWSTO)));
	}
	
	void sendData(uint8_t data) {
		TWDR = data;
 4ae:	86 ef       	ldi	r24, 0xF6	; 246
 4b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEN);
 4b4:	84 e8       	ldi	r24, 0x84	; 132
 4b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 4ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4be:	88 23       	and	r24, r24
 4c0:	e4 f7       	brge	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 4c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->sendData(0xF6);
		if (m_i2c->getStatus() != I2C_STATUS_DATA_WRITE_ACK_RECEIVED) {
 4c6:	88 32       	cpi	r24, 0x28	; 40
 4c8:	19 f0       	breq	.+6      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ca:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 4ce:	ad c0       	rjmp	.+346    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
		wait();
	}
	
	void stop() {
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 4d0:	84 e9       	ldi	r24, 0x94	; 148
 4d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while ((TWCR & (1 << TWSTO)));
 4d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4da:	84 fd       	sbrc	r24, 4
 4dc:	fc cf       	rjmp	.-8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
	}
	
	void start() {
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 4de:	84 ea       	ldi	r24, 0xA4	; 164
 4e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 4e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4e8:	88 23       	and	r24, r24
 4ea:	e4 f7       	brge	.-8      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 4ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->stop();
		m_i2c->start();
		if (m_i2c->getStatus() != I2C_STATUS_START_TRANSMITTED) {
 4f0:	88 30       	cpi	r24, 0x08	; 8
 4f2:	19 f0       	breq	.+6      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f4:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 4f8:	98 c0       	rjmp	.+304    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
		while ((TWCR & (1 << TWSTO)));
	}
	
	void sendData(uint8_t data) {
		TWDR = data;
 4fa:	8f ee       	ldi	r24, 0xEF	; 239
 4fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEN);
 500:	84 e8       	ldi	r24, 0x84	; 132
 502:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 506:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 50a:	88 23       	and	r24, r24
 50c:	e4 f7       	brge	.-8      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 50e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		m_i2c->sendSlaveAddress(BMP180_ADDRESS, I2C_READ);
		if (m_i2c->getStatus() != I2C_STATUS_ADDRESS_READ_ACK_SENT) {
 512:	80 34       	cpi	r24, 0x40	; 64
 514:	19 f0       	breq	.+6      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 516:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 51a:	87 c0       	rjmp	.+270    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		TWCR = (1 << TWINT) | (1 << TWEN);
		wait();
	}	
	
	uint8_t readDataAck() {
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 51c:	84 ec       	ldi	r24, 0xC4	; 196
 51e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 522:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 526:	88 23       	and	r24, r24
 528:	e4 f7       	brge	.-8      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
	}	
	
	uint8_t readDataAck() {
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
		wait();
		return TWDR;
 52a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 52e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		uint8_t msb = m_i2c->readDataAck();
		if (m_i2c->getStatus() != I2C_STATUS_DATA_READ_ACK_SENT) {
 532:	90 35       	cpi	r25, 0x50	; 80
 534:	19 f0       	breq	.+6      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 536:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 53a:	77 c0       	rjmp	.+238    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		wait();
		return TWDR;
	}
	
	uint8_t readDataNotAck() {
		TWCR = (1 << TWINT) | (1 << TWEN);
 53c:	94 e8       	ldi	r25, 0x84	; 132
 53e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
		TWSR |= mTWPS & 0x00000011;
	}
	inline void wait() {
		while (!(TWCR & (1 << TWINT)));
 542:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 546:	99 23       	and	r25, r25
 548:	e4 f7       	brge	.-8      	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
	}
	
	uint8_t readDataNotAck() {
		TWCR = (1 << TWINT) | (1 << TWEN);
		wait();
		return TWDR;
 54a:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	void sendSlaveAddress(uint8_t address, uint8_t readWriteMode) {
		sendData((address << 1) | readWriteMode);
	}	
	
	uint8_t getStatus() {
		return TWSR;
 54e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
		}

		uint8_t lsb = m_i2c->readDataNotAck();
		if (m_i2c->getStatus() != I2C_STATUS_DATA_READ_ACK_NOT_SENT) {
 552:	98 35       	cpi	r25, 0x58	; 88
 554:	19 f0       	breq	.+6      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 556:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
			return m_i2c->getStatus();
 55a:	67 c0       	rjmp	.+206    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
		TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
		wait();
	}
	
	void stop() {
		TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 55c:	94 e9       	ldi	r25, 0x94	; 148
 55e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while ((TWCR & (1 << TWSTO)));
 562:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 566:	c9 2f       	mov	r28, r25
 568:	c0 71       	andi	r28, 0x10	; 16
 56a:	94 fd       	sbrc	r25, 4
 56c:	fa cf       	rjmp	.-12     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 56e:	89 01       	movw	r16, r18
		}

		m_i2c->stop();

		uint16_t result = 0;
		result |= (msb << 8) | lsb;
 570:	28 2f       	mov	r18, r24
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	32 2f       	mov	r19, r18
 576:	22 27       	eor	r18, r18
 578:	24 2b       	or	r18, r20
	i2c_hardware *m_i2c;
	Bmp180Data m_data;
	int32_t b5;
	private:
	void calculateTemperature(uint16_t uncompensatedTemperature) {
		int32_t x1 = ((uncompensatedTemperature - m_calibration.ac6) * (int32_t) m_calibration.ac5) >> 15;
 57a:	f8 01       	movw	r30, r16
 57c:	82 85       	ldd	r24, Z+10	; 0x0a
 57e:	93 85       	ldd	r25, Z+11	; 0x0b
 580:	28 1b       	sub	r18, r24
 582:	39 0b       	sbc	r19, r25
 584:	a0 85       	ldd	r26, Z+8	; 0x08
 586:	b1 85       	ldd	r27, Z+9	; 0x09
 588:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__umulhisi3>
 58c:	6b 01       	movw	r12, r22
 58e:	7c 01       	movw	r14, r24
 590:	0b 2e       	mov	r0, r27
 592:	bf e0       	ldi	r27, 0x0F	; 15
 594:	f5 94       	asr	r15
 596:	e7 94       	ror	r14
 598:	d7 94       	ror	r13
 59a:	c7 94       	ror	r12
 59c:	ba 95       	dec	r27
 59e:	d1 f7       	brne	.-12     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
 5a0:	b0 2d       	mov	r27, r0
		int32_t x2 = ((int32_t) m_calibration.mc << 11) / (x1 + m_calibration.md);
 5a2:	62 89       	ldd	r22, Z+18	; 0x12
 5a4:	73 89       	ldd	r23, Z+19	; 0x13
 5a6:	cb 01       	movw	r24, r22
 5a8:	77 0f       	add	r23, r23
 5aa:	aa 0b       	sbc	r26, r26
 5ac:	bb 0b       	sbc	r27, r27
 5ae:	bc 01       	movw	r22, r24
 5b0:	cd 01       	movw	r24, r26
 5b2:	05 2e       	mov	r0, r21
 5b4:	5b e0       	ldi	r21, 0x0B	; 11
 5b6:	66 0f       	add	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	5a 95       	dec	r21
 5c0:	d1 f7       	brne	.-12     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 5c2:	50 2d       	mov	r21, r0
 5c4:	24 89       	ldd	r18, Z+20	; 0x14
 5c6:	35 89       	ldd	r19, Z+21	; 0x15
 5c8:	49 01       	movw	r8, r18
 5ca:	33 0f       	add	r19, r19
 5cc:	aa 08       	sbc	r10, r10
 5ce:	bb 08       	sbc	r11, r11
 5d0:	a5 01       	movw	r20, r10
 5d2:	94 01       	movw	r18, r8
 5d4:	2c 0d       	add	r18, r12
 5d6:	3d 1d       	adc	r19, r13
 5d8:	4e 1d       	adc	r20, r14
 5da:	5f 1d       	adc	r21, r15
 5dc:	0e 94 18 05 	call	0xa30	; 0xa30 <__divmodsi4>
		b5 = x1 + x2;
 5e0:	d7 01       	movw	r26, r14
 5e2:	c6 01       	movw	r24, r12
 5e4:	82 0f       	add	r24, r18
 5e6:	93 1f       	adc	r25, r19
 5e8:	a4 1f       	adc	r26, r20
 5ea:	b5 1f       	adc	r27, r21
 5ec:	f8 01       	movw	r30, r16
 5ee:	80 a3       	std	Z+32, r24	; 0x20
 5f0:	91 a3       	std	Z+33, r25	; 0x21
 5f2:	a2 a3       	std	Z+34, r26	; 0x22
 5f4:	b3 a3       	std	Z+35, r27	; 0x23
		float temperature = (int32_t) ((b5 + 8) >> 4);
 5f6:	08 96       	adiw	r24, 0x08	; 8
 5f8:	a1 1d       	adc	r26, r1
 5fa:	b1 1d       	adc	r27, r1
 5fc:	bc 01       	movw	r22, r24
 5fe:	cd 01       	movw	r24, r26
 600:	68 94       	set
 602:	13 f8       	bld	r1, 3
 604:	95 95       	asr	r25
 606:	87 95       	ror	r24
 608:	77 95       	ror	r23
 60a:	67 95       	ror	r22
 60c:	16 94       	lsr	r1
 60e:	d1 f7       	brne	.-12     	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
 610:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__floatsisf>
		temperature /= (float) 10;
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	40 e2       	ldi	r20, 0x20	; 32
 61a:	51 e4       	ldi	r21, 0x41	; 65
 61c:	0e 94 0b 04 	call	0x816	; 0x816 <__divsf3>
		m_data.temperatureC = temperature;
 620:	f8 01       	movw	r30, r16
 622:	60 8f       	std	Z+24, r22	; 0x18
 624:	71 8f       	std	Z+25, r23	; 0x19
 626:	82 8f       	std	Z+26, r24	; 0x1a
 628:	93 8f       	std	Z+27, r25	; 0x1b
		result |= (msb << 8) | lsb;

		calculateTemperature(result);

		return BMP180_OK;
	}
 62a:	8c 2f       	mov	r24, r28
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	ff 90       	pop	r15
 634:	ef 90       	pop	r14
 636:	df 90       	pop	r13
 638:	cf 90       	pop	r12
 63a:	bf 90       	pop	r11
 63c:	af 90       	pop	r10
 63e:	9f 90       	pop	r9
 640:	8f 90       	pop	r8
 642:	08 95       	ret

00000644 <__vector_18>:
#include "util/delay.h"
#include "i2c.h"

#include "bmp180/bmp180.h"

STATIC_UART_CONNECTION(/*uart::uart_process_r().write(UDR0)*/)
 644:	1f 92       	push	r1
 646:	0f 92       	push	r0
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	0f 92       	push	r0
 64c:	11 24       	eor	r1, r1
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

00000658 <main>:

int main(void)
{
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
 65c:	cd b7       	in	r28, 0x3d	; 61
 65e:	de b7       	in	r29, 0x3e	; 62
 660:	a5 97       	sbiw	r28, 0x25	; 37
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	de bf       	out	0x3e, r29	; 62
 668:	0f be       	out	0x3f, r0	; 63
 66a:	cd bf       	out	0x3d, r28	; 61
	sei();
 66c:	78 94       	sei
#define I2C_STATUS_DATA_READ_ACK_SENT 0x50
#define I2C_STATUS_DATA_READ_ACK_NOT_SENT 0x58

struct i2c_hardware{
	i2c_hardware(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
 66e:	a8 eb       	ldi	r26, 0xB8	; 184
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	80 e2       	ldi	r24, 0x20	; 32
 674:	8c 93       	st	X, r24
		TWSR |= mTWPS & 0x00000011;
 676:	e9 eb       	ldi	r30, 0xB9	; 185
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	90 81       	ld	r25, Z
 67c:	90 83       	st	Z, r25
	}
	void init(uint8_t mTWBR = 0x20,uint8_t mTWPS = 0){
		TWBR = mTWBR;
 67e:	8c 93       	st	X, r24
		TWSR |= mTWPS & 0x00000011;
 680:	80 81       	ld	r24, Z
 682:	80 83       	st	Z, r24
	i2c_hardware m_i2c;
	m_i2c.init();
	
	uart::uart_process_r().open(16,true);
 684:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN4uart14uart_process_rEv>
	
	static constexpr uint16_t defineUBBRn(uint32_t speed, bool double_speed){
		return ((double_speed+1)*F_CPU)/16 - 1;
	}
	void open(uint16_t UBBRn = 16,bool double_speed = true){
		UBRR0H = (unsigned char)(UBBRn>>8);
 688:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		UBRR0L = (unsigned char)UBBRn;
 68c:	80 e1       	ldi	r24, 0x10	; 16
 68e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		
		// UCSRnA:
		
		if(double_speed){
			UCSR0A |= (1<<U2X0); // удвоение скорости
 692:	e0 ec       	ldi	r30, 0xC0	; 192
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	82 60       	ori	r24, 0x02	; 2
 69a:	80 83       	st	Z, r24
		}
		// UCSRnB:
		UCSR0B = (1<<RXEN0)|( 1<<TXEN0); //Включаем прием и передачу по USART
 69c:	e1 ec       	ldi	r30, 0xC1	; 193
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	88 e1       	ldi	r24, 0x18	; 24
 6a2:	80 83       	st	Z, r24
		UCSR0B |= (1<<RXCIE0) | (1<<TXCIE0); //Разрешаем прерывание при  приеме и передаче
 6a4:	80 81       	ld	r24, Z
 6a6:	80 6c       	ori	r24, 0xC0	; 192
 6a8:	80 83       	st	Z, r24
		//UCSZn2 = 1 для 9 бит
		
		UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);// Обращаемся именно к регистру UCSRnC,
 6aa:	8e e0       	ldi	r24, 0x0E	; 14
 6ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		m_data.pressurePa = p;
	}
	
	public:	
	
	bmp180(i2c_hardware *m_i2c):m_i2c(m_i2c){}
 6b0:	ce 01       	movw	r24, r28
 6b2:	01 96       	adiw	r24, 0x01	; 1
 6b4:	99 8f       	std	Y+25, r25	; 0x19
 6b6:	88 8f       	std	Y+24, r24	; 0x18
    
	bmp180 det1(&m_i2c);
	
	det1.readCalibrationData();
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN6bmp18019readCalibrationDataEv>
	det1.updateTemperature();
 6be:	ce 01       	movw	r24, r28
 6c0:	02 96       	adiw	r24, 0x02	; 2
 6c2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN6bmp18017updateTemperatureEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c6:	2f ef       	ldi	r18, 0xFF	; 255
 6c8:	83 ed       	ldi	r24, 0xD3	; 211
 6ca:	90 e3       	ldi	r25, 0x30	; 48
 6cc:	21 50       	subi	r18, 0x01	; 1
 6ce:	80 40       	sbci	r24, 0x00	; 0
 6d0:	90 40       	sbci	r25, 0x00	; 0
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <main+0x74>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <main+0x7e>
 6d6:	00 00       	nop
	//cout << "press= " << (uint16_t)det1.m_data.temperatureC <<end;
	while (1) 
    {
		_delay_ms(1000);
		
		for (uint8_t i = 0; i <= 255;++i){
 6d8:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
 6da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZGVZN4uart14uart_process_rEvE1U>
 6de:	81 11       	cpse	r24, r1
 6e0:	10 c0       	rjmp	.+32     	; 0x702 <main+0xaa>
 6e2:	8a e0       	ldi	r24, 0x0A	; 10
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	0e 94 0b 05 	call	0xa16	; 0xa16 <__cxa_guard_acquire>
 6ea:	89 2b       	or	r24, r25
 6ec:	51 f0       	breq	.+20     	; 0x702 <main+0xaa>
struct static_queue{
	T buff[_size];
	uint8_t start;
	uint8_t len;
	
	static_queue():start(0),len(0){}
 6ee:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <_ZZN4uart14uart_process_rEvE1U+0x64>
 6f2:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
*/
class uart:public IO_process{
	public:
	static_queue<uint8_t,UART_QSIZE > Q;
	private:
	uart(){}
 6f6:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <_ZZN4uart14uart_process_rEvE1U+0x66>
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
 6fa:	8a e0       	ldi	r24, 0x0A	; 10
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	0e 94 14 05 	call	0xa28	; 0xa28 <__cxa_guard_release>
	}
	uint8_t is_empty(){
		return !len;
	}
	uint8_t is_full(){
		return len >= _size;
 702:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
			while(uart::uart_process_r().Q.is_full());
 706:	84 36       	cpi	r24, 0x64	; 100
 708:	40 f7       	brcc	.-48     	; 0x6da <main+0x82>
			uart::uart_process_r().write(char(i%10)+'0');
 70a:	8d ec       	ldi	r24, 0xCD	; 205
 70c:	18 9f       	mul	r17, r24
 70e:	81 2d       	mov	r24, r1
 710:	11 24       	eor	r1, r1
 712:	86 95       	lsr	r24
 714:	86 95       	lsr	r24
 716:	86 95       	lsr	r24
 718:	88 0f       	add	r24, r24
 71a:	98 2f       	mov	r25, r24
 71c:	99 0f       	add	r25, r25
 71e:	99 0f       	add	r25, r25
 720:	89 0f       	add	r24, r25
 722:	21 2f       	mov	r18, r17
 724:	28 1b       	sub	r18, r24
 726:	00 e3       	ldi	r16, 0x30	; 48
 728:	02 0f       	add	r16, r18
 72a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZGVZN4uart14uart_process_rEvE1U>
 72e:	81 11       	cpse	r24, r1
 730:	10 c0       	rjmp	.+32     	; 0x752 <main+0xfa>
 732:	8a e0       	ldi	r24, 0x0A	; 10
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 0b 05 	call	0xa16	; 0xa16 <__cxa_guard_acquire>
 73a:	89 2b       	or	r24, r25
 73c:	51 f0       	breq	.+20     	; 0x752 <main+0xfa>
struct static_queue{
	T buff[_size];
	uint8_t start;
	uint8_t len;
	
	static_queue():start(0),len(0){}
 73e:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <_ZZN4uart14uart_process_rEvE1U+0x64>
 742:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
*/
class uart:public IO_process{
	public:
	static_queue<uint8_t,UART_QSIZE > Q;
	private:
	uart(){}
 746:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <_ZZN4uart14uart_process_rEvE1U+0x66>
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
 74a:	8a e0       	ldi	r24, 0x0A	; 10
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	0e 94 14 05 	call	0xa28	; 0xa28 <__cxa_guard_release>
		UCSR0C = 0;
	}

	
	bool write(uint8_t c){
		INTERRUPT_LOCK
 752:	8f b7       	in	r24, 0x3f	; 63
 754:	58 2f       	mov	r21, r24
 756:	50 78       	andi	r21, 0x80	; 128
 758:	f8 94       	cli
		cli();
 75a:	f8 94       	cli
	}
	uint8_t is_empty(){
		return !len;
	}
	uint8_t is_full(){
		return len >= _size;
 75c:	40 91 77 01 	lds	r20, 0x0177	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
		if(Q.is_full()){
 760:	44 36       	cpi	r20, 0x64	; 100
 762:	20 f0       	brcs	.+8      	; 0x76c <main+0x114>
			INTERRUPT_UNLOCK
 764:	8f b7       	in	r24, 0x3f	; 63
 766:	85 2b       	or	r24, r21
 768:	8f bf       	out	0x3f, r24	; 63
 76a:	4c c0       	rjmp	.+152    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			len--;
		return buff[start++];
		
	}
	void push(T value){
		uint8_t last = (start + (uint16_t)len)%_size;
 76c:	f0 90 76 01 	lds	r15, 0x0176	; 0x800176 <_ZZN4uart14uart_process_rEvE1U+0x64>
 770:	e4 2f       	mov	r30, r20
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	ef 0d       	add	r30, r15
 776:	f1 1d       	adc	r31, r1
 778:	9f 01       	movw	r18, r30
 77a:	36 95       	lsr	r19
 77c:	27 95       	ror	r18
 77e:	36 95       	lsr	r19
 780:	27 95       	ror	r18
 782:	ab e7       	ldi	r26, 0x7B	; 123
 784:	b4 e1       	ldi	r27, 0x14	; 20
 786:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__umulhisi3>
 78a:	96 95       	lsr	r25
 78c:	87 95       	ror	r24
 78e:	64 e6       	ldi	r22, 0x64	; 100
 790:	68 9f       	mul	r22, r24
 792:	90 01       	movw	r18, r0
 794:	69 9f       	mul	r22, r25
 796:	30 0d       	add	r19, r0
 798:	11 24       	eor	r1, r1
 79a:	cf 01       	movw	r24, r30
 79c:	82 1b       	sub	r24, r18
 79e:	93 0b       	sbc	r25, r19
		if(len == 0 || last != start){
 7a0:	44 23       	and	r20, r20
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <main+0x150>
 7a4:	f8 16       	cp	r15, r24
 7a6:	41 f0       	breq	.+16     	; 0x7b8 <main+0x160>
			len ++;
 7a8:	4f 5f       	subi	r20, 0xFF	; 255
 7aa:	40 93 77 01 	sts	0x0177, r20	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
			buff[last] = value;
 7ae:	99 27       	eor	r25, r25
 7b0:	fc 01       	movw	r30, r24
 7b2:	ee 5e       	subi	r30, 0xEE	; 238
 7b4:	fe 4f       	sbci	r31, 0xFE	; 254
 7b6:	00 83       	st	Z, r16
				UDR0 = Q.pop();
		}
	}
	private:
	inline void enable_transmit(){
		if(!transmit_process_on){
 7b8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <_ZZN4uart14uart_process_rEvE1U+0x66>
 7bc:	81 11       	cpse	r24, r1
 7be:	1f c0       	rjmp	.+62     	; 0x7fe <main+0x1a6>
			transmit_process_on = 1;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <_ZZN4uart14uart_process_rEvE1U+0x66>
			if(UCSR0A & (1<<UDRE0)){
 7c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 7ca:	85 ff       	sbrs	r24, 5
 7cc:	18 c0       	rjmp	.+48     	; 0x7fe <main+0x1a6>
	
	inline uint8_t size(){
		return _size;
	}
	uint8_t is_empty(){
		return !len;
 7ce:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
	bool transmit_process_on = 0;
	public:
	//inline uint8_t queue_len()const {return Q.len;}
	
	inline void transmit_act(){
		if(Q.is_empty()){
 7d2:	81 11       	cpse	r24, r1
 7d4:	03 c0       	rjmp	.+6      	; 0x7dc <main+0x184>
			transmit_process_on = 0;
 7d6:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <_ZZN4uart14uart_process_rEvE1U+0x66>
 7da:	11 c0       	rjmp	.+34     	; 0x7fe <main+0x1a6>
	}
	uint8_t is_full(){
		return len >= _size;
	}
	T pop(){
		if(len)
 7dc:	88 23       	and	r24, r24
 7de:	19 f0       	breq	.+6      	; 0x7e6 <main+0x18e>
			len--;
 7e0:	81 50       	subi	r24, 0x01	; 1
 7e2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <_ZZN4uart14uart_process_rEvE1U+0x65>
		return buff[start++];
 7e6:	a6 e7       	ldi	r26, 0x76	; 118
 7e8:	b1 e0       	ldi	r27, 0x01	; 1
 7ea:	ec 91       	ld	r30, X
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	8e 0f       	add	r24, r30
 7f0:	8c 93       	st	X, r24
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	ee 5e       	subi	r30, 0xEE	; 238
 7f6:	fe 4f       	sbci	r31, 0xFE	; 254
 7f8:	80 81       	ld	r24, Z
		}
		else{
			if(transmit_process_on)
				UDR0 = Q.pop();
 7fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			//cli();
			Q.push(c);
			//sei();
			enable_transmit();
			
			INTERRUPT_UNLOCK
 7fe:	8f b7       	in	r24, 0x3f	; 63
 800:	85 2b       	or	r24, r21
 802:	8f bf       	out	0x3f, r24	; 63
	//cout << "press= " << (uint16_t)det1.m_data.temperatureC <<end;
	while (1) 
    {
		_delay_ms(1000);
		
		for (uint8_t i = 0; i <= 255;++i){
 804:	1f 5f       	subi	r17, 0xFF	; 255
 806:	69 cf       	rjmp	.-302    	; 0x6da <main+0x82>

00000808 <_GLOBAL__sub_I___vector_20>:
		else{
		cout << "error bmp180" << endl;
		}*/
		
	}
}
 808:	6f ef       	ldi	r22, 0xFF	; 255
 80a:	7f ef       	ldi	r23, 0xFF	; 255
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z41__static_initialization_and_destruction_0ii>
 814:	08 95       	ret

00000816 <__divsf3>:
 816:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3x>
 81a:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__fp_round>
 81e:	0e 94 ca 04 	call	0x994	; 0x994 <__fp_pscB>
 822:	58 f0       	brcs	.+22     	; 0x83a <__divsf3+0x24>
 824:	0e 94 c3 04 	call	0x986	; 0x986 <__fp_pscA>
 828:	40 f0       	brcs	.+16     	; 0x83a <__divsf3+0x24>
 82a:	29 f4       	brne	.+10     	; 0x836 <__divsf3+0x20>
 82c:	5f 3f       	cpi	r21, 0xFF	; 255
 82e:	29 f0       	breq	.+10     	; 0x83a <__divsf3+0x24>
 830:	0c 94 ba 04 	jmp	0x974	; 0x974 <__fp_inf>
 834:	51 11       	cpse	r21, r1
 836:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_szero>
 83a:	0c 94 c0 04 	jmp	0x980	; 0x980 <__fp_nan>

0000083e <__divsf3x>:
 83e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fp_split3>
 842:	68 f3       	brcs	.-38     	; 0x81e <__divsf3+0x8>

00000844 <__divsf3_pse>:
 844:	99 23       	and	r25, r25
 846:	b1 f3       	breq	.-20     	; 0x834 <__divsf3+0x1e>
 848:	55 23       	and	r21, r21
 84a:	91 f3       	breq	.-28     	; 0x830 <__divsf3+0x1a>
 84c:	95 1b       	sub	r25, r21
 84e:	55 0b       	sbc	r21, r21
 850:	bb 27       	eor	r27, r27
 852:	aa 27       	eor	r26, r26
 854:	62 17       	cp	r22, r18
 856:	73 07       	cpc	r23, r19
 858:	84 07       	cpc	r24, r20
 85a:	38 f0       	brcs	.+14     	; 0x86a <__divsf3_pse+0x26>
 85c:	9f 5f       	subi	r25, 0xFF	; 255
 85e:	5f 4f       	sbci	r21, 0xFF	; 255
 860:	22 0f       	add	r18, r18
 862:	33 1f       	adc	r19, r19
 864:	44 1f       	adc	r20, r20
 866:	aa 1f       	adc	r26, r26
 868:	a9 f3       	breq	.-22     	; 0x854 <__divsf3_pse+0x10>
 86a:	35 d0       	rcall	.+106    	; 0x8d6 <__divsf3_pse+0x92>
 86c:	0e 2e       	mov	r0, r30
 86e:	3a f0       	brmi	.+14     	; 0x87e <__divsf3_pse+0x3a>
 870:	e0 e8       	ldi	r30, 0x80	; 128
 872:	32 d0       	rcall	.+100    	; 0x8d8 <__divsf3_pse+0x94>
 874:	91 50       	subi	r25, 0x01	; 1
 876:	50 40       	sbci	r21, 0x00	; 0
 878:	e6 95       	lsr	r30
 87a:	00 1c       	adc	r0, r0
 87c:	ca f7       	brpl	.-14     	; 0x870 <__divsf3_pse+0x2c>
 87e:	2b d0       	rcall	.+86     	; 0x8d6 <__divsf3_pse+0x92>
 880:	fe 2f       	mov	r31, r30
 882:	29 d0       	rcall	.+82     	; 0x8d6 <__divsf3_pse+0x92>
 884:	66 0f       	add	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	bb 1f       	adc	r27, r27
 88c:	26 17       	cp	r18, r22
 88e:	37 07       	cpc	r19, r23
 890:	48 07       	cpc	r20, r24
 892:	ab 07       	cpc	r26, r27
 894:	b0 e8       	ldi	r27, 0x80	; 128
 896:	09 f0       	breq	.+2      	; 0x89a <__divsf3_pse+0x56>
 898:	bb 0b       	sbc	r27, r27
 89a:	80 2d       	mov	r24, r0
 89c:	bf 01       	movw	r22, r30
 89e:	ff 27       	eor	r31, r31
 8a0:	93 58       	subi	r25, 0x83	; 131
 8a2:	5f 4f       	sbci	r21, 0xFF	; 255
 8a4:	3a f0       	brmi	.+14     	; 0x8b4 <__divsf3_pse+0x70>
 8a6:	9e 3f       	cpi	r25, 0xFE	; 254
 8a8:	51 05       	cpc	r21, r1
 8aa:	78 f0       	brcs	.+30     	; 0x8ca <__divsf3_pse+0x86>
 8ac:	0c 94 ba 04 	jmp	0x974	; 0x974 <__fp_inf>
 8b0:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_szero>
 8b4:	5f 3f       	cpi	r21, 0xFF	; 255
 8b6:	e4 f3       	brlt	.-8      	; 0x8b0 <__divsf3_pse+0x6c>
 8b8:	98 3e       	cpi	r25, 0xE8	; 232
 8ba:	d4 f3       	brlt	.-12     	; 0x8b0 <__divsf3_pse+0x6c>
 8bc:	86 95       	lsr	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	b7 95       	ror	r27
 8c4:	f7 95       	ror	r31
 8c6:	9f 5f       	subi	r25, 0xFF	; 255
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__divsf3_pse+0x78>
 8ca:	88 0f       	add	r24, r24
 8cc:	91 1d       	adc	r25, r1
 8ce:	96 95       	lsr	r25
 8d0:	87 95       	ror	r24
 8d2:	97 f9       	bld	r25, 7
 8d4:	08 95       	ret
 8d6:	e1 e0       	ldi	r30, 0x01	; 1
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	bb 1f       	adc	r27, r27
 8e0:	62 17       	cp	r22, r18
 8e2:	73 07       	cpc	r23, r19
 8e4:	84 07       	cpc	r24, r20
 8e6:	ba 07       	cpc	r27, r26
 8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__divsf3_pse+0xae>
 8ea:	62 1b       	sub	r22, r18
 8ec:	73 0b       	sbc	r23, r19
 8ee:	84 0b       	sbc	r24, r20
 8f0:	ba 0b       	sbc	r27, r26
 8f2:	ee 1f       	adc	r30, r30
 8f4:	88 f7       	brcc	.-30     	; 0x8d8 <__divsf3_pse+0x94>
 8f6:	e0 95       	com	r30
 8f8:	08 95       	ret

000008fa <__floatunsisf>:
 8fa:	e8 94       	clt
 8fc:	09 c0       	rjmp	.+18     	; 0x910 <__stack+0x11>

000008fe <__floatsisf>:
 8fe:	97 fb       	bst	r25, 7
 900:	3e f4       	brtc	.+14     	; 0x910 <__stack+0x11>
 902:	90 95       	com	r25
 904:	80 95       	com	r24
 906:	70 95       	com	r23
 908:	61 95       	neg	r22
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	99 23       	and	r25, r25
 912:	a9 f0       	breq	.+42     	; 0x93e <__stack+0x3f>
 914:	f9 2f       	mov	r31, r25
 916:	96 e9       	ldi	r25, 0x96	; 150
 918:	bb 27       	eor	r27, r27
 91a:	93 95       	inc	r25
 91c:	f6 95       	lsr	r31
 91e:	87 95       	ror	r24
 920:	77 95       	ror	r23
 922:	67 95       	ror	r22
 924:	b7 95       	ror	r27
 926:	f1 11       	cpse	r31, r1
 928:	f8 cf       	rjmp	.-16     	; 0x91a <__stack+0x1b>
 92a:	fa f4       	brpl	.+62     	; 0x96a <__stack+0x6b>
 92c:	bb 0f       	add	r27, r27
 92e:	11 f4       	brne	.+4      	; 0x934 <__stack+0x35>
 930:	60 ff       	sbrs	r22, 0
 932:	1b c0       	rjmp	.+54     	; 0x96a <__stack+0x6b>
 934:	6f 5f       	subi	r22, 0xFF	; 255
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	16 c0       	rjmp	.+44     	; 0x96a <__stack+0x6b>
 93e:	88 23       	and	r24, r24
 940:	11 f0       	breq	.+4      	; 0x946 <__stack+0x47>
 942:	96 e9       	ldi	r25, 0x96	; 150
 944:	11 c0       	rjmp	.+34     	; 0x968 <__stack+0x69>
 946:	77 23       	and	r23, r23
 948:	21 f0       	breq	.+8      	; 0x952 <__stack+0x53>
 94a:	9e e8       	ldi	r25, 0x8E	; 142
 94c:	87 2f       	mov	r24, r23
 94e:	76 2f       	mov	r23, r22
 950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0x5d>
 952:	66 23       	and	r22, r22
 954:	71 f0       	breq	.+28     	; 0x972 <__stack+0x73>
 956:	96 e8       	ldi	r25, 0x86	; 134
 958:	86 2f       	mov	r24, r22
 95a:	70 e0       	ldi	r23, 0x00	; 0
 95c:	60 e0       	ldi	r22, 0x00	; 0
 95e:	2a f0       	brmi	.+10     	; 0x96a <__stack+0x6b>
 960:	9a 95       	dec	r25
 962:	66 0f       	add	r22, r22
 964:	77 1f       	adc	r23, r23
 966:	88 1f       	adc	r24, r24
 968:	da f7       	brpl	.-10     	; 0x960 <__stack+0x61>
 96a:	88 0f       	add	r24, r24
 96c:	96 95       	lsr	r25
 96e:	87 95       	ror	r24
 970:	97 f9       	bld	r25, 7
 972:	08 95       	ret

00000974 <__fp_inf>:
 974:	97 f9       	bld	r25, 7
 976:	9f 67       	ori	r25, 0x7F	; 127
 978:	80 e8       	ldi	r24, 0x80	; 128
 97a:	70 e0       	ldi	r23, 0x00	; 0
 97c:	60 e0       	ldi	r22, 0x00	; 0
 97e:	08 95       	ret

00000980 <__fp_nan>:
 980:	9f ef       	ldi	r25, 0xFF	; 255
 982:	80 ec       	ldi	r24, 0xC0	; 192
 984:	08 95       	ret

00000986 <__fp_pscA>:
 986:	00 24       	eor	r0, r0
 988:	0a 94       	dec	r0
 98a:	16 16       	cp	r1, r22
 98c:	17 06       	cpc	r1, r23
 98e:	18 06       	cpc	r1, r24
 990:	09 06       	cpc	r0, r25
 992:	08 95       	ret

00000994 <__fp_pscB>:
 994:	00 24       	eor	r0, r0
 996:	0a 94       	dec	r0
 998:	12 16       	cp	r1, r18
 99a:	13 06       	cpc	r1, r19
 99c:	14 06       	cpc	r1, r20
 99e:	05 06       	cpc	r0, r21
 9a0:	08 95       	ret

000009a2 <__fp_round>:
 9a2:	09 2e       	mov	r0, r25
 9a4:	03 94       	inc	r0
 9a6:	00 0c       	add	r0, r0
 9a8:	11 f4       	brne	.+4      	; 0x9ae <__fp_round+0xc>
 9aa:	88 23       	and	r24, r24
 9ac:	52 f0       	brmi	.+20     	; 0x9c2 <__fp_round+0x20>
 9ae:	bb 0f       	add	r27, r27
 9b0:	40 f4       	brcc	.+16     	; 0x9c2 <__fp_round+0x20>
 9b2:	bf 2b       	or	r27, r31
 9b4:	11 f4       	brne	.+4      	; 0x9ba <__fp_round+0x18>
 9b6:	60 ff       	sbrs	r22, 0
 9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__fp_round+0x20>
 9ba:	6f 5f       	subi	r22, 0xFF	; 255
 9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 9be:	8f 4f       	sbci	r24, 0xFF	; 255
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	08 95       	ret

000009c4 <__fp_split3>:
 9c4:	57 fd       	sbrc	r21, 7
 9c6:	90 58       	subi	r25, 0x80	; 128
 9c8:	44 0f       	add	r20, r20
 9ca:	55 1f       	adc	r21, r21
 9cc:	59 f0       	breq	.+22     	; 0x9e4 <__fp_splitA+0x10>
 9ce:	5f 3f       	cpi	r21, 0xFF	; 255
 9d0:	71 f0       	breq	.+28     	; 0x9ee <__fp_splitA+0x1a>
 9d2:	47 95       	ror	r20

000009d4 <__fp_splitA>:
 9d4:	88 0f       	add	r24, r24
 9d6:	97 fb       	bst	r25, 7
 9d8:	99 1f       	adc	r25, r25
 9da:	61 f0       	breq	.+24     	; 0x9f4 <__fp_splitA+0x20>
 9dc:	9f 3f       	cpi	r25, 0xFF	; 255
 9de:	79 f0       	breq	.+30     	; 0x9fe <__fp_splitA+0x2a>
 9e0:	87 95       	ror	r24
 9e2:	08 95       	ret
 9e4:	12 16       	cp	r1, r18
 9e6:	13 06       	cpc	r1, r19
 9e8:	14 06       	cpc	r1, r20
 9ea:	55 1f       	adc	r21, r21
 9ec:	f2 cf       	rjmp	.-28     	; 0x9d2 <__fp_split3+0xe>
 9ee:	46 95       	lsr	r20
 9f0:	f1 df       	rcall	.-30     	; 0x9d4 <__fp_splitA>
 9f2:	08 c0       	rjmp	.+16     	; 0xa04 <__fp_splitA+0x30>
 9f4:	16 16       	cp	r1, r22
 9f6:	17 06       	cpc	r1, r23
 9f8:	18 06       	cpc	r1, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	f1 cf       	rjmp	.-30     	; 0x9e0 <__fp_splitA+0xc>
 9fe:	86 95       	lsr	r24
 a00:	71 05       	cpc	r23, r1
 a02:	61 05       	cpc	r22, r1
 a04:	08 94       	sec
 a06:	08 95       	ret

00000a08 <__fp_zero>:
 a08:	e8 94       	clt

00000a0a <__fp_szero>:
 a0a:	bb 27       	eor	r27, r27
 a0c:	66 27       	eor	r22, r22
 a0e:	77 27       	eor	r23, r23
 a10:	cb 01       	movw	r24, r22
 a12:	97 f9       	bld	r25, 7
 a14:	08 95       	ret

00000a16 <__cxa_guard_acquire>:
 a16:	fc 01       	movw	r30, r24
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	20 81       	ld	r18, Z
 a1e:	22 23       	and	r18, r18
 a20:	11 f0       	breq	.+4      	; 0xa26 <__cxa_guard_acquire+0x10>
 a22:	80 e0       	ldi	r24, 0x00	; 0
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	08 95       	ret

00000a28 <__cxa_guard_release>:
 a28:	21 e0       	ldi	r18, 0x01	; 1
 a2a:	fc 01       	movw	r30, r24
 a2c:	20 83       	st	Z, r18
 a2e:	08 95       	ret

00000a30 <__divmodsi4>:
 a30:	05 2e       	mov	r0, r21
 a32:	97 fb       	bst	r25, 7
 a34:	1e f4       	brtc	.+6      	; 0xa3c <__divmodsi4+0xc>
 a36:	00 94       	com	r0
 a38:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__negsi2>
 a3c:	57 fd       	sbrc	r21, 7
 a3e:	07 d0       	rcall	.+14     	; 0xa4e <__divmodsi4_neg2>
 a40:	0e 94 4c 05 	call	0xa98	; 0xa98 <__udivmodsi4>
 a44:	07 fc       	sbrc	r0, 7
 a46:	03 d0       	rcall	.+6      	; 0xa4e <__divmodsi4_neg2>
 a48:	4e f4       	brtc	.+18     	; 0xa5c <__divmodsi4_exit>
 a4a:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__negsi2>

00000a4e <__divmodsi4_neg2>:
 a4e:	50 95       	com	r21
 a50:	40 95       	com	r20
 a52:	30 95       	com	r19
 a54:	21 95       	neg	r18
 a56:	3f 4f       	sbci	r19, 0xFF	; 255
 a58:	4f 4f       	sbci	r20, 0xFF	; 255
 a5a:	5f 4f       	sbci	r21, 0xFF	; 255

00000a5c <__divmodsi4_exit>:
 a5c:	08 95       	ret

00000a5e <__negsi2>:
 a5e:	90 95       	com	r25
 a60:	80 95       	com	r24
 a62:	70 95       	com	r23
 a64:	61 95       	neg	r22
 a66:	7f 4f       	sbci	r23, 0xFF	; 255
 a68:	8f 4f       	sbci	r24, 0xFF	; 255
 a6a:	9f 4f       	sbci	r25, 0xFF	; 255
 a6c:	08 95       	ret

00000a6e <__tablejump2__>:
 a6e:	ee 0f       	add	r30, r30
 a70:	ff 1f       	adc	r31, r31
 a72:	05 90       	lpm	r0, Z+
 a74:	f4 91       	lpm	r31, Z
 a76:	e0 2d       	mov	r30, r0
 a78:	09 94       	ijmp

00000a7a <__umulhisi3>:
 a7a:	a2 9f       	mul	r26, r18
 a7c:	b0 01       	movw	r22, r0
 a7e:	b3 9f       	mul	r27, r19
 a80:	c0 01       	movw	r24, r0
 a82:	a3 9f       	mul	r26, r19
 a84:	70 0d       	add	r23, r0
 a86:	81 1d       	adc	r24, r1
 a88:	11 24       	eor	r1, r1
 a8a:	91 1d       	adc	r25, r1
 a8c:	b2 9f       	mul	r27, r18
 a8e:	70 0d       	add	r23, r0
 a90:	81 1d       	adc	r24, r1
 a92:	11 24       	eor	r1, r1
 a94:	91 1d       	adc	r25, r1
 a96:	08 95       	ret

00000a98 <__udivmodsi4>:
 a98:	a1 e2       	ldi	r26, 0x21	; 33
 a9a:	1a 2e       	mov	r1, r26
 a9c:	aa 1b       	sub	r26, r26
 a9e:	bb 1b       	sub	r27, r27
 aa0:	fd 01       	movw	r30, r26
 aa2:	0d c0       	rjmp	.+26     	; 0xabe <__udivmodsi4_ep>

00000aa4 <__udivmodsi4_loop>:
 aa4:	aa 1f       	adc	r26, r26
 aa6:	bb 1f       	adc	r27, r27
 aa8:	ee 1f       	adc	r30, r30
 aaa:	ff 1f       	adc	r31, r31
 aac:	a2 17       	cp	r26, r18
 aae:	b3 07       	cpc	r27, r19
 ab0:	e4 07       	cpc	r30, r20
 ab2:	f5 07       	cpc	r31, r21
 ab4:	20 f0       	brcs	.+8      	; 0xabe <__udivmodsi4_ep>
 ab6:	a2 1b       	sub	r26, r18
 ab8:	b3 0b       	sbc	r27, r19
 aba:	e4 0b       	sbc	r30, r20
 abc:	f5 0b       	sbc	r31, r21

00000abe <__udivmodsi4_ep>:
 abe:	66 1f       	adc	r22, r22
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 1f       	adc	r24, r24
 ac4:	99 1f       	adc	r25, r25
 ac6:	1a 94       	dec	r1
 ac8:	69 f7       	brne	.-38     	; 0xaa4 <__udivmodsi4_loop>
 aca:	60 95       	com	r22
 acc:	70 95       	com	r23
 ace:	80 95       	com	r24
 ad0:	90 95       	com	r25
 ad2:	9b 01       	movw	r18, r22
 ad4:	ac 01       	movw	r20, r24
 ad6:	bd 01       	movw	r22, r26
 ad8:	cf 01       	movw	r24, r30
 ada:	08 95       	ret

00000adc <_exit>:
 adc:	f8 94       	cli

00000ade <__stop_program>:
 ade:	ff cf       	rjmp	.-2      	; 0xade <__stop_program>
