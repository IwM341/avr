
P006USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  00800100  00800100  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000899  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000728  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b0  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  0000157c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003da  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f5  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 36       	cpi	r26, 0x67	; 103
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <transmit_act>:
		if(UCSR0A & (1<<UDRE0)){
			transmit_act();
		}
	}
	else{
		transmit_process_on = 1;
  90:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <input+0x65>
  94:	81 11       	cpse	r24, r1
  96:	03 c0       	rjmp	.+6      	; 0x9e <transmit_act+0xe>
  98:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  9c:	08 95       	ret
  9e:	a5 e6       	ldi	r26, 0x65	; 101
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	ec 91       	ld	r30, X
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	9e 0f       	add	r25, r30
  a8:	9c 93       	st	X, r25
  aa:	81 50       	subi	r24, 0x01	; 1
  ac:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <input+0x65>
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	ef 5f       	subi	r30, 0xFF	; 255
  b4:	fe 4f       	sbci	r31, 0xFE	; 254
  b6:	80 81       	ld	r24, Z
  b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  bc:	08 95       	ret

000000be <__vector_18>:
	}
}

//receive
ISR(USART_RX_vect){
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	4f 93       	push	r20
  ce:	5f 93       	push	r21
  d0:	6f 93       	push	r22
  d2:	7f 93       	push	r23
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	push_queue(&input,UDR0);
  e0:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
inline uint8_t is_empty_queue(queue * _queue){
	return _queue->len == 0;
}

inline uint8_t push_queue(queue * _queue,uint8_t data){
	uint8_t newlast = (_queue->first + _queue->len)%QSIZE;
  e4:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <input+0x64>
  e8:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <input+0x65>
  ec:	82 2f       	mov	r24, r18
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	83 0f       	add	r24, r19
  f2:	91 1d       	adc	r25, r1
  f4:	64 e6       	ldi	r22, 0x64	; 100
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	0e 94 c4 00 	call	0x188	; 0x188 <__divmodhi4>
	if(newlast == _queue->first){
  fc:	38 17       	cp	r19, r24
  fe:	41 f0       	breq	.+16     	; 0x110 <__vector_18+0x52>
		return 1;
	}
	else{
		_queue->data[newlast] = data;
 100:	99 27       	eor	r25, r25
 102:	fc 01       	movw	r30, r24
 104:	ef 5f       	subi	r30, 0xFF	; 255
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	40 83       	st	Z, r20
		_queue->len ++;
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <input+0x65>
}

//receive
ISR(USART_RX_vect){
	push_queue(&input,UDR0);
	transmit_process_on = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 116:	ff 91       	pop	r31
 118:	ef 91       	pop	r30
 11a:	bf 91       	pop	r27
 11c:	af 91       	pop	r26
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	7f 91       	pop	r23
 124:	6f 91       	pop	r22
 126:	5f 91       	pop	r21
 128:	4f 91       	pop	r20
 12a:	3f 91       	pop	r19
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_20>:


//transmit
ISR (USART_TX_vect){
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	if(transmit_process_on){
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	81 11       	cpse	r24, r1
		transmit_act();
 160:	0e 94 48 00 	call	0x90	; 0x90 <transmit_act>
	}
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	7f 91       	pop	r23
 172:	6f 91       	pop	r22
 174:	5f 91       	pop	r21
 176:	4f 91       	pop	r20
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <main>:



int main(void)
{
 186:	ff cf       	rjmp	.-2      	; 0x186 <main>

00000188 <__divmodhi4>:
 188:	97 fb       	bst	r25, 7
 18a:	07 2e       	mov	r0, r23
 18c:	16 f4       	brtc	.+4      	; 0x192 <__divmodhi4+0xa>
 18e:	00 94       	com	r0
 190:	07 d0       	rcall	.+14     	; 0x1a0 <__divmodhi4_neg1>
 192:	77 fd       	sbrc	r23, 7
 194:	09 d0       	rcall	.+18     	; 0x1a8 <__divmodhi4_neg2>
 196:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__udivmodhi4>
 19a:	07 fc       	sbrc	r0, 7
 19c:	05 d0       	rcall	.+10     	; 0x1a8 <__divmodhi4_neg2>
 19e:	3e f4       	brtc	.+14     	; 0x1ae <__divmodhi4_exit>

000001a0 <__divmodhi4_neg1>:
 1a0:	90 95       	com	r25
 1a2:	81 95       	neg	r24
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	08 95       	ret

000001a8 <__divmodhi4_neg2>:
 1a8:	70 95       	com	r23
 1aa:	61 95       	neg	r22
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255

000001ae <__divmodhi4_exit>:
 1ae:	08 95       	ret

000001b0 <__udivmodhi4>:
 1b0:	aa 1b       	sub	r26, r26
 1b2:	bb 1b       	sub	r27, r27
 1b4:	51 e1       	ldi	r21, 0x11	; 17
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <__udivmodhi4_ep>

000001b8 <__udivmodhi4_loop>:
 1b8:	aa 1f       	adc	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	a6 17       	cp	r26, r22
 1be:	b7 07       	cpc	r27, r23
 1c0:	10 f0       	brcs	.+4      	; 0x1c6 <__udivmodhi4_ep>
 1c2:	a6 1b       	sub	r26, r22
 1c4:	b7 0b       	sbc	r27, r23

000001c6 <__udivmodhi4_ep>:
 1c6:	88 1f       	adc	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	5a 95       	dec	r21
 1cc:	a9 f7       	brne	.-22     	; 0x1b8 <__udivmodhi4_loop>
 1ce:	80 95       	com	r24
 1d0:	90 95       	com	r25
 1d2:	bc 01       	movw	r22, r24
 1d4:	cd 01       	movw	r24, r26
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
