
P009MOCUSART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000302  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  0080010a  0080010a  000003a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f70  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000885  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000366  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078e  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022e  00000000  00000000  00002802  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 33       	cpi	r26, 0x35	; 53
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 43 01 	call	0x286	; 0x286 <main>
  9e:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
	slot inline void data_recieve_interrupt(uint8_t data);
	//recieve
	
};

ISR (USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	cf 93       	push	r28
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	uart::uart_process_r().data_recieve_interrupt(UDR0);
  ca:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
  ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  d2:	81 11       	cpse	r24, r1
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <__vector_18+0x4e>
  d6:	8a e0       	ldi	r24, 0x0A	; 10
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 4a 01 	call	0x294	; 0x294 <__cxa_guard_acquire>
  de:	89 2b       	or	r24, r25
  e0:	49 f0       	breq	.+18     	; 0xf4 <__vector_18+0x4e>
struct static_queue{
	T buff[_size];
	uint8_t start;
	uint8_t len;
	
	static_queue():start(0),len(0){}
  e2:	e2 e1       	ldi	r30, 0x12	; 18
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	10 a2       	std	Z+32, r1	; 0x20
  e8:	11 a2       	std	Z+33, r1	; 0x21
#endif

class uart:public IO_process{
	private:
	static_queue<uint8_t,UART_QSIZE > Q;
	uart(){}
  ea:	12 a2       	std	Z+34, r1	; 0x22
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__cxa_guard_release>
  f4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  f8:	81 11       	cpse	r24, r1
  fa:	0f c0       	rjmp	.+30     	; 0x11a <__vector_18+0x74>
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 4a 01 	call	0x294	; 0x294 <__cxa_guard_acquire>
 104:	89 2b       	or	r24, r25
 106:	49 f0       	breq	.+18     	; 0x11a <__vector_18+0x74>
 108:	e2 e1       	ldi	r30, 0x12	; 18
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	10 a2       	std	Z+32, r1	; 0x20
 10e:	11 a2       	std	Z+33, r1	; 0x21
#endif

class uart:public IO_process{
	private:
	static_queue<uint8_t,UART_QSIZE > Q;
	uart(){}
 110:	12 a2       	std	Z+34, r1	; 0x22
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__cxa_guard_release>
	}
	uint8_t is_empty(){
		return !len;
	}
	uint8_t is_full(){
		return len < _size;
 11a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_ZZN4uart14uart_process_rEvE1U+0x21>
		UCSR0C = 0;
	}

	
	bool write(uint8_t c){
		if(Q.is_full()){
 11e:	80 32       	cpi	r24, 0x20	; 32
 120:	80 f1       	brcs	.+96     	; 0x182 <__vector_18+0xdc>
		len --;
		return buff[start++];
		
	}
	void push(T value){
		uint8_t last = (start + (uint16_t)len)%_size;
 122:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <_ZZN4uart14uart_process_rEvE1U+0x20>
 126:	e8 2f       	mov	r30, r24
 128:	e9 0f       	add	r30, r25
 12a:	ef 71       	andi	r30, 0x1F	; 31
		if(len == 0 || last != start){
 12c:	88 23       	and	r24, r24
 12e:	11 f0       	breq	.+4      	; 0x134 <__vector_18+0x8e>
 130:	9e 17       	cp	r25, r30
 132:	39 f0       	breq	.+14     	; 0x142 <__vector_18+0x9c>
			len ++;
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_ZZN4uart14uart_process_rEvE1U+0x21>
			buff[last] = value;
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	ee 5e       	subi	r30, 0xEE	; 238
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	c0 83       	st	Z, r28
			UDR0 = Q.pop();
		}
	}
	private:
	void enable_transmit(){
		if(!transmit_process_on){
 142:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_ZZN4uart14uart_process_rEvE1U+0x22>
 146:	81 11       	cpse	r24, r1
 148:	1c c0       	rjmp	.+56     	; 0x182 <__vector_18+0xdc>
			transmit_process_on = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_ZZN4uart14uart_process_rEvE1U+0x22>
			if(UCSR0A & (1<<UDRE0)){
 150:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 154:	85 ff       	sbrs	r24, 5
 156:	15 c0       	rjmp	.+42     	; 0x182 <__vector_18+0xdc>
	
	inline uint8_t size(){
		return _size;
	}
	uint8_t is_empty(){
		return !len;
 158:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_ZZN4uart14uart_process_rEvE1U+0x21>
	uart(uart &&){}
	
	bool transmit_process_on = 0;
	public:
	void transmit_act(){
		if(Q.is_empty()){
 15c:	81 11       	cpse	r24, r1
 15e:	03 c0       	rjmp	.+6      	; 0x166 <__vector_18+0xc0>
			transmit_process_on = 0;
 160:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <_ZZN4uart14uart_process_rEvE1U+0x22>
 164:	0e c0       	rjmp	.+28     	; 0x182 <__vector_18+0xdc>
	}
	uint8_t is_full(){
		return len < _size;
	}
	T pop(){
		len --;
 166:	e2 e1       	ldi	r30, 0x12	; 18
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	81 a3       	std	Z+33, r24	; 0x21
		return buff[start++];
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 0f       	add	r24, r25
 172:	80 a3       	std	Z+32, r24	; 0x20
 174:	e9 2f       	mov	r30, r25
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ee 5e       	subi	r30, 0xEE	; 238
 17a:	fe 4f       	sbci	r31, 0xFE	; 254
 17c:	80 81       	ld	r24, Z
		}
		else if(transmit_process_on){
			UDR0 = Q.pop();
 17e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	set_port(PORTB,0b00000001,seg7>>8);
}

void uart::data_recieve_interrupt(uint8_t data){
	uart::uart_process_r().write(data);
	set7seg( (data-'0')%10);
 182:	8c 2f       	mov	r24, r28
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	c0 97       	sbiw	r24, 0x30	; 48
 188:	6a e0       	ldi	r22, 0x0A	; 10
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	0e 94 57 01 	call	0x2ae	; 0x2ae <__divmodhi4>
#include "../../framework/uart_process.hpp"
#include "../../framework/seg7.h"
#include "../../framework/ports.h"

inline void set7seg(uint8_t num){
	uint16_t seg7 = digit[num] << 2;
 190:	fc 01       	movw	r30, r24
 192:	ff 27       	eor	r31, r31
 194:	e0 50       	subi	r30, 0x00	; 0
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	80 81       	ld	r24, Z
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
	set_port(PORTD,0b11111100,seg7);
 1a4:	3b b1       	in	r19, 0x0b	; 11
 1a6:	33 70       	andi	r19, 0x03	; 3
 1a8:	28 2f       	mov	r18, r24
 1aa:	2c 7f       	andi	r18, 0xFC	; 252
 1ac:	83 2f       	mov	r24, r19
 1ae:	82 2b       	or	r24, r18
 1b0:	8b b9       	out	0x0b, r24	; 11
	set_port(PORTB,0b00000001,seg7>>8);
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	8e 7f       	andi	r24, 0xFE	; 254
 1b6:	91 70       	andi	r25, 0x01	; 1
 1b8:	89 2b       	or	r24, r25
 1ba:	85 b9       	out	0x05, r24	; 5
	
};

ISR (USART_RX_vect){
	uart::uart_process_r().data_recieve_interrupt(UDR0);
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	cf 91       	pop	r28
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_20>:


//transmit
ISR (USART_TX_vect){
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
 202:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 206:	81 11       	cpse	r24, r1
 208:	0f c0       	rjmp	.+30     	; 0x228 <__vector_20+0x48>
 20a:	8a e0       	ldi	r24, 0x0A	; 10
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 4a 01 	call	0x294	; 0x294 <__cxa_guard_acquire>
 212:	89 2b       	or	r24, r25
 214:	49 f0       	breq	.+18     	; 0x228 <__vector_20+0x48>
struct static_queue{
	T buff[_size];
	uint8_t start;
	uint8_t len;
	
	static_queue():start(0),len(0){}
 216:	e2 e1       	ldi	r30, 0x12	; 18
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	10 a2       	std	Z+32, r1	; 0x20
 21c:	11 a2       	std	Z+33, r1	; 0x21
#endif

class uart:public IO_process{
	private:
	static_queue<uint8_t,UART_QSIZE > Q;
	uart(){}
 21e:	12 a2       	std	Z+34, r1	; 0x22
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__cxa_guard_release>
	
	inline uint8_t size(){
		return _size;
	}
	uint8_t is_empty(){
		return !len;
 228:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_ZZN4uart14uart_process_rEvE1U+0x21>
	uart(uart &&){}
	
	bool transmit_process_on = 0;
	public:
	void transmit_act(){
		if(Q.is_empty()){
 22c:	81 11       	cpse	r24, r1
 22e:	03 c0       	rjmp	.+6      	; 0x236 <__vector_20+0x56>
			transmit_process_on = 0;
 230:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <_ZZN4uart14uart_process_rEvE1U+0x22>
 234:	17 c0       	rjmp	.+46     	; 0x264 <__vector_20+0x84>
		}
		else if(transmit_process_on){
 236:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <_ZZN4uart14uart_process_rEvE1U+0x22>
 23a:	99 23       	and	r25, r25
 23c:	99 f0       	breq	.+38     	; 0x264 <__vector_20+0x84>
	}
	uint8_t is_full(){
		return len < _size;
	}
	T pop(){
		len --;
 23e:	a2 e1       	ldi	r26, 0x12	; 18
 240:	b1 e0       	ldi	r27, 0x01	; 1
 242:	81 50       	subi	r24, 0x01	; 1
 244:	91 96       	adiw	r26, 0x21	; 33
 246:	8c 93       	st	X, r24
 248:	91 97       	sbiw	r26, 0x21	; 33
		return buff[start++];
 24a:	90 96       	adiw	r26, 0x20	; 32
 24c:	ec 91       	ld	r30, X
 24e:	90 97       	sbiw	r26, 0x20	; 32
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	8e 0f       	add	r24, r30
 254:	90 96       	adiw	r26, 0x20	; 32
 256:	8c 93       	st	X, r24
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	ee 5e       	subi	r30, 0xEE	; 238
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	80 81       	ld	r24, Z
			UDR0 = Q.pop();
 260:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>


//transmit
ISR (USART_TX_vect){
	uart::uart_process_r().transmit_act();
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <main>:
	set7seg( (data-'0')%10);
}

int main(void)
{
    DDRB = 0xFF;
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	84 b9       	out	0x04, r24	; 4
    set_port(DDRD,0b11111100,0xFF);
 28a:	8a b1       	in	r24, 0x0a	; 10
 28c:	8c 6f       	ori	r24, 0xFC	; 252
 28e:	8a b9       	out	0x0a, r24	; 10
    sei();
 290:	78 94       	sei
 292:	ff cf       	rjmp	.-2      	; 0x292 <main+0xc>

00000294 <__cxa_guard_acquire>:
 294:	fc 01       	movw	r30, r24
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	20 81       	ld	r18, Z
 29c:	22 23       	and	r18, r18
 29e:	11 f0       	breq	.+4      	; 0x2a4 <__cxa_guard_acquire+0x10>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	08 95       	ret

000002a6 <__cxa_guard_release>:
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
 2ac:	08 95       	ret

000002ae <__divmodhi4>:
 2ae:	97 fb       	bst	r25, 7
 2b0:	07 2e       	mov	r0, r23
 2b2:	16 f4       	brtc	.+4      	; 0x2b8 <__divmodhi4+0xa>
 2b4:	00 94       	com	r0
 2b6:	07 d0       	rcall	.+14     	; 0x2c6 <__divmodhi4_neg1>
 2b8:	77 fd       	sbrc	r23, 7
 2ba:	09 d0       	rcall	.+18     	; 0x2ce <__divmodhi4_neg2>
 2bc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__udivmodhi4>
 2c0:	07 fc       	sbrc	r0, 7
 2c2:	05 d0       	rcall	.+10     	; 0x2ce <__divmodhi4_neg2>
 2c4:	3e f4       	brtc	.+14     	; 0x2d4 <__divmodhi4_exit>

000002c6 <__divmodhi4_neg1>:
 2c6:	90 95       	com	r25
 2c8:	81 95       	neg	r24
 2ca:	9f 4f       	sbci	r25, 0xFF	; 255
 2cc:	08 95       	ret

000002ce <__divmodhi4_neg2>:
 2ce:	70 95       	com	r23
 2d0:	61 95       	neg	r22
 2d2:	7f 4f       	sbci	r23, 0xFF	; 255

000002d4 <__divmodhi4_exit>:
 2d4:	08 95       	ret

000002d6 <__udivmodhi4>:
 2d6:	aa 1b       	sub	r26, r26
 2d8:	bb 1b       	sub	r27, r27
 2da:	51 e1       	ldi	r21, 0x11	; 17
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <__udivmodhi4_ep>

000002de <__udivmodhi4_loop>:
 2de:	aa 1f       	adc	r26, r26
 2e0:	bb 1f       	adc	r27, r27
 2e2:	a6 17       	cp	r26, r22
 2e4:	b7 07       	cpc	r27, r23
 2e6:	10 f0       	brcs	.+4      	; 0x2ec <__udivmodhi4_ep>
 2e8:	a6 1b       	sub	r26, r22
 2ea:	b7 0b       	sbc	r27, r23

000002ec <__udivmodhi4_ep>:
 2ec:	88 1f       	adc	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	5a 95       	dec	r21
 2f2:	a9 f7       	brne	.-22     	; 0x2de <__udivmodhi4_loop>
 2f4:	80 95       	com	r24
 2f6:	90 95       	com	r25
 2f8:	bc 01       	movw	r22, r24
 2fa:	cd 01       	movw	r24, r26
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
