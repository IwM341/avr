
P009MOCUSART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003c6  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  0080010a  0080010a  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f7  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000904  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000484  00000000  00000000  00001f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00002394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e5  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000270  00000000  00000000  00002c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002ee1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  9e:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN4uart14uart_process_rEv>:
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
  a6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZGVZN4uart14uart_process_rEvE1U>
  aa:	81 11       	cpse	r24, r1
  ac:	0f c0       	rjmp	.+30     	; 0xcc <_ZN4uart14uart_process_rEv+0x26>
  ae:	8b e0       	ldi	r24, 0x0B	; 11
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 ac 01 	call	0x358	; 0x358 <__cxa_guard_acquire>
  b6:	89 2b       	or	r24, r25
  b8:	49 f0       	breq	.+18     	; 0xcc <_ZN4uart14uart_process_rEv+0x26>
struct static_queue{
	T buff[_size];
	uint8_t start;
	uint8_t len;
	
	static_queue():start(0),len(0){}
  ba:	e3 e1       	ldi	r30, 0x13	; 19
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	10 a2       	std	Z+32, r1	; 0x20
  c0:	11 a2       	std	Z+33, r1	; 0x21
#include "seg7.h"
/**/
class uart:public IO_process{
	private:
	static_queue<uint8_t,UART_QSIZE > Q;
	uart(){}
  c2:	12 a2       	std	Z+34, r1	; 0x22
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
  c4:	8b e0       	ldi	r24, 0x0B	; 11
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	0e 94 b5 01 	call	0x36a	; 0x36a <__cxa_guard_release>
		return U;
	}
  cc:	83 e1       	ldi	r24, 0x13	; 19
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	08 95       	ret

000000d2 <__vector_20>:
	uart::uart_process_r().data_recieve_interrupt(UDR0);
}


//transmit
ISR (USART_TX_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
  f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZGVZN4uart14uart_process_rEvE1U>
  f8:	81 11       	cpse	r24, r1
  fa:	0f c0       	rjmp	.+30     	; 0x11a <__vector_20+0x48>
  fc:	8b e0       	ldi	r24, 0x0B	; 11
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 ac 01 	call	0x358	; 0x358 <__cxa_guard_acquire>
 104:	89 2b       	or	r24, r25
 106:	49 f0       	breq	.+18     	; 0x11a <__vector_20+0x48>
 108:	e3 e1       	ldi	r30, 0x13	; 19
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	10 a2       	std	Z+32, r1	; 0x20
 10e:	11 a2       	std	Z+33, r1	; 0x21
#include "seg7.h"
/**/
class uart:public IO_process{
	private:
	static_queue<uint8_t,UART_QSIZE > Q;
	uart(){}
 110:	12 a2       	std	Z+34, r1	; 0x22
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 b5 01 	call	0x36a	; 0x36a <__cxa_guard_release>
	
	inline uint8_t size(){
		return _size;
	}
	uint8_t is_empty(){
		return !len;
 11a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_ZZN4uart14uart_process_rEvE1U+0x21>
	uart(uart &&){}
	
	bool transmit_process_on = 0;
	public:
	void transmit_act(){
		if(Q.is_empty()){
 11e:	81 11       	cpse	r24, r1
 120:	03 c0       	rjmp	.+6      	; 0x128 <__vector_20+0x56>
			transmit_process_on = 0;
 122:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <_ZZN4uart14uart_process_rEvE1U+0x22>
 126:	17 c0       	rjmp	.+46     	; 0x156 <__vector_20+0x84>
		}
		else if(transmit_process_on){
 128:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <_ZZN4uart14uart_process_rEvE1U+0x22>
 12c:	99 23       	and	r25, r25
 12e:	99 f0       	breq	.+38     	; 0x156 <__vector_20+0x84>
	}
	uint8_t is_full(){
		return len >= _size;
	}
	T pop(){
		len --;
 130:	a3 e1       	ldi	r26, 0x13	; 19
 132:	b1 e0       	ldi	r27, 0x01	; 1
 134:	81 50       	subi	r24, 0x01	; 1
 136:	91 96       	adiw	r26, 0x21	; 33
 138:	8c 93       	st	X, r24
 13a:	91 97       	sbiw	r26, 0x21	; 33
		return buff[start++];
 13c:	90 96       	adiw	r26, 0x20	; 32
 13e:	ec 91       	ld	r30, X
 140:	90 97       	sbiw	r26, 0x20	; 32
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	8e 0f       	add	r24, r30
 146:	90 96       	adiw	r26, 0x20	; 32
 148:	8c 93       	st	X, r24
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ed 5e       	subi	r30, 0xED	; 237
 14e:	fe 4f       	sbci	r31, 0xFE	; 254
 150:	80 81       	ld	r24, Z
			UDR0 = Q.pop();
 152:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>


//transmit
ISR (USART_TX_vect){
	uart::uart_process_r().transmit_act();
}
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <_Z7set7segh>:
#include "../../framework/uart_process.hpp"
#include "../../framework/seg7.h"
#include "../../framework/ports.h"

void set7seg(uint8_t m_digit){
	uint16_t seg7 = m_digit << 2;
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
	set_port(PORTD,0b11111100,seg7);
 182:	3b b1       	in	r19, 0x0b	; 11
 184:	33 70       	andi	r19, 0x03	; 3
 186:	28 2f       	mov	r18, r24
 188:	2c 7f       	andi	r18, 0xFC	; 252
 18a:	83 2f       	mov	r24, r19
 18c:	82 2b       	or	r24, r18
 18e:	8b b9       	out	0x0b, r24	; 11
	set_port(PORTB,0b00000001,seg7>>8);
 190:	85 b1       	in	r24, 0x05	; 5
 192:	8e 7f       	andi	r24, 0xFE	; 254
 194:	91 70       	andi	r25, 0x01	; 1
 196:	89 2b       	or	r24, r25
 198:	85 b9       	out	0x05, r24	; 5
 19a:	08 95       	ret

0000019c <__vector_18>:
	slot inline void data_recieve_interrupt(uint8_t data);
	//recieve
	
};

ISR (USART_RX_vect){
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	cf 93       	push	r28
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	uart::uart_process_r().data_recieve_interrupt(UDR0);
 1c0:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
 1c4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZGVZN4uart14uart_process_rEvE1U>
 1c8:	81 11       	cpse	r24, r1
 1ca:	0f c0       	rjmp	.+30     	; 0x1ea <__vector_18+0x4e>
 1cc:	8b e0       	ldi	r24, 0x0B	; 11
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 ac 01 	call	0x358	; 0x358 <__cxa_guard_acquire>
 1d4:	89 2b       	or	r24, r25
 1d6:	49 f0       	breq	.+18     	; 0x1ea <__vector_18+0x4e>
struct static_queue{
	T buff[_size];
	uint8_t start;
	uint8_t len;
	
	static_queue():start(0),len(0){}
 1d8:	e3 e1       	ldi	r30, 0x13	; 19
 1da:	f1 e0       	ldi	r31, 0x01	; 1
 1dc:	10 a2       	std	Z+32, r1	; 0x20
 1de:	11 a2       	std	Z+33, r1	; 0x21
#include "seg7.h"
/**/
class uart:public IO_process{
	private:
	static_queue<uint8_t,UART_QSIZE > Q;
	uart(){}
 1e0:	12 a2       	std	Z+34, r1	; 0x22
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
 1e2:	8b e0       	ldi	r24, 0x0B	; 11
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 b5 01 	call	0x36a	; 0x36a <__cxa_guard_release>
 1ea:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZGVZN4uart14uart_process_rEvE1U>
 1ee:	81 11       	cpse	r24, r1
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <__vector_18+0x74>
 1f2:	8b e0       	ldi	r24, 0x0B	; 11
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 ac 01 	call	0x358	; 0x358 <__cxa_guard_acquire>
 1fa:	89 2b       	or	r24, r25
 1fc:	49 f0       	breq	.+18     	; 0x210 <__vector_18+0x74>
 1fe:	e3 e1       	ldi	r30, 0x13	; 19
 200:	f1 e0       	ldi	r31, 0x01	; 1
 202:	10 a2       	std	Z+32, r1	; 0x20
 204:	11 a2       	std	Z+33, r1	; 0x21
#include "seg7.h"
/**/
class uart:public IO_process{
	private:
	static_queue<uint8_t,UART_QSIZE > Q;
	uart(){}
 206:	12 a2       	std	Z+34, r1	; 0x22
	}
	
	public:
	
	static uart & uart_process_r(){
		static uart U;
 208:	8b e0       	ldi	r24, 0x0B	; 11
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 b5 01 	call	0x36a	; 0x36a <__cxa_guard_release>
	}
	uint8_t is_empty(){
		return !len;
	}
	uint8_t is_full(){
		return len >= _size;
 210:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <_ZZN4uart14uart_process_rEvE1U+0x21>
		UCSR0C = 0;
	}

	
	bool write(uint8_t c){
		if(Q.is_full()){
 214:	e0 32       	cpi	r30, 0x20	; 32
 216:	a8 f0       	brcs	.+42     	; 0x242 <__vector_18+0xa6>
			set7seg(digit[Q.len%10]);
 218:	8d ec       	ldi	r24, 0xCD	; 205
 21a:	e8 9f       	mul	r30, r24
 21c:	81 2d       	mov	r24, r1
 21e:	11 24       	eor	r1, r1
 220:	86 95       	lsr	r24
 222:	86 95       	lsr	r24
 224:	86 95       	lsr	r24
 226:	88 0f       	add	r24, r24
 228:	98 2f       	mov	r25, r24
 22a:	99 0f       	add	r25, r25
 22c:	99 0f       	add	r25, r25
 22e:	89 0f       	add	r24, r25
 230:	e8 1b       	sub	r30, r24
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	e0 50       	subi	r30, 0x00	; 0
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	80 81       	ld	r24, Z
 23a:	0e 94 bc 00 	call	0x178	; 0x178 <_Z7set7segh>
			return false;
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	39 c0       	rjmp	.+114    	; 0x2b4 <__vector_18+0x118>
		len --;
		return buff[start++];
		
	}
	void push(T value){
		uint8_t last = (start + (uint16_t)len)%_size;
 242:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_ZZN4uart14uart_process_rEvE1U+0x20>
 246:	9e 2f       	mov	r25, r30
 248:	98 0f       	add	r25, r24
 24a:	9f 71       	andi	r25, 0x1F	; 31
		if(len == 0 || last != start){
 24c:	ee 23       	and	r30, r30
 24e:	11 f0       	breq	.+4      	; 0x254 <__vector_18+0xb8>
 250:	89 17       	cp	r24, r25
 252:	41 f0       	breq	.+16     	; 0x264 <__vector_18+0xc8>
			len ++;
 254:	ef 5f       	subi	r30, 0xFF	; 255
 256:	e0 93 34 01 	sts	0x0134, r30	; 0x800134 <_ZZN4uart14uart_process_rEvE1U+0x21>
			buff[last] = value;
 25a:	e9 2f       	mov	r30, r25
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ed 5e       	subi	r30, 0xED	; 237
 260:	fe 4f       	sbci	r31, 0xFE	; 254
 262:	c0 83       	st	Z, r28
			UDR0 = Q.pop();
		}
	}
	private:
	void enable_transmit(){
		cli();
 264:	f8 94       	cli
		if(!transmit_process_on){
 266:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <_ZZN4uart14uart_process_rEvE1U+0x22>
 26a:	81 11       	cpse	r24, r1
 26c:	21 c0       	rjmp	.+66     	; 0x2b0 <__vector_18+0x114>
			transmit_process_on = 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_ZZN4uart14uart_process_rEvE1U+0x22>
			if(UCSR0A & (1<<UDRE0)){
 274:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 278:	85 ff       	sbrs	r24, 5
 27a:	1a c0       	rjmp	.+52     	; 0x2b0 <__vector_18+0x114>
	
	inline uint8_t size(){
		return _size;
	}
	uint8_t is_empty(){
		return !len;
 27c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_ZZN4uart14uart_process_rEvE1U+0x21>
	uart(uart &&){}
	
	bool transmit_process_on = 0;
	public:
	void transmit_act(){
		if(Q.is_empty()){
 280:	81 11       	cpse	r24, r1
 282:	03 c0       	rjmp	.+6      	; 0x28a <__vector_18+0xee>
			transmit_process_on = 0;
 284:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <_ZZN4uart14uart_process_rEvE1U+0x22>
 288:	13 c0       	rjmp	.+38     	; 0x2b0 <__vector_18+0x114>
	}
	uint8_t is_full(){
		return len >= _size;
	}
	T pop(){
		len --;
 28a:	a3 e1       	ldi	r26, 0x13	; 19
 28c:	b1 e0       	ldi	r27, 0x01	; 1
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	91 96       	adiw	r26, 0x21	; 33
 292:	8c 93       	st	X, r24
 294:	91 97       	sbiw	r26, 0x21	; 33
		return buff[start++];
 296:	90 96       	adiw	r26, 0x20	; 32
 298:	ec 91       	ld	r30, X
 29a:	90 97       	sbiw	r26, 0x20	; 32
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	8e 0f       	add	r24, r30
 2a0:	90 96       	adiw	r26, 0x20	; 32
 2a2:	8c 93       	st	X, r24
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	ed 5e       	subi	r30, 0xED	; 237
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	80 81       	ld	r24, Z
		}
		else if(transmit_process_on){
			UDR0 = Q.pop();
 2ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			if(UCSR0A & (1<<UDRE0)){
				//PORTB = ~PORTB;
				transmit_act();
			}
		}
		sei();
 2b0:	78 94       	sei
			return false;
		}
		else{
			Q.push(c);
			enable_transmit();
			return true;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
}

bool blink = false;

void uart::data_recieve_interrupt(uint8_t data){
	if(!uart::uart_process_r().write(data)){
 2b4:	81 11       	cpse	r24, r1
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <__vector_18+0x124>
		blink = true;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 2be:	0d c0       	rjmp	.+26     	; 0x2da <__vector_18+0x13e>
	}
	else{
		set7seg( digit[(data-'0')%10]);
 2c0:	8c 2f       	mov	r24, r28
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	c0 97       	sbiw	r24, 0x30	; 48
 2c6:	6a e0       	ldi	r22, 0x0A	; 10
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	0e 94 b9 01 	call	0x372	; 0x372 <__divmodhi4>
 2ce:	fc 01       	movw	r30, r24
 2d0:	e0 50       	subi	r30, 0x00	; 0
 2d2:	ff 4f       	sbci	r31, 0xFF	; 255
 2d4:	80 81       	ld	r24, Z
 2d6:	0e 94 bc 00 	call	0x178	; 0x178 <_Z7set7segh>
	
};

ISR (USART_RX_vect){
	uart::uart_process_r().data_recieve_interrupt(UDR0);
}
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	cf 91       	pop	r28
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <main>:
	}
}

int main(void)
{
    DDRB = 0xFF;
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	84 b9       	out	0x04, r24	; 4
    set_port(DDRD,0b11111100,0xFF);
 302:	8a b1       	in	r24, 0x0a	; 10
 304:	8c 6f       	ori	r24, 0xFC	; 252
 306:	8a b9       	out	0x0a, r24	; 10
    sei();
 308:	78 94       	sei
	uart::uart_process_r().open(16,false);
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN4uart14uart_process_rEv>
	
	static constexpr uint16_t defineUBBRn(uint32_t speed, bool double_speed){
		return ((double_speed+1)*F_CPU)/16 - 1;
	}
	void open(uint16_t UBBRn = 16,bool double_speed = false){
		UBRR0H = (unsigned char)(UBBRn>>8);
 30e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		UBRR0L = (unsigned char)UBBRn;
 312:	80 e1       	ldi	r24, 0x10	; 16
 314:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		
		if(double_speed){
			UCSR0A |= (1<<U2X0); // удвоение скорости
		}
		// UCSRnB:
		UCSR0B = (1<<RXEN0)|( 1<<TXEN0); //Включаем прием и передачу по USART
 318:	e1 ec       	ldi	r30, 0xC1	; 193
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	88 e1       	ldi	r24, 0x18	; 24
 31e:	80 83       	st	Z, r24
		UCSR0B |= (1<<RXCIE0) | (1<<TXCIE0); //Разрешаем прерывание при  приеме и передаче
 320:	80 81       	ld	r24, Z
 322:	80 6c       	ori	r24, 0xC0	; 192
 324:	80 83       	st	Z, r24
		//UCSZn2 = 1 для 9 бит
		
		UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);// Обращаемся именно к регистру UCSRnC,
 326:	8e e0       	ldi	r24, 0x0E	; 14
 328:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	
    while (1) 
    {
		if(blink){
 32c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 330:	88 23       	and	r24, r24
 332:	e1 f3       	breq	.-8      	; 0x32c <main+0x2e>
			set_port(PORTB,1<<PORTB5,0xFF);
 334:	85 b1       	in	r24, 0x05	; 5
 336:	80 62       	ori	r24, 0x20	; 32
 338:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	83 ed       	ldi	r24, 0xD3	; 211
 33e:	90 e3       	ldi	r25, 0x30	; 48
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x42>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x4c>
 34a:	00 00       	nop
			_delay_ms(1000);
			set_port(PORTB,1<<PORTB5,0x00);
 34c:	85 b1       	in	r24, 0x05	; 5
 34e:	8f 7d       	andi	r24, 0xDF	; 223
 350:	85 b9       	out	0x05, r24	; 5
			blink = false;
 352:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 356:	ea cf       	rjmp	.-44     	; 0x32c <main+0x2e>

00000358 <__cxa_guard_acquire>:
 358:	fc 01       	movw	r30, r24
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	20 81       	ld	r18, Z
 360:	22 23       	and	r18, r18
 362:	11 f0       	breq	.+4      	; 0x368 <__cxa_guard_acquire+0x10>
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	08 95       	ret

0000036a <__cxa_guard_release>:
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	fc 01       	movw	r30, r24
 36e:	20 83       	st	Z, r18
 370:	08 95       	ret

00000372 <__divmodhi4>:
 372:	97 fb       	bst	r25, 7
 374:	07 2e       	mov	r0, r23
 376:	16 f4       	brtc	.+4      	; 0x37c <__divmodhi4+0xa>
 378:	00 94       	com	r0
 37a:	07 d0       	rcall	.+14     	; 0x38a <__divmodhi4_neg1>
 37c:	77 fd       	sbrc	r23, 7
 37e:	09 d0       	rcall	.+18     	; 0x392 <__divmodhi4_neg2>
 380:	0e 94 cd 01 	call	0x39a	; 0x39a <__udivmodhi4>
 384:	07 fc       	sbrc	r0, 7
 386:	05 d0       	rcall	.+10     	; 0x392 <__divmodhi4_neg2>
 388:	3e f4       	brtc	.+14     	; 0x398 <__divmodhi4_exit>

0000038a <__divmodhi4_neg1>:
 38a:	90 95       	com	r25
 38c:	81 95       	neg	r24
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	08 95       	ret

00000392 <__divmodhi4_neg2>:
 392:	70 95       	com	r23
 394:	61 95       	neg	r22
 396:	7f 4f       	sbci	r23, 0xFF	; 255

00000398 <__divmodhi4_exit>:
 398:	08 95       	ret

0000039a <__udivmodhi4>:
 39a:	aa 1b       	sub	r26, r26
 39c:	bb 1b       	sub	r27, r27
 39e:	51 e1       	ldi	r21, 0x11	; 17
 3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <__udivmodhi4_ep>

000003a2 <__udivmodhi4_loop>:
 3a2:	aa 1f       	adc	r26, r26
 3a4:	bb 1f       	adc	r27, r27
 3a6:	a6 17       	cp	r26, r22
 3a8:	b7 07       	cpc	r27, r23
 3aa:	10 f0       	brcs	.+4      	; 0x3b0 <__udivmodhi4_ep>
 3ac:	a6 1b       	sub	r26, r22
 3ae:	b7 0b       	sbc	r27, r23

000003b0 <__udivmodhi4_ep>:
 3b0:	88 1f       	adc	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	5a 95       	dec	r21
 3b6:	a9 f7       	brne	.-22     	; 0x3a2 <__udivmodhi4_loop>
 3b8:	80 95       	com	r24
 3ba:	90 95       	com	r25
 3bc:	bc 01       	movw	r22, r24
 3be:	cd 01       	movw	r24, r26
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
