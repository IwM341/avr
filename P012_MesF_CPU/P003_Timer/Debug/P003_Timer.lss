
P003_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079d  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fc  00000000  00000000  00000a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cf  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000173  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  88:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <segchar>:

unsigned char i;

void segchar (unsigned char seg)
{
	unsigned char d = seg%10;
  90:	9d ec       	ldi	r25, 0xCD	; 205
  92:	89 9f       	mul	r24, r25
  94:	91 2d       	mov	r25, r1
  96:	11 24       	eor	r1, r1
  98:	96 95       	lsr	r25
  9a:	96 95       	lsr	r25
  9c:	96 95       	lsr	r25
  9e:	99 0f       	add	r25, r25
  a0:	29 2f       	mov	r18, r25
  a2:	22 0f       	add	r18, r18
  a4:	22 0f       	add	r18, r18
  a6:	92 0f       	add	r25, r18
  a8:	89 1b       	sub	r24, r25
  aa:	98 2f       	mov	r25, r24
	set_port(PORTD,0b00001111,d);
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	9f 70       	andi	r25, 0x0F	; 15
  b0:	98 2b       	or	r25, r24
  b2:	9b b9       	out	0x0b, r25	; 11
  b4:	08 95       	ret

000000b6 <timer_ini>:
}

void timer_ini(void)
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
  b6:	e1 e8       	ldi	r30, 0x81	; 129
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
  c0:	af e6       	ldi	r26, 0x6F	; 111
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	8c 91       	ld	r24, X
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8c 93       	st	X, r24
	OCR1AH = 0b00000010; //записываем в регистр число для сравнения
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 0b00010010;
  d0:	82 e1       	ldi	r24, 0x12	; 18
  d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1<<CS12);//установим делитель.
  d6:	80 81       	ld	r24, Z
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <__vector_11>:
}


ISR (TIMER1_COMPA_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	if(i>9) {
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	8a 30       	cpi	r24, 0x0A	; 10
 106:	10 f0       	brcs	.+4      	; 0x10c <__vector_11+0x2e>
		i=0;
 108:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	set_port(PORTB,1<<PORTB5,0xFF);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	82 e5       	ldi	r24, 0x52	; 82
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <__vector_11+0x3a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__vector_11+0x44>
 122:	00 00       	nop
	_delay_ms(300);
	set_port(PORTB,1<<PORTB5,0x00);
 124:	85 b1       	in	r24, 0x05	; 5
 126:	85 b9       	out	0x05, r24	; 5
	segchar(i);
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	0e 94 48 00 	call	0x90	; 0x90 <segchar>
	i++;
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:


int main(void)
{
    timer_ini();
 15c:	0e 94 5b 00 	call	0xb6	; 0xb6 <timer_ini>
    DDRD = 0xFF;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0x00;
 164:	14 b8       	out	0x04, r1	; 4
	set_port(DDRB,1<<PORTB5,0xFF);
 166:	84 b1       	in	r24, 0x04	; 4
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	84 b9       	out	0x04, r24	; 4
    PORTB = 0b00000001;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	85 b9       	out	0x05, r24	; 5
	segchar(5);
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	0e 94 48 00 	call	0x90	; 0x90 <segchar>
    i=0b10101010;
 176:	8a ea       	ldi	r24, 0xAA	; 170
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    sei();
 17c:	78 94       	sei
}
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
