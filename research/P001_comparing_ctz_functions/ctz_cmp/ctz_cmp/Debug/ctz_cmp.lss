
ctz_cmp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000044a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000044a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088c  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000750  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034d  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ad  00000000  00000000  00001ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  88:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:
	: [temp] "=r" (temp)
	: [input] "r" (x)
	);

	return temp;
}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <main>:
	end:
	return result;
}

int main(void)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	2f 97       	sbiw	r28, 0x0f	; 15
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
	volatile int __cycl;
	sei();
  d2:	78 94       	sei

volatile static uint16_t full_count;
void timer_ini(void)
{
	//TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
	full_count = 0;
  d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	TIMSK1 |= (1<<TOIE1);	// Overflow Interrupt Enable
  dc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B |= (1<<CS10);//установим делитель.
  e6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1L = 0;
  f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCNT1H = 0;
  f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
{
	full_count++;
}

uint32_t m_clock(){
	uint32_t result = 0;
  f8:	19 82       	std	Y+1, r1	; 0x01
  fa:	1a 82       	std	Y+2, r1	; 0x02
  fc:	1b 82       	std	Y+3, r1	; 0x03
  fe:	1c 82       	std	Y+4, r1	; 0x04
	
	reinterpret_cast<uint8_t*>(&result)[0] = TCNT1L;
 100:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 104:	89 83       	std	Y+1, r24	; 0x01
	reinterpret_cast<uint8_t*>(&result)[1] = TCNT1H;
 106:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 10a:	8a 83       	std	Y+2, r24	; 0x02
	reinterpret_cast<uint16_t*>(&result)[2] = full_count;
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 114:	9e 83       	std	Y+6, r25	; 0x06
 116:	8d 83       	std	Y+5, r24	; 0x05
	return result;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	ab 81       	ldd	r26, Y+3	; 0x03
 11e:	bc 81       	ldd	r27, Y+4	; 0x04
	sei();
    timer_ini();
	
	uint8_t test_data = 0;
	
	volatile uint32_t t0 = m_clock();
 120:	89 87       	std	Y+9, r24	; 0x09
 122:	9a 87       	std	Y+10, r25	; 0x0a
 124:	ab 87       	std	Y+11, r26	; 0x0b
 126:	bc 87       	std	Y+12, r27	; 0x0c
{
	volatile int __cycl;
	sei();
    timer_ini();
	
	uint8_t test_data = 0;
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	14 c0       	rjmp	.+40     	; 0x154 <main+0x96>
		//x = x >> 4;
		
		asm(
			"swap %0"
			:"=r" (x) : "0" (x) :
		);
 12c:	82 2f       	mov	r24, r18
 12e:	82 95       	swap	r24
		
		cnt += 4;
 130:	34 e0       	ldi	r19, 0x04	; 4
	}
	if(!(x & i2)){
 132:	98 2f       	mov	r25, r24
 134:	93 70       	andi	r25, 0x03	; 3
 136:	b1 f4       	brne	.+44     	; 0x164 <main+0xa6>
		x = x >> 2;
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	95 95       	asr	r25
 140:	87 95       	ror	r24
		cnt += 2;
 142:	3e 5f       	subi	r19, 0xFE	; 254
	}
	if(x & i3){
 144:	80 fd       	sbrc	r24, 0
 146:	03 c0       	rjmp	.+6      	; 0x14e <main+0x90>
		return cnt;
	}
	else {
		if(x)
 148:	81 11       	cpse	r24, r1
 14a:	0e c0       	rjmp	.+28     	; 0x168 <main+0xaa>
			return cnt + 1;
		else
			return 8;
 14c:	38 e0       	ldi	r19, 0x08	; 8
	
	volatile uint32_t t0 = m_clock();
	volatile uint8_t result;
	
	do{
		result = my_ctz(test_data);
 14e:	3f 87       	std	Y+15, r19	; 0x0f
		test_data++;
 150:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t test_data = 0;
	
	volatile uint32_t t0 = m_clock();
	volatile uint8_t result;
	
	do{
 152:	71 f0       	breq	.+28     	; 0x170 <main+0xb2>
	#define i1  0b00001111
	#define i2  0b00000011
	#define i3  0b00000001
	
	uint8_t cnt = 0;
	if( !(x & i1)){
 154:	82 2f       	mov	r24, r18
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	49 f3       	breq	.-46     	; 0x12c <main+0x6e>
 15a:	82 2f       	mov	r24, r18
inline uint8_t my_ctz(uint8_t x){
	#define i1  0b00001111
	#define i2  0b00000011
	#define i3  0b00000001
	
	uint8_t cnt = 0;
 15c:	30 e0       	ldi	r19, 0x00	; 0
			:"=r" (x) : "0" (x) :
		);
		
		cnt += 4;
	}
	if(!(x & i2)){
 15e:	98 2f       	mov	r25, r24
 160:	93 70       	andi	r25, 0x03	; 3
 162:	51 f3       	breq	.-44     	; 0x138 <main+0x7a>
		x = x >> 2;
		cnt += 2;
	}
	if(x & i3){
 164:	80 fd       	sbrc	r24, 0
 166:	f3 cf       	rjmp	.-26     	; 0x14e <main+0x90>
		return cnt;
	}
	else {
		if(x)
			return cnt + 1;
 168:	3f 5f       	subi	r19, 0xFF	; 255
	
	volatile uint32_t t0 = m_clock();
	volatile uint8_t result;
	
	do{
		result = my_ctz(test_data);
 16a:	3f 87       	std	Y+15, r19	; 0x0f
		test_data++;
 16c:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t test_data = 0;
	
	volatile uint32_t t0 = m_clock();
	volatile uint8_t result;
	
	do{
 16e:	91 f7       	brne	.-28     	; 0x154 <main+0x96>
{
	full_count++;
}

uint32_t m_clock(){
	uint32_t result = 0;
 170:	19 82       	std	Y+1, r1	; 0x01
 172:	1a 82       	std	Y+2, r1	; 0x02
 174:	1b 82       	std	Y+3, r1	; 0x03
 176:	1c 82       	std	Y+4, r1	; 0x04
	
	reinterpret_cast<uint8_t*>(&result)[0] = TCNT1L;
 178:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 17c:	89 83       	std	Y+1, r24	; 0x01
	reinterpret_cast<uint8_t*>(&result)[1] = TCNT1H;
 17e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 182:	8a 83       	std	Y+2, r24	; 0x02
	reinterpret_cast<uint16_t*>(&result)[2] = full_count;
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	return result;
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	9a 81       	ldd	r25, Y+2	; 0x02
 190:	ab 81       	ldd	r26, Y+3	; 0x03
 192:	bc 81       	ldd	r27, Y+4	; 0x04
	do{
		result = my_ctz(test_data);
		test_data++;
	} while (test_data);
	
	volatile uint32_t t1 = m_clock();
 194:	8d 83       	std	Y+5, r24	; 0x05
 196:	9e 83       	std	Y+6, r25	; 0x06
 198:	af 83       	std	Y+7, r26	; 0x07
 19a:	b8 87       	std	Y+8, r27	; 0x08
	
	volatile float av_delta = (t1-t0)/256.0;
 19c:	8d 81       	ldd	r24, Y+5	; 0x05
 19e:	9e 81       	ldd	r25, Y+6	; 0x06
 1a0:	af 81       	ldd	r26, Y+7	; 0x07
 1a2:	b8 85       	ldd	r27, Y+8	; 0x08
 1a4:	09 85       	ldd	r16, Y+9	; 0x09
 1a6:	1a 85       	ldd	r17, Y+10	; 0x0a
 1a8:	2b 85       	ldd	r18, Y+11	; 0x0b
 1aa:	3c 85       	ldd	r19, Y+12	; 0x0c
 1ac:	bc 01       	movw	r22, r24
 1ae:	cd 01       	movw	r24, r26
 1b0:	60 1b       	sub	r22, r16
 1b2:	71 0b       	sbc	r23, r17
 1b4:	82 0b       	sbc	r24, r18
 1b6:	93 0b       	sbc	r25, r19
 1b8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__floatunsisf>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e8       	ldi	r20, 0x80	; 128
 1c2:	5b e3       	ldi	r21, 0x3B	; 59
 1c4:	0e 94 2b 01 	call	0x256	; 0x256 <__mulsf3>
 1c8:	69 83       	std	Y+1, r22	; 0x01
 1ca:	7a 83       	std	Y+2, r23	; 0x02
 1cc:	8b 83       	std	Y+3, r24	; 0x03
 1ce:	9c 83       	std	Y+4, r25	; 0x04
	
    while (1) 
    {
		__cycl++;
 1d0:	8d 85       	ldd	r24, Y+13	; 0x0d
 1d2:	9e 85       	ldd	r25, Y+14	; 0x0e
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	9e 87       	std	Y+14, r25	; 0x0e
 1d8:	8d 87       	std	Y+13, r24	; 0x0d
 1da:	fa cf       	rjmp	.-12     	; 0x1d0 <main+0x112>

000001dc <__floatunsisf>:
 1dc:	e8 94       	clt
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <__floatsisf+0x12>

000001e0 <__floatsisf>:
 1e0:	97 fb       	bst	r25, 7
 1e2:	3e f4       	brtc	.+14     	; 0x1f2 <__floatsisf+0x12>
 1e4:	90 95       	com	r25
 1e6:	80 95       	com	r24
 1e8:	70 95       	com	r23
 1ea:	61 95       	neg	r22
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	8f 4f       	sbci	r24, 0xFF	; 255
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	99 23       	and	r25, r25
 1f4:	a9 f0       	breq	.+42     	; 0x220 <__floatsisf+0x40>
 1f6:	f9 2f       	mov	r31, r25
 1f8:	96 e9       	ldi	r25, 0x96	; 150
 1fa:	bb 27       	eor	r27, r27
 1fc:	93 95       	inc	r25
 1fe:	f6 95       	lsr	r31
 200:	87 95       	ror	r24
 202:	77 95       	ror	r23
 204:	67 95       	ror	r22
 206:	b7 95       	ror	r27
 208:	f1 11       	cpse	r31, r1
 20a:	f8 cf       	rjmp	.-16     	; 0x1fc <__floatsisf+0x1c>
 20c:	fa f4       	brpl	.+62     	; 0x24c <__floatsisf+0x6c>
 20e:	bb 0f       	add	r27, r27
 210:	11 f4       	brne	.+4      	; 0x216 <__floatsisf+0x36>
 212:	60 ff       	sbrs	r22, 0
 214:	1b c0       	rjmp	.+54     	; 0x24c <__floatsisf+0x6c>
 216:	6f 5f       	subi	r22, 0xFF	; 255
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	8f 4f       	sbci	r24, 0xFF	; 255
 21c:	9f 4f       	sbci	r25, 0xFF	; 255
 21e:	16 c0       	rjmp	.+44     	; 0x24c <__floatsisf+0x6c>
 220:	88 23       	and	r24, r24
 222:	11 f0       	breq	.+4      	; 0x228 <__floatsisf+0x48>
 224:	96 e9       	ldi	r25, 0x96	; 150
 226:	11 c0       	rjmp	.+34     	; 0x24a <__floatsisf+0x6a>
 228:	77 23       	and	r23, r23
 22a:	21 f0       	breq	.+8      	; 0x234 <__floatsisf+0x54>
 22c:	9e e8       	ldi	r25, 0x8E	; 142
 22e:	87 2f       	mov	r24, r23
 230:	76 2f       	mov	r23, r22
 232:	05 c0       	rjmp	.+10     	; 0x23e <__floatsisf+0x5e>
 234:	66 23       	and	r22, r22
 236:	71 f0       	breq	.+28     	; 0x254 <__floatsisf+0x74>
 238:	96 e8       	ldi	r25, 0x86	; 134
 23a:	86 2f       	mov	r24, r22
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	2a f0       	brmi	.+10     	; 0x24c <__floatsisf+0x6c>
 242:	9a 95       	dec	r25
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	88 1f       	adc	r24, r24
 24a:	da f7       	brpl	.-10     	; 0x242 <__floatsisf+0x62>
 24c:	88 0f       	add	r24, r24
 24e:	96 95       	lsr	r25
 250:	87 95       	ror	r24
 252:	97 f9       	bld	r25, 7
 254:	08 95       	ret

00000256 <__mulsf3>:
 256:	0e 94 3e 01 	call	0x27c	; 0x27c <__mulsf3x>
 25a:	0c 94 af 01 	jmp	0x35e	; 0x35e <__fp_round>
 25e:	0e 94 a1 01 	call	0x342	; 0x342 <__fp_pscA>
 262:	38 f0       	brcs	.+14     	; 0x272 <__mulsf3+0x1c>
 264:	0e 94 a8 01 	call	0x350	; 0x350 <__fp_pscB>
 268:	20 f0       	brcs	.+8      	; 0x272 <__mulsf3+0x1c>
 26a:	95 23       	and	r25, r21
 26c:	11 f0       	breq	.+4      	; 0x272 <__mulsf3+0x1c>
 26e:	0c 94 98 01 	jmp	0x330	; 0x330 <__fp_inf>
 272:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__fp_nan>
 276:	11 24       	eor	r1, r1
 278:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__fp_szero>

0000027c <__mulsf3x>:
 27c:	0e 94 c0 01 	call	0x380	; 0x380 <__fp_split3>
 280:	70 f3       	brcs	.-36     	; 0x25e <__mulsf3+0x8>

00000282 <__mulsf3_pse>:
 282:	95 9f       	mul	r25, r21
 284:	c1 f3       	breq	.-16     	; 0x276 <__mulsf3+0x20>
 286:	95 0f       	add	r25, r21
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	55 1f       	adc	r21, r21
 28c:	62 9f       	mul	r22, r18
 28e:	f0 01       	movw	r30, r0
 290:	72 9f       	mul	r23, r18
 292:	bb 27       	eor	r27, r27
 294:	f0 0d       	add	r31, r0
 296:	b1 1d       	adc	r27, r1
 298:	63 9f       	mul	r22, r19
 29a:	aa 27       	eor	r26, r26
 29c:	f0 0d       	add	r31, r0
 29e:	b1 1d       	adc	r27, r1
 2a0:	aa 1f       	adc	r26, r26
 2a2:	64 9f       	mul	r22, r20
 2a4:	66 27       	eor	r22, r22
 2a6:	b0 0d       	add	r27, r0
 2a8:	a1 1d       	adc	r26, r1
 2aa:	66 1f       	adc	r22, r22
 2ac:	82 9f       	mul	r24, r18
 2ae:	22 27       	eor	r18, r18
 2b0:	b0 0d       	add	r27, r0
 2b2:	a1 1d       	adc	r26, r1
 2b4:	62 1f       	adc	r22, r18
 2b6:	73 9f       	mul	r23, r19
 2b8:	b0 0d       	add	r27, r0
 2ba:	a1 1d       	adc	r26, r1
 2bc:	62 1f       	adc	r22, r18
 2be:	83 9f       	mul	r24, r19
 2c0:	a0 0d       	add	r26, r0
 2c2:	61 1d       	adc	r22, r1
 2c4:	22 1f       	adc	r18, r18
 2c6:	74 9f       	mul	r23, r20
 2c8:	33 27       	eor	r19, r19
 2ca:	a0 0d       	add	r26, r0
 2cc:	61 1d       	adc	r22, r1
 2ce:	23 1f       	adc	r18, r19
 2d0:	84 9f       	mul	r24, r20
 2d2:	60 0d       	add	r22, r0
 2d4:	21 1d       	adc	r18, r1
 2d6:	82 2f       	mov	r24, r18
 2d8:	76 2f       	mov	r23, r22
 2da:	6a 2f       	mov	r22, r26
 2dc:	11 24       	eor	r1, r1
 2de:	9f 57       	subi	r25, 0x7F	; 127
 2e0:	50 40       	sbci	r21, 0x00	; 0
 2e2:	9a f0       	brmi	.+38     	; 0x30a <__mulsf3_pse+0x88>
 2e4:	f1 f0       	breq	.+60     	; 0x322 <__mulsf3_pse+0xa0>
 2e6:	88 23       	and	r24, r24
 2e8:	4a f0       	brmi	.+18     	; 0x2fc <__mulsf3_pse+0x7a>
 2ea:	ee 0f       	add	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	bb 1f       	adc	r27, r27
 2f0:	66 1f       	adc	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	88 1f       	adc	r24, r24
 2f6:	91 50       	subi	r25, 0x01	; 1
 2f8:	50 40       	sbci	r21, 0x00	; 0
 2fa:	a9 f7       	brne	.-22     	; 0x2e6 <__mulsf3_pse+0x64>
 2fc:	9e 3f       	cpi	r25, 0xFE	; 254
 2fe:	51 05       	cpc	r21, r1
 300:	80 f0       	brcs	.+32     	; 0x322 <__mulsf3_pse+0xa0>
 302:	0c 94 98 01 	jmp	0x330	; 0x330 <__fp_inf>
 306:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__fp_szero>
 30a:	5f 3f       	cpi	r21, 0xFF	; 255
 30c:	e4 f3       	brlt	.-8      	; 0x306 <__mulsf3_pse+0x84>
 30e:	98 3e       	cpi	r25, 0xE8	; 232
 310:	d4 f3       	brlt	.-12     	; 0x306 <__mulsf3_pse+0x84>
 312:	86 95       	lsr	r24
 314:	77 95       	ror	r23
 316:	67 95       	ror	r22
 318:	b7 95       	ror	r27
 31a:	f7 95       	ror	r31
 31c:	e7 95       	ror	r30
 31e:	9f 5f       	subi	r25, 0xFF	; 255
 320:	c1 f7       	brne	.-16     	; 0x312 <__mulsf3_pse+0x90>
 322:	fe 2b       	or	r31, r30
 324:	88 0f       	add	r24, r24
 326:	91 1d       	adc	r25, r1
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	97 f9       	bld	r25, 7
 32e:	08 95       	ret

00000330 <__fp_inf>:
 330:	97 f9       	bld	r25, 7
 332:	9f 67       	ori	r25, 0x7F	; 127
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	08 95       	ret

0000033c <__fp_nan>:
 33c:	9f ef       	ldi	r25, 0xFF	; 255
 33e:	80 ec       	ldi	r24, 0xC0	; 192
 340:	08 95       	ret

00000342 <__fp_pscA>:
 342:	00 24       	eor	r0, r0
 344:	0a 94       	dec	r0
 346:	16 16       	cp	r1, r22
 348:	17 06       	cpc	r1, r23
 34a:	18 06       	cpc	r1, r24
 34c:	09 06       	cpc	r0, r25
 34e:	08 95       	ret

00000350 <__fp_pscB>:
 350:	00 24       	eor	r0, r0
 352:	0a 94       	dec	r0
 354:	12 16       	cp	r1, r18
 356:	13 06       	cpc	r1, r19
 358:	14 06       	cpc	r1, r20
 35a:	05 06       	cpc	r0, r21
 35c:	08 95       	ret

0000035e <__fp_round>:
 35e:	09 2e       	mov	r0, r25
 360:	03 94       	inc	r0
 362:	00 0c       	add	r0, r0
 364:	11 f4       	brne	.+4      	; 0x36a <__fp_round+0xc>
 366:	88 23       	and	r24, r24
 368:	52 f0       	brmi	.+20     	; 0x37e <__fp_round+0x20>
 36a:	bb 0f       	add	r27, r27
 36c:	40 f4       	brcc	.+16     	; 0x37e <__fp_round+0x20>
 36e:	bf 2b       	or	r27, r31
 370:	11 f4       	brne	.+4      	; 0x376 <__fp_round+0x18>
 372:	60 ff       	sbrs	r22, 0
 374:	04 c0       	rjmp	.+8      	; 0x37e <__fp_round+0x20>
 376:	6f 5f       	subi	r22, 0xFF	; 255
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	8f 4f       	sbci	r24, 0xFF	; 255
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	08 95       	ret

00000380 <__fp_split3>:
 380:	57 fd       	sbrc	r21, 7
 382:	90 58       	subi	r25, 0x80	; 128
 384:	44 0f       	add	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	59 f0       	breq	.+22     	; 0x3a0 <__fp_splitA+0x10>
 38a:	5f 3f       	cpi	r21, 0xFF	; 255
 38c:	71 f0       	breq	.+28     	; 0x3aa <__fp_splitA+0x1a>
 38e:	47 95       	ror	r20

00000390 <__fp_splitA>:
 390:	88 0f       	add	r24, r24
 392:	97 fb       	bst	r25, 7
 394:	99 1f       	adc	r25, r25
 396:	61 f0       	breq	.+24     	; 0x3b0 <__fp_splitA+0x20>
 398:	9f 3f       	cpi	r25, 0xFF	; 255
 39a:	79 f0       	breq	.+30     	; 0x3ba <__fp_splitA+0x2a>
 39c:	87 95       	ror	r24
 39e:	08 95       	ret
 3a0:	12 16       	cp	r1, r18
 3a2:	13 06       	cpc	r1, r19
 3a4:	14 06       	cpc	r1, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	f2 cf       	rjmp	.-28     	; 0x38e <__fp_split3+0xe>
 3aa:	46 95       	lsr	r20
 3ac:	f1 df       	rcall	.-30     	; 0x390 <__fp_splitA>
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <__fp_splitA+0x30>
 3b0:	16 16       	cp	r1, r22
 3b2:	17 06       	cpc	r1, r23
 3b4:	18 06       	cpc	r1, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	f1 cf       	rjmp	.-30     	; 0x39c <__fp_splitA+0xc>
 3ba:	86 95       	lsr	r24
 3bc:	71 05       	cpc	r23, r1
 3be:	61 05       	cpc	r22, r1
 3c0:	08 94       	sec
 3c2:	08 95       	ret

000003c4 <__fp_zero>:
 3c4:	e8 94       	clt

000003c6 <__fp_szero>:
 3c6:	bb 27       	eor	r27, r27
 3c8:	66 27       	eor	r22, r22
 3ca:	77 27       	eor	r23, r23
 3cc:	cb 01       	movw	r24, r22
 3ce:	97 f9       	bld	r25, 7
 3d0:	08 95       	ret

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
