
Watering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  000048a6  0000493a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006e7  008001cc  008001cc  00004a06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004a06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  00004a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012a9d  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e01  00000000  00000000  00017a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a22  00000000  00000000  0001a87e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001170  00000000  00000000  0001f2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005f3f  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007719  00000000  00000000  0002634f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  0002da68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <__vector_11>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_16>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 e5 1d 	jmp	0x3bca	; 0x3bca <__vector_18>
      4c:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__vector_19>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	07 01       	movw	r0, r14
      6a:	61 1e       	adc	r6, r17

0000006c <__ctors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf ef       	ldi	r28, 0xFF	; 255
      72:	d8 e0       	ldi	r29, 0x08	; 8
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	11 e0       	ldi	r17, 0x01	; 1
      7a:	a0 e0       	ldi	r26, 0x00	; 0
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	e6 ea       	ldi	r30, 0xA6	; 166
      80:	f8 e4       	ldi	r31, 0x48	; 72
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	ac 3c       	cpi	r26, 0xCC	; 204
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	28 e0       	ldi	r18, 0x08	; 8
      90:	ac ec       	ldi	r26, 0xCC	; 204
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	a3 3b       	cpi	r26, 0xB3	; 179
      9a:	b2 07       	cpc	r27, r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	c6 e3       	ldi	r28, 0x36	; 54
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
      a6:	21 97       	sbiw	r28, 0x01	; 1
      a8:	fe 01       	movw	r30, r28
      aa:	0e 94 df 22 	call	0x45be	; 0x45be <__tablejump2__>
      ae:	c4 33       	cpi	r28, 0x34	; 52
      b0:	d1 07       	cpc	r29, r17
      b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
      b4:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
      b8:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <_exit>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_Z41__static_initialization_and_destruction_0ii>:
);

Pump_t water_impl;

guarded<Settings> settings(Settings::load());
guarded<Clocks,guard_timer0> clocks;
      c0:	cf 93       	push	r28
      c2:	df 93       	push	r29
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	6c 97       	sbiw	r28, 0x1c	; 28
      ca:	0f b6       	in	r0, 0x3f	; 63
      cc:	f8 94       	cli
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	0f be       	out	0x3f, r0	; 63
      d2:	cd bf       	out	0x3d, r28	; 61
      d4:	01 97       	sbiw	r24, 0x01	; 1
      d6:	09 f0       	breq	.+2      	; 0xda <_Z41__static_initialization_and_destruction_0ii+0x1a>
      d8:	91 c0       	rjmp	.+290    	; 0x1fc <_Z41__static_initialization_and_destruction_0ii+0x13c>
      da:	6f 3f       	cpi	r22, 0xFF	; 255
      dc:	7f 4f       	sbci	r23, 0xFF	; 255
      de:	09 f0       	breq	.+2      	; 0xe2 <_Z41__static_initialization_and_destruction_0ii+0x22>
      e0:	8d c0       	rjmp	.+282    	; 0x1fc <_Z41__static_initialization_and_destruction_0ii+0x13c>
struct guarded{
	T value;
	mutable guarg_t m;
	
	template <typename...Args>
	inline guarded(Args &&...args):value(Std::forward<Args>(args)...){}
      e2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <Temp>
      e6:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <Temp+0x1>
      ea:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <Temp+0x2>
      ee:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <Temp+0x3>


guarded<float,atomic_guard> Temp = 0;
guarded<water_plan_array_t &> water_plan( 
	*reinterpret_cast<water_plan_array_t*>(
		calloc(sizeof(water_plan_array_t),1)
      f2:	61 e0       	ldi	r22, 0x01	; 1
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	88 e6       	ldi	r24, 0x68	; 104
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <calloc>
      fe:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <water_plan+0x1>
     102:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <water_plan>
	)
);
guarded<water_every_array_t &> water_every(
	*reinterpret_cast<water_every_array_t*>(
		calloc(sizeof(water_every_array_t),1)
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	70 e0       	ldi	r23, 0x00	; 0
     10a:	88 e2       	ldi	r24, 0x28	; 40
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <calloc>
     112:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <water_every+0x1>
     116:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <water_every>
#define PIN_MASK_12 0b00010000
#define PIN_MASK_13 0b00100000

inline void set_port_bit(volatile uint8_t & _port,uint8_t bit_num,uint8_t value){
	if(value){
		_port |= (1<<bit_num);
     11a:	87 b1       	in	r24, 0x07	; 7
     11c:	84 60       	ori	r24, 0x04	; 4
     11e:	87 b9       	out	0x07, r24	; 7
	} else {
		_port &= ~(1<<bit_num);
     120:	87 b1       	in	r24, 0x07	; 7
     122:	8b 7f       	andi	r24, 0xFB	; 251
     124:	87 b9       	out	0x07, r24	; 7
        Twd = 60;
        f_cpu = 16000000UL;
    }
    static Settings load(){
        Settings S;
        eeprom_read_block((void *)&S,NULL,sizeof(Settings));
     126:	4c e1       	ldi	r20, 0x1C	; 28
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	ce 01       	movw	r24, r28
     130:	01 96       	adiw	r24, 0x01	; 1
     132:	0e 94 41 24 	call	0x4882	; 0x4882 <eeprom_read_block>
        if(S.f_cpu < 7000000UL || S.f_cpu > 20000000UL){
     136:	89 8d       	ldd	r24, Y+25	; 0x19
     138:	9a 8d       	ldd	r25, Y+26	; 0x1a
     13a:	ab 8d       	ldd	r26, Y+27	; 0x1b
     13c:	bc 8d       	ldd	r27, Y+28	; 0x1c
     13e:	80 5c       	subi	r24, 0xC0	; 192
     140:	9f 4c       	sbci	r25, 0xCF	; 207
     142:	aa 46       	sbci	r26, 0x6A	; 106
     144:	b1 09       	sbc	r27, r1
     146:	81 34       	cpi	r24, 0x41	; 65
     148:	9d 45       	sbci	r25, 0x5D	; 93
     14a:	a6 4c       	sbci	r26, 0xC6	; 198
     14c:	b1 05       	cpc	r27, r1
     14e:	80 f1       	brcs	.+96     	; 0x1b0 <_Z41__static_initialization_and_destruction_0ii+0xf0>
    //internal clock parameter
    uint_least32_t f_cpu; // actual _f_cpu in Hz

    
    void set_default(){
        T1o = 28;
     150:	40 e0       	ldi	r20, 0x00	; 0
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	60 ee       	ldi	r22, 0xE0	; 224
     156:	71 e4       	ldi	r23, 0x41	; 65
     158:	49 83       	std	Y+1, r20	; 0x01
     15a:	5a 83       	std	Y+2, r21	; 0x02
     15c:	6b 83       	std	Y+3, r22	; 0x03
     15e:	7c 83       	std	Y+4, r23	; 0x04
        T1c = 27;
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	a8 ed       	ldi	r26, 0xD8	; 216
     166:	b1 e4       	ldi	r27, 0x41	; 65
     168:	8d 83       	std	Y+5, r24	; 0x05
     16a:	9e 83       	std	Y+6, r25	; 0x06
     16c:	af 83       	std	Y+7, r26	; 0x07
     16e:	b8 87       	std	Y+8, r27	; 0x08
        T2o = 28;
     170:	49 87       	std	Y+9, r20	; 0x09
     172:	5a 87       	std	Y+10, r21	; 0x0a
     174:	6b 87       	std	Y+11, r22	; 0x0b
     176:	7c 87       	std	Y+12, r23	; 0x0c
        T2c = 27;
     178:	8d 87       	std	Y+13, r24	; 0x0d
     17a:	9e 87       	std	Y+14, r25	; 0x0e
     17c:	af 87       	std	Y+15, r26	; 0x0f
     17e:	b8 8b       	std	Y+16, r27	; 0x10

        Tmd = 3600.0*24;
     180:	80 e8       	ldi	r24, 0x80	; 128
     182:	91 e5       	ldi	r25, 0x51	; 81
     184:	a1 e0       	ldi	r26, 0x01	; 1
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	89 8b       	std	Y+17, r24	; 0x11
     18a:	9a 8b       	std	Y+18, r25	; 0x12
     18c:	ab 8b       	std	Y+19, r26	; 0x13
     18e:	bc 8b       	std	Y+20, r27	; 0x14
        Twd = 60;
     190:	8c e3       	ldi	r24, 0x3C	; 60
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	8d 8b       	std	Y+21, r24	; 0x15
     19a:	9e 8b       	std	Y+22, r25	; 0x16
     19c:	af 8b       	std	Y+23, r26	; 0x17
     19e:	b8 8f       	std	Y+24, r27	; 0x18
        f_cpu = 16000000UL;
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	94 e2       	ldi	r25, 0x24	; 36
     1a4:	a4 ef       	ldi	r26, 0xF4	; 244
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	89 8f       	std	Y+25, r24	; 0x19
     1aa:	9a 8f       	std	Y+26, r25	; 0x1a
     1ac:	ab 8f       	std	Y+27, r26	; 0x1b
     1ae:	bc 8f       	std	Y+28, r27	; 0x1c
     1b0:	8c e1       	ldi	r24, 0x1C	; 28
     1b2:	fe 01       	movw	r30, r28
     1b4:	31 96       	adiw	r30, 0x01	; 1
     1b6:	ad ef       	ldi	r26, 0xFD	; 253
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	01 90       	ld	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	8a 95       	dec	r24
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <_Z41__static_initialization_and_destruction_0ii+0xfa>
    uint_least32_t days;
	
	
    hh_mm_ss_dd(){}
    hh_mm_ss_dd(int_least32_t days,uint_least8_t hh,uint_least8_t mm,uint_least8_t ss = 0):
    hh(hh),mm(mm),ss(ss),days(days){}
     1c2:	ec ec       	ldi	r30, 0xCC	; 204
     1c4:	f1 e0       	ldi	r31, 0x01	; 1
     1c6:	10 82       	st	Z, r1
     1c8:	11 82       	std	Z+1, r1	; 0x01
     1ca:	12 82       	std	Z+2, r1	; 0x02
     1cc:	13 82       	std	Z+3, r1	; 0x03
     1ce:	14 82       	std	Z+4, r1	; 0x04
     1d0:	15 82       	std	Z+5, r1	; 0x05
     1d2:	16 82       	std	Z+6, r1	; 0x06
#include <stdint.h>
#include "data_time.h"

struct Clocks : public hh_mm_ss_dd{
    inline Clocks():hh_mm_ss_dd(0,0,0,0),
    _inday_counter(0),_tacts_per_count(1),_f_cpu(1){}
     1d4:	17 82       	std	Z+7, r1	; 0x07
     1d6:	10 86       	std	Z+8, r1	; 0x08
     1d8:	11 86       	std	Z+9, r1	; 0x09
     1da:	12 86       	std	Z+10, r1	; 0x0a
     1dc:	13 86       	std	Z+11, r1	; 0x0b
     1de:	14 86       	std	Z+12, r1	; 0x0c
     1e0:	15 86       	std	Z+13, r1	; 0x0d
     1e2:	16 86       	std	Z+14, r1	; 0x0e
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	87 87       	std	Z+15, r24	; 0x0f
     1ee:	90 8b       	std	Z+16, r25	; 0x10
     1f0:	a1 8b       	std	Z+17, r26	; 0x11
     1f2:	b2 8b       	std	Z+18, r27	; 0x12
     1f4:	83 8b       	std	Z+19, r24	; 0x13
     1f6:	94 8b       	std	Z+20, r25	; 0x14
     1f8:	a5 8b       	std	Z+21, r26	; 0x15
     1fa:	b6 8b       	std	Z+22, r27	; 0x16
);

Pump_t water_impl;

guarded<Settings> settings(Settings::load());
guarded<Clocks,guard_timer0> clocks;
     1fc:	6c 96       	adiw	r28, 0x1c	; 28
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <_GLOBAL__sub_I_Temp>:
     20e:	6f ef       	ldi	r22, 0xFF	; 255
     210:	7f ef       	ldi	r23, 0xFF	; 255
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z41__static_initialization_and_destruction_0ii>
     21a:	08 95       	ret

0000021c <main>:
void task_window(void *);
void task_command_executor(void *);

int main(void)
{
	xTaskCreate(update_clock,"u",configMINIMAL_STACK_SIZE,NULL,1,NULL);
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	01 e0       	ldi	r16, 0x01	; 1
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	45 e5       	ldi	r20, 0x55	; 85
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	6c e4       	ldi	r22, 0x4C	; 76
     22c:	71 e0       	ldi	r23, 0x01	; 1
     22e:	8e e9       	ldi	r24, 0x9E	; 158
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 02 16 	call	0x2c04	; 0x2c04 <xTaskCreate>
	xTaskCreate(task_watering, "w", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	45 e5       	ldi	r20, 0x55	; 85
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	66 e0       	ldi	r22, 0x06	; 6
     240:	71 e0       	ldi	r23, 0x01	; 1
     242:	82 ec       	ldi	r24, 0xC2	; 194
     244:	9b e0       	ldi	r25, 0x0B	; 11
     246:	0e 94 02 16 	call	0x2c04	; 0x2c04 <xTaskCreate>
	xTaskCreate(task_window, "o", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	45 e5       	ldi	r20, 0x55	; 85
     250:	50 e0       	ldi	r21, 0x00	; 0
     252:	66 e4       	ldi	r22, 0x46	; 70
     254:	71 e0       	ldi	r23, 0x01	; 1
     256:	8d eb       	ldi	r24, 0xBD	; 189
     258:	92 e1       	ldi	r25, 0x12	; 18
     25a:	0e 94 02 16 	call	0x2c04	; 0x2c04 <xTaskCreate>
	xTaskCreate(task_command_executor, "c", 2*configMINIMAL_STACK_SIZE, NULL, 1, NULL);
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	4a ea       	ldi	r20, 0xAA	; 170
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	62 e4       	ldi	r22, 0x42	; 66
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	83 ea       	ldi	r24, 0xA3	; 163
     26c:	96 e0       	ldi	r25, 0x06	; 6
     26e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <xTaskCreate>
	
	vTaskStartScheduler();
     272:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <vTaskStartScheduler>
     276:	ff cf       	rjmp	.-2      	; 0x276 <main+0x5a>

00000278 <__vector_16>:
			days.first--;
		}			
	}
}

ISR(TIMER0_OVF_vect){
     278:	1f 92       	push	r1
     27a:	0f 92       	push	r0
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	0f 92       	push	r0
     280:	11 24       	eor	r1, r1
     282:	2f 93       	push	r18
     284:	3f 93       	push	r19
     286:	4f 93       	push	r20
     288:	5f 93       	push	r21
     28a:	6f 93       	push	r22
     28c:	7f 93       	push	r23
     28e:	8f 93       	push	r24
     290:	9f 93       	push	r25
     292:	af 93       	push	r26
     294:	ef 93       	push	r30
     296:	ff 93       	push	r31
        _inday_counter = (m_secs*_f_cpu)/_tacts_per_count;
        update();
    }

    inline void tick(){
        ++_inday_counter;
     298:	ec ec       	ldi	r30, 0xCC	; 204
     29a:	f1 e0       	ldi	r31, 0x01	; 1
     29c:	27 81       	ldd	r18, Z+7	; 0x07
     29e:	30 85       	ldd	r19, Z+8	; 0x08
     2a0:	41 85       	ldd	r20, Z+9	; 0x09
     2a2:	52 85       	ldd	r21, Z+10	; 0x0a
     2a4:	63 85       	ldd	r22, Z+11	; 0x0b
     2a6:	74 85       	ldd	r23, Z+12	; 0x0c
     2a8:	85 85       	ldd	r24, Z+13	; 0x0d
     2aa:	96 85       	ldd	r25, Z+14	; 0x0e
     2ac:	a1 e0       	ldi	r26, 0x01	; 1
     2ae:	0e 94 c1 22 	call	0x4582	; 0x4582 <__adddi3_s8>
     2b2:	27 83       	std	Z+7, r18	; 0x07
     2b4:	30 87       	std	Z+8, r19	; 0x08
     2b6:	41 87       	std	Z+9, r20	; 0x09
     2b8:	52 87       	std	Z+10, r21	; 0x0a
     2ba:	63 87       	std	Z+11, r22	; 0x0b
     2bc:	74 87       	std	Z+12, r23	; 0x0c
     2be:	85 87       	std	Z+13, r24	; 0x0d
     2c0:	96 87       	std	Z+14, r25	; 0x0e
	clocks.value.tick();
     2c2:	ff 91       	pop	r31
     2c4:	ef 91       	pop	r30
     2c6:	af 91       	pop	r26
     2c8:	9f 91       	pop	r25
     2ca:	8f 91       	pop	r24
     2cc:	7f 91       	pop	r23
     2ce:	6f 91       	pop	r22
     2d0:	5f 91       	pop	r21
     2d2:	4f 91       	pop	r20
     2d4:	3f 91       	pop	r19
     2d6:	2f 91       	pop	r18
     2d8:	0f 90       	pop	r0
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	0f 90       	pop	r0
     2de:	1f 90       	pop	r1
     2e0:	18 95       	reti

000002e2 <_ZN3Std9make_pairIRmS1_EENS_4pairINS_5decayIT_E4typeES6_EEOS4_OT0_>:
		T first;
		U second;
	};
	
	template <typename T,typename U>
	pair<decay_t<T>,decay_t<T>> make_pair(T && _arg1,U && _arg2){
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	28 97       	sbiw	r28, 0x08	; 8
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	dc 01       	movw	r26, r24
     2f8:	fb 01       	movw	r30, r22
		return {forward<T>(_arg1),forward<U>(_arg2)};
     2fa:	2c 91       	ld	r18, X
     2fc:	11 96       	adiw	r26, 0x01	; 1
     2fe:	3c 91       	ld	r19, X
     300:	11 97       	sbiw	r26, 0x01	; 1
     302:	12 96       	adiw	r26, 0x02	; 2
     304:	9c 91       	ld	r25, X
     306:	12 97       	sbiw	r26, 0x02	; 2
     308:	13 96       	adiw	r26, 0x03	; 3
     30a:	8c 91       	ld	r24, X
     30c:	3a 83       	std	Y+2, r19	; 0x02
     30e:	9b 83       	std	Y+3, r25	; 0x03
     310:	8c 83       	std	Y+4, r24	; 0x04
     312:	80 81       	ld	r24, Z
     314:	41 81       	ldd	r20, Z+1	; 0x01
     316:	32 81       	ldd	r19, Z+2	; 0x02
     318:	93 81       	ldd	r25, Z+3	; 0x03
     31a:	4e 83       	std	Y+6, r20	; 0x06
     31c:	3f 83       	std	Y+7, r19	; 0x07
     31e:	3a 81       	ldd	r19, Y+2	; 0x02
     320:	4b 81       	ldd	r20, Y+3	; 0x03
     322:	5c 81       	ldd	r21, Y+4	; 0x04
     324:	68 2f       	mov	r22, r24
     326:	7e 81       	ldd	r23, Y+6	; 0x06
	}
     328:	8f 81       	ldd	r24, Y+7	; 0x07
     32a:	28 96       	adiw	r28, 0x08	; 8
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <_Z12update_clockPv>:
	TCCR0B = (1 << CS00) | (1 << CS02); //prescalar 1024
	TIMSK0 = (1 << TOIE0);
};


void update_clock(void *){
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	a7 97       	sbiw	r28, 0x27	; 39
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
	while(1){
		vTaskDelay(200);
     350:	88 ec       	ldi	r24, 0xC8	; 200
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 79 18 	call	0x30f2	; 0x30f2 <vTaskDelay>
struct guard_timer0{
	mutex m;
	inline guard_timer0(){}
	
	inline void lock(){
		TIMSK0 = 0;
     358:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
     35c:	0c ec       	ldi	r16, 0xCC	; 204
     35e:	11 e0       	ldi	r17, 0x01	; 1
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	4f ef       	ldi	r20, 0xFF	; 255
     364:	5f ef       	ldi	r21, 0xFF	; 255
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	d8 01       	movw	r26, r16
     36c:	9f 96       	adiw	r26, 0x2f	; 47
     36e:	8d 91       	ld	r24, X+
     370:	9c 91       	ld	r25, X
     372:	d0 97       	sbiw	r26, 0x30	; 48
     374:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
		
		Std::pair<uint_least32_t,uint_least32_t> days= 
			clocks.apply([](Clocks & clk)
		{
			auto prv_day = clk.days;
     378:	f8 01       	movw	r30, r16
     37a:	83 81       	ldd	r24, Z+3	; 0x03
     37c:	94 81       	ldd	r25, Z+4	; 0x04
     37e:	a5 81       	ldd	r26, Z+5	; 0x05
     380:	b6 81       	ldd	r27, Z+6	; 0x06
     382:	89 8f       	std	Y+25, r24	; 0x19
     384:	9a 8f       	std	Y+26, r25	; 0x1a
     386:	ab 8f       	std	Y+27, r26	; 0x1b
     388:	bc 8f       	std	Y+28, r27	; 0x1c
		update();
	}
	
	
    inline void update(){
        while(_inday_counter >=  _d_counts){
     38a:	ec ec       	ldi	r30, 0xCC	; 204
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	87 80       	ldd	r8, Z+7	; 0x07
     390:	90 84       	ldd	r9, Z+8	; 0x08
     392:	21 85       	ldd	r18, Z+9	; 0x09
     394:	2d 8f       	std	Y+29, r18	; 0x1d
     396:	82 85       	ldd	r24, Z+10	; 0x0a
     398:	8e 8f       	std	Y+30, r24	; 0x1e
     39a:	a3 85       	ldd	r26, Z+11	; 0x0b
     39c:	af 8f       	std	Y+31, r26	; 0x1f
     39e:	b4 85       	ldd	r27, Z+12	; 0x0c
     3a0:	b8 a3       	std	Y+32, r27	; 0x20
     3a2:	25 85       	ldd	r18, Z+13	; 0x0d
     3a4:	29 a3       	std	Y+33, r18	; 0x21
     3a6:	86 85       	ldd	r24, Z+14	; 0x0e
     3a8:	8a a3       	std	Y+34, r24	; 0x22
     3aa:	27 88       	ldd	r2, Z+23	; 0x17
     3ac:	30 8c       	ldd	r3, Z+24	; 0x18
     3ae:	41 8c       	ldd	r4, Z+25	; 0x19
     3b0:	52 8c       	ldd	r5, Z+26	; 0x1a
     3b2:	63 8c       	ldd	r6, Z+27	; 0x1b
     3b4:	74 8c       	ldd	r7, Z+28	; 0x1c
     3b6:	b5 8d       	ldd	r27, Z+29	; 0x1d
     3b8:	a6 8d       	ldd	r26, Z+30	; 0x1e
     3ba:	28 2d       	mov	r18, r8
     3bc:	39 2d       	mov	r19, r9
     3be:	4d 8d       	ldd	r20, Y+29	; 0x1d
     3c0:	5e 8d       	ldd	r21, Y+30	; 0x1e
     3c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
     3c4:	78 a1       	ldd	r23, Y+32	; 0x20
     3c6:	89 a1       	ldd	r24, Y+33	; 0x21
     3c8:	9a a1       	ldd	r25, Y+34	; 0x22
     3ca:	a2 2c       	mov	r10, r2
     3cc:	b3 2c       	mov	r11, r3
     3ce:	c4 2c       	mov	r12, r4
     3d0:	d5 2c       	mov	r13, r5
     3d2:	e6 2c       	mov	r14, r6
     3d4:	f7 2c       	mov	r15, r7
     3d6:	0b 2f       	mov	r16, r27
     3d8:	1a 2f       	mov	r17, r26
     3da:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__cmpdi2>
     3de:	b0 f0       	brcs	.+44     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
            _inday_counter -= _d_counts;
     3e0:	0e 94 cd 22 	call	0x459a	; 0x459a <__subdi3>
     3e4:	27 83       	std	Z+7, r18	; 0x07
     3e6:	30 87       	std	Z+8, r19	; 0x08
     3e8:	41 87       	std	Z+9, r20	; 0x09
     3ea:	52 87       	std	Z+10, r21	; 0x0a
     3ec:	63 87       	std	Z+11, r22	; 0x0b
     3ee:	74 87       	std	Z+12, r23	; 0x0c
     3f0:	85 87       	std	Z+13, r24	; 0x0d
     3f2:	96 87       	std	Z+14, r25	; 0x0e
            days += 1;
     3f4:	83 81       	ldd	r24, Z+3	; 0x03
     3f6:	94 81       	ldd	r25, Z+4	; 0x04
     3f8:	a5 81       	ldd	r26, Z+5	; 0x05
     3fa:	b6 81       	ldd	r27, Z+6	; 0x06
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	a1 1d       	adc	r26, r1
     400:	b1 1d       	adc	r27, r1
     402:	83 83       	std	Z+3, r24	; 0x03
     404:	94 83       	std	Z+4, r25	; 0x04
     406:	a5 83       	std	Z+5, r26	; 0x05
     408:	b6 83       	std	Z+6, r27	; 0x06
     40a:	bf cf       	rjmp	.-130    	; 0x38a <_Z12update_clockPv+0x4e>
        }
        hh = _inday_counter/_hh_counts;
     40c:	0f 2e       	mov	r0, r31
     40e:	fc ec       	ldi	r31, 0xCC	; 204
     410:	6f 2e       	mov	r6, r31
     412:	f1 e0       	ldi	r31, 0x01	; 1
     414:	7f 2e       	mov	r7, r31
     416:	f0 2d       	mov	r31, r0
     418:	d3 01       	movw	r26, r6
     41a:	5f 96       	adiw	r26, 0x1f	; 31
     41c:	4c 90       	ld	r4, X
     41e:	5f 97       	sbiw	r26, 0x1f	; 31
     420:	90 96       	adiw	r26, 0x20	; 32
     422:	3c 90       	ld	r3, X
     424:	90 97       	sbiw	r26, 0x20	; 32
     426:	91 96       	adiw	r26, 0x21	; 33
     428:	2c 90       	ld	r2, X
     42a:	91 97       	sbiw	r26, 0x21	; 33
     42c:	92 96       	adiw	r26, 0x22	; 34
     42e:	bc 91       	ld	r27, X
     430:	bb a3       	std	Y+35, r27	; 0x23
     432:	f3 01       	movw	r30, r6
     434:	f3 a1       	ldd	r31, Z+35	; 0x23
     436:	fc a3       	std	Y+36, r31	; 0x24
     438:	d3 01       	movw	r26, r6
     43a:	94 96       	adiw	r26, 0x24	; 36
     43c:	bc 91       	ld	r27, X
     43e:	bd a3       	std	Y+37, r27	; 0x25
     440:	f3 01       	movw	r30, r6
     442:	f5 a1       	ldd	r31, Z+37	; 0x25
     444:	fe a3       	std	Y+38, r31	; 0x26
     446:	d3 01       	movw	r26, r6
     448:	96 96       	adiw	r26, 0x26	; 38
     44a:	5c 90       	ld	r5, X
     44c:	a4 2c       	mov	r10, r4
     44e:	b3 2c       	mov	r11, r3
     450:	c2 2c       	mov	r12, r2
     452:	db a0       	ldd	r13, Y+35	; 0x23
     454:	ec a0       	ldd	r14, Y+36	; 0x24
     456:	fd a0       	ldd	r15, Y+37	; 0x25
     458:	0f 2f       	mov	r16, r31
     45a:	15 2d       	mov	r17, r5
     45c:	28 2d       	mov	r18, r8
     45e:	39 2d       	mov	r19, r9
     460:	4d 8d       	ldd	r20, Y+29	; 0x1d
     462:	5e 8d       	ldd	r21, Y+30	; 0x1e
     464:	6f 8d       	ldd	r22, Y+31	; 0x1f
     466:	78 a1       	ldd	r23, Y+32	; 0x20
     468:	89 a1       	ldd	r24, Y+33	; 0x21
     46a:	9a a1       	ldd	r25, Y+34	; 0x22
     46c:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__udivdi3>
     470:	2f a3       	std	Y+39, r18	; 0x27
     472:	f3 01       	movw	r30, r6
     474:	20 83       	st	Z, r18
        uint_least32_t _inday_minut_counter = _inday_counter%_hh_counts;
     476:	28 2d       	mov	r18, r8
     478:	39 2d       	mov	r19, r9
     47a:	4d 8d       	ldd	r20, Y+29	; 0x1d
     47c:	5e 8d       	ldd	r21, Y+30	; 0x1e
     47e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     480:	78 a1       	ldd	r23, Y+32	; 0x20
     482:	89 a1       	ldd	r24, Y+33	; 0x21
     484:	9a a1       	ldd	r25, Y+34	; 0x22
     486:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__umoddi3>
     48a:	62 2f       	mov	r22, r18
     48c:	73 2f       	mov	r23, r19
     48e:	84 2f       	mov	r24, r20
     490:	95 2f       	mov	r25, r21
        if(hh >= 24)
     492:	ff a1       	ldd	r31, Y+39	; 0x27
     494:	f8 31       	cpi	r31, 0x18	; 24
     496:	18 f0       	brcs	.+6      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
            hh = 23;
     498:	27 e1       	ldi	r18, 0x17	; 23
     49a:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__data_end>
        mm = _inday_minut_counter/_mm_counts;
     49e:	0c ec       	ldi	r16, 0xCC	; 204
     4a0:	11 e0       	ldi	r17, 0x01	; 1
     4a2:	d8 01       	movw	r26, r16
     4a4:	97 96       	adiw	r26, 0x27	; 39
     4a6:	2d 91       	ld	r18, X+
     4a8:	3d 91       	ld	r19, X+
     4aa:	4d 91       	ld	r20, X+
     4ac:	5c 91       	ld	r21, X
     4ae:	9a 97       	sbiw	r26, 0x2a	; 42
     4b0:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
     4b4:	e2 2f       	mov	r30, r18
     4b6:	9b 01       	movw	r18, r22
     4b8:	ac 01       	movw	r20, r24
     4ba:	d8 01       	movw	r26, r16
     4bc:	11 96       	adiw	r26, 0x01	; 1
     4be:	ec 93       	st	X, r30
        uint_least32_t _inday_sec_counter = _inday_minut_counter%_mm_counts;
        if(mm >= 60)
     4c0:	ec 33       	cpi	r30, 0x3C	; 60
     4c2:	18 f0       	brcs	.+6      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
            mm = 59;
     4c4:	8b e3       	ldi	r24, 0x3B	; 59
     4c6:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <__data_end+0x1>
        ss = (_inday_sec_counter*_tacts_per_count)/_f_cpu;
     4ca:	0c ec       	ldi	r16, 0xCC	; 204
     4cc:	11 e0       	ldi	r17, 0x01	; 1
     4ce:	f8 01       	movw	r30, r16
     4d0:	67 85       	ldd	r22, Z+15	; 0x0f
     4d2:	70 89       	ldd	r23, Z+16	; 0x10
     4d4:	81 89       	ldd	r24, Z+17	; 0x11
     4d6:	92 89       	ldd	r25, Z+18	; 0x12
     4d8:	0e 94 1c 22 	call	0x4438	; 0x4438 <__mulsi3>
     4dc:	23 89       	ldd	r18, Z+19	; 0x13
     4de:	34 89       	ldd	r19, Z+20	; 0x14
     4e0:	45 89       	ldd	r20, Z+21	; 0x15
     4e2:	56 89       	ldd	r21, Z+22	; 0x16
     4e4:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
     4e8:	d8 01       	movw	r26, r16
     4ea:	12 96       	adiw	r26, 0x02	; 2
     4ec:	2c 93       	st	X, r18
        if(ss >= 60)
     4ee:	2c 33       	cpi	r18, 0x3C	; 60
     4f0:	18 f0       	brcs	.+6      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
            ss = 59;
     4f2:	8b e3       	ldi	r24, 0x3B	; 59
     4f4:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end+0x2>
			clk.update();
			auto m_day = clk.days;
     4f8:	0c ec       	ldi	r16, 0xCC	; 204
     4fa:	11 e0       	ldi	r17, 0x01	; 1
     4fc:	f8 01       	movw	r30, r16
     4fe:	83 81       	ldd	r24, Z+3	; 0x03
     500:	94 81       	ldd	r25, Z+4	; 0x04
     502:	a5 81       	ldd	r26, Z+5	; 0x05
     504:	b6 81       	ldd	r27, Z+6	; 0x06
     506:	89 8b       	std	Y+17, r24	; 0x11
     508:	9a 8b       	std	Y+18, r25	; 0x12
     50a:	ab 8b       	std	Y+19, r26	; 0x13
     50c:	bc 8b       	std	Y+20, r27	; 0x14
			return Std::make_pair(m_day,prv_day);
     50e:	be 01       	movw	r22, r28
     510:	67 5e       	subi	r22, 0xE7	; 231
     512:	7f 4f       	sbci	r23, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	41 96       	adiw	r24, 0x11	; 17
     518:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN3Std9make_pairIRmS1_EENS_4pairINS_5decayIT_E4typeES6_EEOS4_OT0_>
     51c:	29 83       	std	Y+1, r18	; 0x01
     51e:	3a 83       	std	Y+2, r19	; 0x02
     520:	4b 83       	std	Y+3, r20	; 0x03
     522:	5c 83       	std	Y+4, r21	; 0x04
     524:	6d 83       	std	Y+5, r22	; 0x05
     526:	7e 83       	std	Y+6, r23	; 0x06
     528:	8f 83       	std	Y+7, r24	; 0x07
     52a:	98 87       	std	Y+8, r25	; 0x08
     52c:	88 e0       	ldi	r24, 0x08	; 8
     52e:	fe 01       	movw	r30, r28
     530:	31 96       	adiw	r30, 0x01	; 1
     532:	de 01       	movw	r26, r28
     534:	51 96       	adiw	r26, 0x11	; 17
     536:	01 90       	ld	r0, Z+
     538:	0d 92       	st	X+, r0
     53a:	8a 95       	dec	r24
     53c:	e1 f7       	brne	.-8      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
	};
	void unlock(){
		xSemaphoreGive(xMutex);
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	d8 01       	movw	r26, r16
     54a:	9f 96       	adiw	r26, 0x2f	; 47
     54c:	8d 91       	ld	r24, X+
     54e:	9c 91       	ld	r25, X
     550:	d0 97       	sbiw	r26, 0x30	; 48
     552:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
		TIMSK0 = 0;
		m.lock();
	}
	inline void unlock(){
		m.unlock();
		TIMSK0 = 1<<TOIE0;
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	inline auto apply(Func_t && F){
		//static_assert(!Std::is_same_v<Std::invoke_result_t<Func_t,T &>,void>,"void function in not void spec");
		lock();
		auto result = F(value);
		unlock();
		return result;
     55c:	88 e0       	ldi	r24, 0x08	; 8
     55e:	fe 01       	movw	r30, r28
     560:	71 96       	adiw	r30, 0x11	; 17
     562:	de 01       	movw	r26, r28
     564:	19 96       	adiw	r26, 0x09	; 9
     566:	01 90       	ld	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	8a 95       	dec	r24
     56c:	e1 f7       	brne	.-8      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
     56e:	88 e0       	ldi	r24, 0x08	; 8
     570:	fe 01       	movw	r30, r28
     572:	39 96       	adiw	r30, 0x09	; 9
     574:	de 01       	movw	r26, r28
     576:	51 96       	adiw	r26, 0x11	; 17
     578:	01 90       	ld	r0, Z+
     57a:	0d 92       	st	X+, r0
     57c:	8a 95       	dec	r24
     57e:	e1 f7       	brne	.-8      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
		});  
		
		while( days.first > days.second){
     580:	49 88       	ldd	r4, Y+17	; 0x11
     582:	5a 88       	ldd	r5, Y+18	; 0x12
     584:	6b 88       	ldd	r6, Y+19	; 0x13
     586:	7c 88       	ldd	r7, Y+20	; 0x14
     588:	8d 89       	ldd	r24, Y+21	; 0x15
     58a:	9e 89       	ldd	r25, Y+22	; 0x16
     58c:	af 89       	ldd	r26, Y+23	; 0x17
     58e:	b8 8d       	ldd	r27, Y+24	; 0x18
     590:	84 15       	cp	r24, r4
     592:	95 05       	cpc	r25, r5
     594:	a6 05       	cpc	r26, r6
     596:	b7 05       	cpc	r27, r7
     598:	08 f0       	brcs	.+2      	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
     59a:	da ce       	rjmp	.-588    	; 0x350 <_Z12update_clockPv+0x14>
			NextDayUpdatePlans();
     59c:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z18NextDayUpdatePlansv>
			days.first--;
     5a0:	b1 e0       	ldi	r27, 0x01	; 1
     5a2:	4b 1a       	sub	r4, r27
     5a4:	51 08       	sbc	r5, r1
     5a6:	61 08       	sbc	r6, r1
     5a8:	71 08       	sbc	r7, r1
     5aa:	49 8a       	std	Y+17, r4	; 0x11
     5ac:	5a 8a       	std	Y+18, r5	; 0x12
     5ae:	6b 8a       	std	Y+19, r6	; 0x13
     5b0:	7c 8a       	std	Y+20, r7	; 0x14
			clk.update();
			auto m_day = clk.days;
			return Std::make_pair(m_day,prv_day);
		});  
		
		while( days.first > days.second){
     5b2:	e6 cf       	rjmp	.-52     	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>

000005b4 <_ZN3Stdli2svEPKcj>:
        bool empty(){
            return _size == 0;
        }
    };

    string_view operator""sv(const char * _str,size_t _len){
     5b4:	9b 01       	movw	r18, r22
        constexpr string_view(const char * _data = NULL):
            _data(_data), _size(_data != NULL ? strlen(_data) : 0)
        {
        }
        constexpr string_view(const char * _data,size_t _size):
            _data(_data), _size(_size)
     5b6:	ac 01       	movw	r20, r24
     5b8:	b9 01       	movw	r22, r18
        }
    };

    string_view operator""sv(const char * _str,size_t _len){
        return string_view(_str,_len);
    }
     5ba:	cb 01       	movw	r24, r22
     5bc:	ba 01       	movw	r22, r20
     5be:	08 95       	ret

000005c0 <_Z13parse_commandRN3Std11string_viewE>:
    }
    return 0;
}


Std::string_view parse_command(Std::string_view & S){
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	fc 01       	movw	r30, r24
        void step(){
            _size--;
            _data++;
        }
        bool empty(){
            return _size == 0;
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	93 81       	ldd	r25, Z+3	; 0x03
    using namespace StrFlt;
    while(!S.empty() && space(S.front())){
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	99 f0       	breq	.+38     	; 0x5f4 <_Z13parse_commandRN3Std11string_viewE+0x34>
        }
        constexpr  char operator [](size_t i) const{
            return _data[i];
        }
        constexpr  char front() const{
            return *_data;
     5ce:	a0 81       	ld	r26, Z
     5d0:	b1 81       	ldd	r27, Z+1	; 0x01
     5d2:	2c 91       	ld	r18, X
            return c=='_';
        }
    };
    struct filter_space_t:public filter_base<filter_space_t>{
        constexpr bool operator ()(char c)const{
            return c=='\n' || c=='\t' || c=='\r' || c == ' ';
     5d4:	37 ef       	ldi	r19, 0xF7	; 247
     5d6:	32 0f       	add	r19, r18
     5d8:	32 30       	cpi	r19, 0x02	; 2
     5da:	30 f0       	brcs	.+12     	; 0x5e8 <_Z13parse_commandRN3Std11string_viewE+0x28>
     5dc:	2d 30       	cpi	r18, 0x0D	; 13
     5de:	31 f0       	breq	.+12     	; 0x5ec <_Z13parse_commandRN3Std11string_viewE+0x2c>
     5e0:	20 32       	cpi	r18, 0x20	; 32
     5e2:	31 f4       	brne	.+12     	; 0x5f0 <_Z13parse_commandRN3Std11string_viewE+0x30>
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <_Z13parse_commandRN3Std11string_viewE+0x36>
     5e8:	21 e0       	ldi	r18, 0x01	; 1
     5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <_Z13parse_commandRN3Std11string_viewE+0x36>
     5ec:	21 e0       	ldi	r18, 0x01	; 1
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <_Z13parse_commandRN3Std11string_viewE+0x36>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <_Z13parse_commandRN3Std11string_viewE+0x36>
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	22 23       	and	r18, r18
     5f8:	49 f0       	breq	.+18     	; 0x60c <_Z13parse_commandRN3Std11string_viewE+0x4c>
		const char * cend()const{
			return _data+_size;
		}
		
        void step(){
            _size--;
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	93 83       	std	Z+3, r25	; 0x03
     5fe:	82 83       	std	Z+2, r24	; 0x02
            _data++;
     600:	80 81       	ld	r24, Z
     602:	91 81       	ldd	r25, Z+1	; 0x01
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	91 83       	std	Z+1, r25	; 0x01
     608:	80 83       	st	Z, r24
     60a:	dd cf       	rjmp	.-70     	; 0x5c6 <_Z13parse_commandRN3Std11string_viewE+0x6>
        S.step();
    }
    if(!S.empty() && letter(S.front())){
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	81 f0       	breq	.+32     	; 0x630 <_Z13parse_commandRN3Std11string_viewE+0x70>
        }
        constexpr  char operator [](size_t i) const{
            return _data[i];
        }
        constexpr  char front() const{
            return *_data;
     610:	a0 81       	ld	r26, Z
     612:	b1 81       	ldd	r27, Z+1	; 0x01
     614:	3c 91       	ld	r19, X
        }
    };

    struct filter_letter_t:public filter_base<filter_letter_t>{
        constexpr bool operator ()(char c)const{
            return ((c>='a') && (c<='z')) || ((c>='A') && (c<='Z'));
     616:	4f e9       	ldi	r20, 0x9F	; 159
     618:	43 0f       	add	r20, r19
     61a:	4a 31       	cpi	r20, 0x1A	; 26
     61c:	28 f0       	brcs	.+10     	; 0x628 <_Z13parse_commandRN3Std11string_viewE+0x68>
     61e:	31 54       	subi	r19, 0x41	; 65
     620:	3a 31       	cpi	r19, 0x1A	; 26
     622:	20 f4       	brcc	.+8      	; 0x62c <_Z13parse_commandRN3Std11string_viewE+0x6c>
     624:	71 e0       	ldi	r23, 0x01	; 1
     626:	05 c0       	rjmp	.+10     	; 0x632 <_Z13parse_commandRN3Std11string_viewE+0x72>
     628:	71 e0       	ldi	r23, 0x01	; 1
     62a:	03 c0       	rjmp	.+6      	; 0x632 <_Z13parse_commandRN3Std11string_viewE+0x72>
     62c:	72 2f       	mov	r23, r18
     62e:	01 c0       	rjmp	.+2      	; 0x632 <_Z13parse_commandRN3Std11string_viewE+0x72>
     630:	72 2f       	mov	r23, r18
     632:	77 23       	and	r23, r23
     634:	91 f1       	breq	.+100    	; 0x69a <_Z13parse_commandRN3Std11string_viewE+0xda>
        constexpr string_view substr(size_t start)const{
            return string_view(_data + start,_size-start);
        }

        const char * begin()const{
            return _data;
     636:	a0 81       	ld	r26, Z
     638:	b1 81       	ldd	r27, Z+1	; 0x01
		const char * cend()const{
			return _data+_size;
		}
		
        void step(){
            _size--;
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	93 83       	std	Z+3, r25	; 0x03
     63e:	82 83       	std	Z+2, r24	; 0x02
            _data++;
     640:	cd 01       	movw	r24, r26
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	91 83       	std	Z+1, r25	; 0x01
     646:	80 83       	st	Z, r24
        const char * begin =  S.begin();
        size_t _size=1;
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	50 e0       	ldi	r21, 0x00	; 0
        }
        bool empty(){
            return _size == 0;
     64c:	82 81       	ldd	r24, Z+2	; 0x02
     64e:	93 81       	ldd	r25, Z+3	; 0x03
        S.step();
        while(!S.empty() && letter(S.front())){
     650:	00 97       	sbiw	r24, 0x00	; 0
     652:	81 f0       	breq	.+32     	; 0x674 <_Z13parse_commandRN3Std11string_viewE+0xb4>
        }
        constexpr  char operator [](size_t i) const{
            return _data[i];
        }
        constexpr  char front() const{
            return *_data;
     654:	c0 81       	ld	r28, Z
     656:	d1 81       	ldd	r29, Z+1	; 0x01
     658:	38 81       	ld	r19, Y
     65a:	6f e9       	ldi	r22, 0x9F	; 159
     65c:	63 0f       	add	r22, r19
     65e:	6a 31       	cpi	r22, 0x1A	; 26
     660:	28 f0       	brcs	.+10     	; 0x66c <_Z13parse_commandRN3Std11string_viewE+0xac>
     662:	31 54       	subi	r19, 0x41	; 65
     664:	3a 31       	cpi	r19, 0x1A	; 26
     666:	20 f4       	brcc	.+8      	; 0x670 <_Z13parse_commandRN3Std11string_viewE+0xb0>
     668:	37 2f       	mov	r19, r23
     66a:	05 c0       	rjmp	.+10     	; 0x676 <_Z13parse_commandRN3Std11string_viewE+0xb6>
     66c:	37 2f       	mov	r19, r23
     66e:	03 c0       	rjmp	.+6      	; 0x676 <_Z13parse_commandRN3Std11string_viewE+0xb6>
     670:	32 2f       	mov	r19, r18
     672:	01 c0       	rjmp	.+2      	; 0x676 <_Z13parse_commandRN3Std11string_viewE+0xb6>
     674:	32 2f       	mov	r19, r18
     676:	33 23       	and	r19, r19
     678:	59 f0       	breq	.+22     	; 0x690 <_Z13parse_commandRN3Std11string_viewE+0xd0>
		const char * cend()const{
			return _data+_size;
		}
		
        void step(){
            _size--;
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	93 83       	std	Z+3, r25	; 0x03
     67e:	82 83       	std	Z+2, r24	; 0x02
            _data++;
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	91 83       	std	Z+1, r25	; 0x01
     688:	80 83       	st	Z, r24
            S.step();
            _size++;
     68a:	4f 5f       	subi	r20, 0xFF	; 255
     68c:	5f 4f       	sbci	r21, 0xFF	; 255
    }
    if(!S.empty() && letter(S.front())){
        const char * begin =  S.begin();
        size_t _size=1;
        S.step();
        while(!S.empty() && letter(S.front())){
     68e:	de cf       	rjmp	.-68     	; 0x64c <_Z13parse_commandRN3Std11string_viewE+0x8c>
        constexpr string_view(const char * _data = NULL):
            _data(_data), _size(_data != NULL ? strlen(_data) : 0)
        {
        }
        constexpr string_view(const char * _data,size_t _size):
            _data(_data), _size(_size)
     690:	6a 2f       	mov	r22, r26
     692:	7b 2f       	mov	r23, r27
     694:	84 2f       	mov	r24, r20
     696:	95 2f       	mov	r25, r21
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <_Z13parse_commandRN3Std11string_viewE+0xe2>
            S.step();
            _size++;
        }
        return Std::string_view(begin,_size);
    } 
    return {};
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <_Z14parse_variableRN3Std11string_viewE>:

Std::string_view parse_variable(Std::string_view & S){
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	fc 01       	movw	r30, r24
        void step(){
            _size--;
            _data++;
        }
        bool empty(){
            return _size == 0;
     6ae:	82 81       	ldd	r24, Z+2	; 0x02
     6b0:	93 81       	ldd	r25, Z+3	; 0x03
    using namespace StrFlt;
    while(!S.empty() && space(S.front())){
     6b2:	00 97       	sbiw	r24, 0x00	; 0
     6b4:	99 f0       	breq	.+38     	; 0x6dc <_Z14parse_variableRN3Std11string_viewE+0x34>
        }
        constexpr  char operator [](size_t i) const{
            return _data[i];
        }
        constexpr  char front() const{
            return *_data;
     6b6:	a0 81       	ld	r26, Z
     6b8:	b1 81       	ldd	r27, Z+1	; 0x01
     6ba:	2c 91       	ld	r18, X
            return c=='_';
        }
    };
    struct filter_space_t:public filter_base<filter_space_t>{
        constexpr bool operator ()(char c)const{
            return c=='\n' || c=='\t' || c=='\r' || c == ' ';
     6bc:	37 ef       	ldi	r19, 0xF7	; 247
     6be:	32 0f       	add	r19, r18
     6c0:	32 30       	cpi	r19, 0x02	; 2
     6c2:	30 f0       	brcs	.+12     	; 0x6d0 <_Z14parse_variableRN3Std11string_viewE+0x28>
     6c4:	2d 30       	cpi	r18, 0x0D	; 13
     6c6:	31 f0       	breq	.+12     	; 0x6d4 <_Z14parse_variableRN3Std11string_viewE+0x2c>
     6c8:	20 32       	cpi	r18, 0x20	; 32
     6ca:	31 f4       	brne	.+12     	; 0x6d8 <_Z14parse_variableRN3Std11string_viewE+0x30>
     6cc:	21 e0       	ldi	r18, 0x01	; 1
     6ce:	07 c0       	rjmp	.+14     	; 0x6de <_Z14parse_variableRN3Std11string_viewE+0x36>
     6d0:	21 e0       	ldi	r18, 0x01	; 1
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <_Z14parse_variableRN3Std11string_viewE+0x36>
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <_Z14parse_variableRN3Std11string_viewE+0x36>
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	01 c0       	rjmp	.+2      	; 0x6de <_Z14parse_variableRN3Std11string_viewE+0x36>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	22 23       	and	r18, r18
     6e0:	49 f0       	breq	.+18     	; 0x6f4 <_Z14parse_variableRN3Std11string_viewE+0x4c>
		const char * cend()const{
			return _data+_size;
		}
		
        void step(){
            _size--;
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	93 83       	std	Z+3, r25	; 0x03
     6e6:	82 83       	std	Z+2, r24	; 0x02
            _data++;
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	80 83       	st	Z, r24
     6f2:	dd cf       	rjmp	.-70     	; 0x6ae <_Z14parse_variableRN3Std11string_viewE+0x6>
        S.step();
    }
    if(!S.empty() && variable_begin(S.front())){
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	b1 f0       	breq	.+44     	; 0x724 <_Z14parse_variableRN3Std11string_viewE+0x7c>
        }
        constexpr  char operator [](size_t i) const{
            return _data[i];
        }
        constexpr  char front() const{
            return *_data;
     6f8:	a0 81       	ld	r26, Z
     6fa:	b1 81       	ldd	r27, Z+1	; 0x01
     6fc:	3c 91       	ld	r19, X
        }
    };

    struct filter_letter_t:public filter_base<filter_letter_t>{
        constexpr bool operator ()(char c)const{
            return ((c>='a') && (c<='z')) || ((c>='A') && (c<='Z'));
     6fe:	4f e9       	ldi	r20, 0x9F	; 159
     700:	43 0f       	add	r20, r19
     702:	4a 31       	cpi	r20, 0x1A	; 26
     704:	30 f0       	brcs	.+12     	; 0x712 <_Z14parse_variableRN3Std11string_viewE+0x6a>
     706:	4f eb       	ldi	r20, 0xBF	; 191
     708:	43 0f       	add	r20, r19
     70a:	4a 31       	cpi	r20, 0x1A	; 26
     70c:	20 f4       	brcc	.+8      	; 0x716 <_Z14parse_variableRN3Std11string_viewE+0x6e>
     70e:	71 e0       	ldi	r23, 0x01	; 1
     710:	03 c0       	rjmp	.+6      	; 0x718 <_Z14parse_variableRN3Std11string_viewE+0x70>
     712:	71 e0       	ldi	r23, 0x01	; 1
     714:	01 c0       	rjmp	.+2      	; 0x718 <_Z14parse_variableRN3Std11string_viewE+0x70>
     716:	72 2f       	mov	r23, r18
        Filter1 _F1;
        Filter2 _F2;
        constexpr filter_or(Filter1  const & _F1, Filter2  _F2):
            _F1(_F1),_F2(_F2){}
        constexpr bool operator ()(char c)const{
            return _F1(c) || _F2(c);
     718:	71 11       	cpse	r23, r1
     71a:	05 c0       	rjmp	.+10     	; 0x726 <_Z14parse_variableRN3Std11string_viewE+0x7e>
     71c:	3f 35       	cpi	r19, 0x5F	; 95
     71e:	19 f4       	brne	.+6      	; 0x726 <_Z14parse_variableRN3Std11string_viewE+0x7e>
     720:	71 e0       	ldi	r23, 0x01	; 1
     722:	01 c0       	rjmp	.+2      	; 0x726 <_Z14parse_variableRN3Std11string_viewE+0x7e>
     724:	72 2f       	mov	r23, r18
     726:	77 23       	and	r23, r23
     728:	f1 f1       	breq	.+124    	; 0x7a6 <_Z14parse_variableRN3Std11string_viewE+0xfe>
        constexpr string_view substr(size_t start)const{
            return string_view(_data + start,_size-start);
        }

        const char * begin()const{
            return _data;
     72a:	a0 81       	ld	r26, Z
     72c:	b1 81       	ldd	r27, Z+1	; 0x01
		const char * cend()const{
			return _data+_size;
		}
		
        void step(){
            _size--;
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	93 83       	std	Z+3, r25	; 0x03
     732:	82 83       	std	Z+2, r24	; 0x02
            _data++;
     734:	cd 01       	movw	r24, r26
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	91 83       	std	Z+1, r25	; 0x01
     73a:	80 83       	st	Z, r24
        const char * begin =  S.begin();
        size_t _size=1;
     73c:	41 e0       	ldi	r20, 0x01	; 1
     73e:	50 e0       	ldi	r21, 0x00	; 0
        }
        bool empty(){
            return _size == 0;
     740:	82 81       	ldd	r24, Z+2	; 0x02
     742:	93 81       	ldd	r25, Z+3	; 0x03
        S.step();
        while(!S.empty() && variable(S.front())){
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	e1 f0       	breq	.+56     	; 0x780 <_Z14parse_variableRN3Std11string_viewE+0xd8>
        }
        constexpr  char operator [](size_t i) const{
            return _data[i];
        }
        constexpr  char front() const{
            return *_data;
     748:	c0 81       	ld	r28, Z
     74a:	d1 81       	ldd	r29, Z+1	; 0x01
     74c:	68 81       	ld	r22, Y
        }
    };

    struct filter_letter_t:public filter_base<filter_letter_t>{
        constexpr bool operator ()(char c)const{
            return ((c>='a') && (c<='z')) || ((c>='A') && (c<='Z'));
     74e:	3f e9       	ldi	r19, 0x9F	; 159
     750:	36 0f       	add	r19, r22
     752:	3a 31       	cpi	r19, 0x1A	; 26
     754:	30 f0       	brcs	.+12     	; 0x762 <_Z14parse_variableRN3Std11string_viewE+0xba>
     756:	3f eb       	ldi	r19, 0xBF	; 191
     758:	36 0f       	add	r19, r22
     75a:	3a 31       	cpi	r19, 0x1A	; 26
     75c:	20 f4       	brcc	.+8      	; 0x766 <_Z14parse_variableRN3Std11string_viewE+0xbe>
     75e:	37 2f       	mov	r19, r23
     760:	03 c0       	rjmp	.+6      	; 0x768 <_Z14parse_variableRN3Std11string_viewE+0xc0>
     762:	37 2f       	mov	r19, r23
     764:	01 c0       	rjmp	.+2      	; 0x768 <_Z14parse_variableRN3Std11string_viewE+0xc0>
     766:	32 2f       	mov	r19, r18
        Filter1 _F1;
        Filter2 _F2;
        constexpr filter_or(Filter1  const & _F1, Filter2  _F2):
            _F1(_F1),_F2(_F2){}
        constexpr bool operator ()(char c)const{
            return _F1(c) || _F2(c);
     768:	31 11       	cpse	r19, r1
     76a:	03 c0       	rjmp	.+6      	; 0x772 <_Z14parse_variableRN3Std11string_viewE+0xca>
     76c:	6f 35       	cpi	r22, 0x5F	; 95
     76e:	09 f4       	brne	.+2      	; 0x772 <_Z14parse_variableRN3Std11string_viewE+0xca>
     770:	37 2f       	mov	r19, r23
     772:	31 11       	cpse	r19, r1
     774:	06 c0       	rjmp	.+12     	; 0x782 <_Z14parse_variableRN3Std11string_viewE+0xda>
        }
    };
    struct filter_num_t:public filter_base<filter_num_t>
    {
        constexpr bool operator ()(char c)const{
            return c>='0' && c<='9';
     776:	60 53       	subi	r22, 0x30	; 48
        Filter1 _F1;
        Filter2 _F2;
        constexpr filter_or(Filter1  const & _F1, Filter2  _F2):
            _F1(_F1),_F2(_F2){}
        constexpr bool operator ()(char c)const{
            return _F1(c) || _F2(c);
     778:	6a 30       	cpi	r22, 0x0A	; 10
     77a:	18 f4       	brcc	.+6      	; 0x782 <_Z14parse_variableRN3Std11string_viewE+0xda>
     77c:	37 2f       	mov	r19, r23
     77e:	01 c0       	rjmp	.+2      	; 0x782 <_Z14parse_variableRN3Std11string_viewE+0xda>
     780:	32 2f       	mov	r19, r18
     782:	33 23       	and	r19, r19
     784:	59 f0       	breq	.+22     	; 0x79c <_Z14parse_variableRN3Std11string_viewE+0xf4>
		const char * cend()const{
			return _data+_size;
		}
		
        void step(){
            _size--;
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	93 83       	std	Z+3, r25	; 0x03
     78a:	82 83       	std	Z+2, r24	; 0x02
            _data++;
     78c:	80 81       	ld	r24, Z
     78e:	91 81       	ldd	r25, Z+1	; 0x01
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	91 83       	std	Z+1, r25	; 0x01
     794:	80 83       	st	Z, r24
            S.step();
            _size++;
     796:	4f 5f       	subi	r20, 0xFF	; 255
     798:	5f 4f       	sbci	r21, 0xFF	; 255
    }
    if(!S.empty() && variable_begin(S.front())){
        const char * begin =  S.begin();
        size_t _size=1;
        S.step();
        while(!S.empty() && variable(S.front())){
     79a:	d2 cf       	rjmp	.-92     	; 0x740 <_Z14parse_variableRN3Std11string_viewE+0x98>
        constexpr string_view(const char * _data = NULL):
            _data(_data), _size(_data != NULL ? strlen(_data) : 0)
        {
        }
        constexpr string_view(const char * _data,size_t _size):
            _data(_data), _size(_size)
     79c:	6a 2f       	mov	r22, r26
     79e:	7b 2f       	mov	r23, r27
     7a0:	84 2f       	mov	r24, r20
     7a2:	95 2f       	mov	r25, r21
     7a4:	04 c0       	rjmp	.+8      	; 0x7ae <_Z14parse_variableRN3Std11string_viewE+0x106>
            S.step();
            _size++;
        }
        return Std::string_view(begin,_size);
    } 
    return {};
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
}
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <_Z11print_clockRK11hh_mm_ss_dd>:
	}
}



void print_clock(hh_mm_ss_dd const & m_time){
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	29 97       	sbiw	r28, 0x09	; 9
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	fc 01       	movw	r30, r24
		uint8_t rm = value%10;
		return {del%10+'0', rm+'0'};
	};
	constexpr uint8_t length = 9;
	char str[length];
	memcpy(str + 0,getNum1Num2(m_time.hh).data(),2);
     7ca:	30 81       	ld	r19, Z



void print_clock(hh_mm_ss_dd const & m_time){
	auto getNum1Num2 = [](uint8_t value)->Std::array<char,2>{
		uint8_t del = value/10;
     7cc:	9d ec       	ldi	r25, 0xCD	; 205
     7ce:	39 9f       	mul	r19, r25
     7d0:	21 2d       	mov	r18, r1
     7d2:	11 24       	eor	r1, r1
     7d4:	26 95       	lsr	r18
     7d6:	26 95       	lsr	r18
     7d8:	26 95       	lsr	r18
		uint8_t rm = value%10;
     7da:	42 2f       	mov	r20, r18
     7dc:	44 0f       	add	r20, r20
     7de:	84 2f       	mov	r24, r20
     7e0:	88 0f       	add	r24, r24
     7e2:	88 0f       	add	r24, r24
     7e4:	84 0f       	add	r24, r20
     7e6:	43 2f       	mov	r20, r19
     7e8:	48 1b       	sub	r20, r24
		return {del%10+'0', rm+'0'};
     7ea:	29 9f       	mul	r18, r25
     7ec:	81 2d       	mov	r24, r1
     7ee:	11 24       	eor	r1, r1
     7f0:	86 95       	lsr	r24
     7f2:	86 95       	lsr	r24
     7f4:	86 95       	lsr	r24
     7f6:	88 0f       	add	r24, r24
     7f8:	38 2f       	mov	r19, r24
     7fa:	33 0f       	add	r19, r19
     7fc:	33 0f       	add	r19, r19
     7fe:	83 0f       	add	r24, r19
     800:	28 1b       	sub	r18, r24
     802:	20 5d       	subi	r18, 0xD0	; 208
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	40 5d       	subi	r20, 0xD0	; 208
     808:	5f 4f       	sbci	r21, 0xFF	; 255
	};
	constexpr uint8_t length = 9;
	char str[length];
	memcpy(str + 0,getNum1Num2(m_time.hh).data(),2);
     80a:	29 83       	std	Y+1, r18	; 0x01
     80c:	4a 83       	std	Y+2, r20	; 0x02
	str[2] = ':';
     80e:	6a e3       	ldi	r22, 0x3A	; 58
     810:	6b 83       	std	Y+3, r22	; 0x03
	memcpy(str + 3,getNum1Num2(m_time.mm).data(),2);
     812:	31 81       	ldd	r19, Z+1	; 0x01



void print_clock(hh_mm_ss_dd const & m_time){
	auto getNum1Num2 = [](uint8_t value)->Std::array<char,2>{
		uint8_t del = value/10;
     814:	39 9f       	mul	r19, r25
     816:	21 2d       	mov	r18, r1
     818:	11 24       	eor	r1, r1
     81a:	26 95       	lsr	r18
     81c:	26 95       	lsr	r18
     81e:	26 95       	lsr	r18
		uint8_t rm = value%10;
     820:	42 2f       	mov	r20, r18
     822:	44 0f       	add	r20, r20
     824:	84 2f       	mov	r24, r20
     826:	88 0f       	add	r24, r24
     828:	88 0f       	add	r24, r24
     82a:	84 0f       	add	r24, r20
     82c:	43 2f       	mov	r20, r19
     82e:	48 1b       	sub	r20, r24
		return {del%10+'0', rm+'0'};
     830:	29 9f       	mul	r18, r25
     832:	81 2d       	mov	r24, r1
     834:	11 24       	eor	r1, r1
     836:	86 95       	lsr	r24
     838:	86 95       	lsr	r24
     83a:	86 95       	lsr	r24
     83c:	88 0f       	add	r24, r24
     83e:	38 2f       	mov	r19, r24
     840:	33 0f       	add	r19, r19
     842:	33 0f       	add	r19, r19
     844:	83 0f       	add	r24, r19
     846:	28 1b       	sub	r18, r24
     848:	20 5d       	subi	r18, 0xD0	; 208
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	40 5d       	subi	r20, 0xD0	; 208
     84e:	5f 4f       	sbci	r21, 0xFF	; 255
	};
	constexpr uint8_t length = 9;
	char str[length];
	memcpy(str + 0,getNum1Num2(m_time.hh).data(),2);
	str[2] = ':';
	memcpy(str + 3,getNum1Num2(m_time.mm).data(),2);
     850:	2c 83       	std	Y+4, r18	; 0x04
     852:	4d 83       	std	Y+5, r20	; 0x05
	str[5] = ':';
     854:	6e 83       	std	Y+6, r22	; 0x06
	memcpy(str + 6,getNum1Num2(m_time.ss).data(),2);
     856:	32 81       	ldd	r19, Z+2	; 0x02



void print_clock(hh_mm_ss_dd const & m_time){
	auto getNum1Num2 = [](uint8_t value)->Std::array<char,2>{
		uint8_t del = value/10;
     858:	39 9f       	mul	r19, r25
     85a:	81 2d       	mov	r24, r1
     85c:	11 24       	eor	r1, r1
     85e:	86 95       	lsr	r24
     860:	86 95       	lsr	r24
     862:	86 95       	lsr	r24
		uint8_t rm = value%10;
     864:	48 2f       	mov	r20, r24
     866:	44 0f       	add	r20, r20
     868:	24 2f       	mov	r18, r20
     86a:	22 0f       	add	r18, r18
     86c:	22 0f       	add	r18, r18
     86e:	24 0f       	add	r18, r20
     870:	32 1b       	sub	r19, r18
     872:	23 2f       	mov	r18, r19
		return {del%10+'0', rm+'0'};
     874:	89 9f       	mul	r24, r25
     876:	91 2d       	mov	r25, r1
     878:	11 24       	eor	r1, r1
     87a:	96 95       	lsr	r25
     87c:	96 95       	lsr	r25
     87e:	96 95       	lsr	r25
     880:	99 0f       	add	r25, r25
     882:	39 2f       	mov	r19, r25
     884:	33 0f       	add	r19, r19
     886:	33 0f       	add	r19, r19
     888:	93 0f       	add	r25, r19
     88a:	89 1b       	sub	r24, r25
     88c:	80 5d       	subi	r24, 0xD0	; 208
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	20 5d       	subi	r18, 0xD0	; 208
     892:	3f 4f       	sbci	r19, 0xFF	; 255
	char str[length];
	memcpy(str + 0,getNum1Num2(m_time.hh).data(),2);
	str[2] = ':';
	memcpy(str + 3,getNum1Num2(m_time.mm).data(),2);
	str[5] = ':';
	memcpy(str + 6,getNum1Num2(m_time.ss).data(),2);
     894:	8f 83       	std	Y+7, r24	; 0x07
     896:	28 87       	std	Y+8, r18	; 0x08
	str[8] = 0;
     898:	19 86       	std	Y+9, r1	; 0x09
	Serial.print(str);
     89a:	be 01       	movw	r22, r28
     89c:	6f 5f       	subi	r22, 0xFF	; 255
     89e:	7f 4f       	sbci	r23, 0xFF	; 255
     8a0:	8e e6       	ldi	r24, 0x6E	; 110
     8a2:	98 e0       	ldi	r25, 0x08	; 8
     8a4:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
}
     8a8:	29 96       	adiw	r28, 0x09	; 9
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <_Z15get_float_param11float_pname>:
#define SETTINGS_PARAM_CASE(pname) \
case float_pname::pname:\
	return settings.get([](Settings const & S){return S.pname;});\
	break;

float get_float_param(float_pname pname){
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
	switch (pname)
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	89 f1       	breq	.+98     	; 0x92c <__stack+0x2d>
     8ca:	28 f4       	brcc	.+10     	; 0x8d6 <_Z15get_float_param11float_pname+0x1c>
     8cc:	88 23       	and	r24, r24
     8ce:	51 f0       	breq	.+20     	; 0x8e4 <_Z15get_float_param11float_pname+0x2a>
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	99 f0       	breq	.+38     	; 0x8fa <_Z15get_float_param11float_pname+0x40>
     8d4:	76 c0       	rjmp	.+236    	; 0x9c2 <__stack+0xc3>
     8d6:	83 30       	cpi	r24, 0x03	; 3
     8d8:	09 f4       	brne	.+2      	; 0x8dc <_Z15get_float_param11float_pname+0x22>
     8da:	41 c0       	rjmp	.+130    	; 0x95e <__stack+0x5f>
     8dc:	84 30       	cpi	r24, 0x04	; 4
     8de:	09 f4       	brne	.+2      	; 0x8e2 <_Z15get_float_param11float_pname+0x28>
     8e0:	57 c0       	rjmp	.+174    	; 0x990 <__stack+0x91>
     8e2:	6f c0       	rjmp	.+222    	; 0x9c2 <__stack+0xc3>
};

struct atomic_guard{
	uint8_t sreg;
	inline void lock(){
		uint8_t sreg_tmp = SREG;
     8e4:	8f b7       	in	r24, 0x3f	; 63
		cli();
     8e6:	f8 94       	cli
		sreg = sreg_tmp;
     8e8:	e3 e2       	ldi	r30, 0x23	; 35
     8ea:	f2 e0       	ldi	r31, 0x02	; 2
     8ec:	84 83       	std	Z+4, r24	; 0x04
		unlock();
		return m_value;
	}
	
	inline Std::remove_reference_t<T> get() const{
		return get([](auto const &x){return x;});
     8ee:	c0 80       	ld	r12, Z
     8f0:	d1 80       	ldd	r13, Z+1	; 0x01
     8f2:	e2 80       	ldd	r14, Z+2	; 0x02
     8f4:	f3 80       	ldd	r15, Z+3	; 0x03
		uint8_t sreg_tmp = SREG;
		cli();
		sreg = sreg_tmp;
	}
	inline void unlock(){
		SREG = sreg;
     8f6:	8f bf       	out	0x3f, r24	; 63
	{
	case float_pname::Temp:
		return Temp.get();
     8f8:	6d c0       	rjmp	.+218    	; 0x9d4 <__stack+0xd5>
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
     8fa:	cd ef       	ldi	r28, 0xFD	; 253
     8fc:	d1 e0       	ldi	r29, 0x01	; 1
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	4f ef       	ldi	r20, 0xFF	; 255
     902:	5f ef       	ldi	r21, 0xFF	; 255
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	8c 8d       	ldd	r24, Y+28	; 0x1c
     90a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     90c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
		break;
	SETTINGS_PARAM_CASE(T1o)
     910:	c8 80       	ld	r12, Y
     912:	d9 80       	ldd	r13, Y+1	; 0x01
     914:	ea 80       	ldd	r14, Y+2	; 0x02
     916:	fb 80       	ldd	r15, Y+3	; 0x03
	};
	void unlock(){
		xSemaphoreGive(xMutex);
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	8c 8d       	ldd	r24, Y+28	; 0x1c
     924:	9d 8d       	ldd	r25, Y+29	; 0x1d
     926:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
     92a:	54 c0       	rjmp	.+168    	; 0x9d4 <__stack+0xd5>
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
     92c:	cd ef       	ldi	r28, 0xFD	; 253
     92e:	d1 e0       	ldi	r29, 0x01	; 1
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	4f ef       	ldi	r20, 0xFF	; 255
     934:	5f ef       	ldi	r21, 0xFF	; 255
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     93c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     93e:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
	SETTINGS_PARAM_CASE(T1c)
     942:	cc 80       	ldd	r12, Y+4	; 0x04
     944:	dd 80       	ldd	r13, Y+5	; 0x05
     946:	ee 80       	ldd	r14, Y+6	; 0x06
     948:	ff 80       	ldd	r15, Y+7	; 0x07
	};
	void unlock(){
		xSemaphoreGive(xMutex);
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	8c 8d       	ldd	r24, Y+28	; 0x1c
     956:	9d 8d       	ldd	r25, Y+29	; 0x1d
     958:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
     95c:	3b c0       	rjmp	.+118    	; 0x9d4 <__stack+0xd5>
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
     95e:	cd ef       	ldi	r28, 0xFD	; 253
     960:	d1 e0       	ldi	r29, 0x01	; 1
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	4f ef       	ldi	r20, 0xFF	; 255
     966:	5f ef       	ldi	r21, 0xFF	; 255
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     96e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     970:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
	SETTINGS_PARAM_CASE(T2o)
     974:	c8 84       	ldd	r12, Y+8	; 0x08
     976:	d9 84       	ldd	r13, Y+9	; 0x09
     978:	ea 84       	ldd	r14, Y+10	; 0x0a
     97a:	fb 84       	ldd	r15, Y+11	; 0x0b
	};
	void unlock(){
		xSemaphoreGive(xMutex);
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	8c 8d       	ldd	r24, Y+28	; 0x1c
     988:	9d 8d       	ldd	r25, Y+29	; 0x1d
     98a:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
     98e:	22 c0       	rjmp	.+68     	; 0x9d4 <__stack+0xd5>
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
     990:	cd ef       	ldi	r28, 0xFD	; 253
     992:	d1 e0       	ldi	r29, 0x01	; 1
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	4f ef       	ldi	r20, 0xFF	; 255
     998:	5f ef       	ldi	r21, 0xFF	; 255
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     9a2:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
	SETTINGS_PARAM_CASE(T2c)
     9a6:	cc 84       	ldd	r12, Y+12	; 0x0c
     9a8:	dd 84       	ldd	r13, Y+13	; 0x0d
     9aa:	ee 84       	ldd	r14, Y+14	; 0x0e
     9ac:	ff 84       	ldd	r15, Y+15	; 0x0f
	};
	void unlock(){
		xSemaphoreGive(xMutex);
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
     9bc:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
     9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <__stack+0xd5>
	default:
		return 0.0/0.0;
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	a9 01       	movw	r20, r18
     9c8:	ca 01       	movw	r24, r20
     9ca:	b9 01       	movw	r22, r18
     9cc:	0e 94 c2 12 	call	0x2584	; 0x2584 <__divsf3>
     9d0:	6b 01       	movw	r12, r22
     9d2:	7c 01       	movw	r14, r24
	}
}
     9d4:	c7 01       	movw	r24, r14
     9d6:	b6 01       	movw	r22, r12
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	08 95       	ret

000009e6 <_Z16get_uint32_param12uint32_pname>:

#define SETTINGS_I_PARAM_CASE(pname) \
case uint32_pname::pname:\
	return settings.get([](Settings const & S){return S.pname;});\
	break;
uint_least32_t get_uint32_param(uint32_pname pname){
     9e6:	cf 92       	push	r12
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
	switch (pname)
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	91 05       	cpc	r25, r1
     9f6:	f9 f0       	breq	.+62     	; 0xa36 <_Z16get_uint32_param12uint32_pname+0x50>
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	91 05       	cpc	r25, r1
     9fc:	a9 f1       	breq	.+106    	; 0xa68 <_Z16get_uint32_param12uint32_pname+0x82>
     9fe:	89 2b       	or	r24, r25
     a00:	09 f0       	breq	.+2      	; 0xa04 <_Z16get_uint32_param12uint32_pname+0x1e>
     a02:	4b c0       	rjmp	.+150    	; 0xa9a <_Z16get_uint32_param12uint32_pname+0xb4>
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
     a04:	cd ef       	ldi	r28, 0xFD	; 253
     a06:	d1 e0       	ldi	r29, 0x01	; 1
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	4f ef       	ldi	r20, 0xFF	; 255
     a0c:	5f ef       	ldi	r21, 0xFF	; 255
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a14:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a16:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
	{
		SETTINGS_I_PARAM_CASE(Tmd)
     a1a:	c8 88       	ldd	r12, Y+16	; 0x10
     a1c:	d9 88       	ldd	r13, Y+17	; 0x11
     a1e:	ea 88       	ldd	r14, Y+18	; 0x12
     a20:	fb 88       	ldd	r15, Y+19	; 0x13
	};
	void unlock(){
		xSemaphoreGive(xMutex);
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a2e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a30:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
     a34:	35 c0       	rjmp	.+106    	; 0xaa0 <_Z16get_uint32_param12uint32_pname+0xba>
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
     a36:	cd ef       	ldi	r28, 0xFD	; 253
     a38:	d1 e0       	ldi	r29, 0x01	; 1
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	4f ef       	ldi	r20, 0xFF	; 255
     a3e:	5f ef       	ldi	r21, 0xFF	; 255
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a46:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a48:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
		SETTINGS_I_PARAM_CASE(Twd)
     a4c:	cc 88       	ldd	r12, Y+20	; 0x14
     a4e:	dd 88       	ldd	r13, Y+21	; 0x15
     a50:	ee 88       	ldd	r14, Y+22	; 0x16
     a52:	ff 88       	ldd	r15, Y+23	; 0x17
	};
	void unlock(){
		xSemaphoreGive(xMutex);
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a60:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a62:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
     a66:	1c c0       	rjmp	.+56     	; 0xaa0 <_Z16get_uint32_param12uint32_pname+0xba>
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
     a68:	cd ef       	ldi	r28, 0xFD	; 253
     a6a:	d1 e0       	ldi	r29, 0x01	; 1
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	4f ef       	ldi	r20, 0xFF	; 255
     a70:	5f ef       	ldi	r21, 0xFF	; 255
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a78:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a7a:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
		SETTINGS_I_PARAM_CASE(f_cpu)
     a7e:	c8 8c       	ldd	r12, Y+24	; 0x18
     a80:	d9 8c       	ldd	r13, Y+25	; 0x19
     a82:	ea 8c       	ldd	r14, Y+26	; 0x1a
     a84:	fb 8c       	ldd	r15, Y+27	; 0x1b
	};
	void unlock(){
		xSemaphoreGive(xMutex);
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a92:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a94:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
     a98:	03 c0       	rjmp	.+6      	; 0xaa0 <_Z16get_uint32_param12uint32_pname+0xba>
		default:
			return 0;
     a9a:	c1 2c       	mov	r12, r1
     a9c:	d1 2c       	mov	r13, r1
     a9e:	76 01       	movw	r14, r12
			break;
	}
}
     aa0:	c7 01       	movw	r24, r14
     aa2:	b6 01       	movw	r22, r12
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	08 95       	ret

00000ab2 <_Z14print_durationm>:

void print_duration(uint_least32_t m_secs){
     ab2:	4f 92       	push	r4
     ab4:	5f 92       	push	r5
     ab6:	6f 92       	push	r6
     ab8:	7f 92       	push	r7
     aba:	8f 92       	push	r8
     abc:	9f 92       	push	r9
     abe:	af 92       	push	r10
     ac0:	bf 92       	push	r11
     ac2:	cf 92       	push	r12
     ac4:	df 92       	push	r13
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	4b 01       	movw	r8, r22
     ad0:	5c 01       	movw	r10, r24
	static	hh_mm_ss_dd from_sec(uint_least32_t m_sec){
		uint_least32_t m_min = m_sec/60;
     ad2:	0f 2e       	mov	r0, r31
     ad4:	fc e3       	ldi	r31, 0x3C	; 60
     ad6:	cf 2e       	mov	r12, r31
     ad8:	d1 2c       	mov	r13, r1
     ada:	e1 2c       	mov	r14, r1
     adc:	f1 2c       	mov	r15, r1
     ade:	f0 2d       	mov	r31, r0
     ae0:	a7 01       	movw	r20, r14
     ae2:	96 01       	movw	r18, r12
     ae4:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
     ae8:	29 01       	movw	r4, r18
     aea:	3a 01       	movw	r6, r20
     aec:	c6 2f       	mov	r28, r22
		uint_least8_t sec_rm = m_sec%60;
		
		uint_least32_t m_hou = m_min/60;
     aee:	c5 01       	movw	r24, r10
     af0:	b4 01       	movw	r22, r8
     af2:	20 e1       	ldi	r18, 0x10	; 16
     af4:	3e e0       	ldi	r19, 0x0E	; 14
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
     afe:	49 01       	movw	r8, r18
     b00:	5a 01       	movw	r10, r20
		uint_least8_t min_rm = m_min%60;
     b02:	c3 01       	movw	r24, r6
     b04:	b2 01       	movw	r22, r4
     b06:	a7 01       	movw	r20, r14
     b08:	96 01       	movw	r18, r12
     b0a:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
     b0e:	d6 2f       	mov	r29, r22
     b10:	f6 2e       	mov	r15, r22
		
		return {m_hou/24,m_hou%24,min_rm,sec_rm};
     b12:	c5 01       	movw	r24, r10
     b14:	b4 01       	movw	r22, r8
     b16:	28 e1       	ldi	r18, 0x18	; 24
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
	hh_mm_ss_dd m_dur = hh_mm_ss_dd::from_sec(m_secs);
	if(m_dur.hh != 0)
     b22:	66 23       	and	r22, r22
     b24:	69 f0       	breq	.+26     	; 0xb40 <_Z14print_durationm+0x8e>
	{
		Serial.print((int)m_dur.hh);
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	4a e0       	ldi	r20, 0x0A	; 10
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	8e e6       	ldi	r24, 0x6E	; 110
     b2e:	98 e0       	ldi	r25, 0x08	; 8
     b30:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN5Print5printEii>
		Serial.print(" hours, ");
     b34:	68 e0       	ldi	r22, 0x08	; 8
     b36:	71 e0       	ldi	r23, 0x01	; 1
     b38:	8e e6       	ldi	r24, 0x6E	; 110
     b3a:	98 e0       	ldi	r25, 0x08	; 8
     b3c:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
	}
	if(m_dur.mm != 0 )
     b40:	ff 20       	and	r15, r15
     b42:	71 f0       	breq	.+28     	; 0xb60 <_Z14print_durationm+0xae>
	{
		Serial.print((int)m_dur.mm);
     b44:	6d 2f       	mov	r22, r29
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	4a e0       	ldi	r20, 0x0A	; 10
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	8e e6       	ldi	r24, 0x6E	; 110
     b4e:	98 e0       	ldi	r25, 0x08	; 8
     b50:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN5Print5printEii>
		Serial.print(" mins, ");
     b54:	61 e1       	ldi	r22, 0x11	; 17
     b56:	71 e0       	ldi	r23, 0x01	; 1
     b58:	8e e6       	ldi	r24, 0x6E	; 110
     b5a:	98 e0       	ldi	r25, 0x08	; 8
     b5c:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
	}
	Serial.print((int)m_dur.ss);
     b60:	6c 2f       	mov	r22, r28
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	4a e0       	ldi	r20, 0x0A	; 10
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	8e e6       	ldi	r24, 0x6E	; 110
     b6a:	98 e0       	ldi	r25, 0x08	; 8
     b6c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_ZN5Print5printEii>
	Serial.print(" secs");
     b70:	69 e1       	ldi	r22, 0x19	; 25
     b72:	71 e0       	ldi	r23, 0x01	; 1
     b74:	8e e6       	ldi	r24, 0x6E	; 110
     b76:	98 e0       	ldi	r25, 0x08	; 8
     b78:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
}
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	9f 90       	pop	r9
     b8e:	8f 90       	pop	r8
     b90:	7f 90       	pop	r7
     b92:	6f 90       	pop	r6
     b94:	5f 90       	pop	r5
     b96:	4f 90       	pop	r4
     b98:	08 95       	ret

00000b9a <_Z10print_planv>:

void print_plan(){
     b9a:	cf 92       	push	r12
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
	water_plan_array_t const& mplan = water_plan.value;
     baa:	e0 90 1f 02 	lds	r14, 0x021F	; 0x80021f <water_plan>
     bae:	f0 90 20 02 	lds	r15, 0x0220	; 0x800220 <water_plan+0x1>
	uint8_t num = 0;
	for(uint8_t i=0;i<mplan.size();++i){
     bb2:	c0 e0       	ldi	r28, 0x00	; 0
	Serial.print(" secs");
}

void print_plan(){
	water_plan_array_t const& mplan = water_plan.value;
	uint8_t num = 0;
     bb4:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i=0;i<mplan.size();++i){
     bb6:	c8 30       	cpi	r28, 0x08	; 8
     bb8:	08 f0       	brcs	.+2      	; 0xbbc <_Z10print_planv+0x22>
     bba:	40 c0       	rjmp	.+128    	; 0xc3c <_Z10print_planv+0xa2>
		if(mplan[i].actual){
     bbc:	0c 2f       	mov	r16, r28
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	8d e0       	ldi	r24, 0x0D	; 13
     bc2:	80 9f       	mul	r24, r16
     bc4:	f0 01       	movw	r30, r0
     bc6:	81 9f       	mul	r24, r17
     bc8:	f0 0d       	add	r31, r0
     bca:	11 24       	eor	r1, r1
     bcc:	ee 0d       	add	r30, r14
     bce:	ff 1d       	adc	r31, r15
     bd0:	80 81       	ld	r24, Z
     bd2:	88 23       	and	r24, r24
     bd4:	89 f1       	breq	.+98     	; 0xc38 <_Z10print_planv+0x9e>
			Serial.print((char) (num+'0'));
     bd6:	60 e3       	ldi	r22, 0x30	; 48
     bd8:	6d 0f       	add	r22, r29
     bda:	8e e6       	ldi	r24, 0x6E	; 110
     bdc:	98 e0       	ldi	r25, 0x08	; 8
     bde:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN5Print5printEc>
			Serial.print(')');
     be2:	69 e2       	ldi	r22, 0x29	; 41
     be4:	8e e6       	ldi	r24, 0x6E	; 110
     be6:	98 e0       	ldi	r25, 0x08	; 8
     be8:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN5Print5printEc>
			Serial.print(" at ");
     bec:	6f e1       	ldi	r22, 0x1F	; 31
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	8e e6       	ldi	r24, 0x6E	; 110
     bf2:	98 e0       	ldi	r25, 0x08	; 8
     bf4:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
			print_clock(mplan[i].ptime);
     bf8:	8d e0       	ldi	r24, 0x0D	; 13
     bfa:	80 9f       	mul	r24, r16
     bfc:	60 01       	movw	r12, r0
     bfe:	81 9f       	mul	r24, r17
     c00:	d0 0c       	add	r13, r0
     c02:	11 24       	eor	r1, r1
     c04:	c6 01       	movw	r24, r12
     c06:	02 96       	adiw	r24, 0x02	; 2
     c08:	8e 0d       	add	r24, r14
     c0a:	9f 1d       	adc	r25, r15
     c0c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_Z11print_clockRK11hh_mm_ss_dd>
			Serial.print(" , ");
     c10:	64 e2       	ldi	r22, 0x24	; 36
     c12:	71 e0       	ldi	r23, 0x01	; 1
     c14:	8e e6       	ldi	r24, 0x6E	; 110
     c16:	98 e0       	ldi	r25, 0x08	; 8
     c18:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
			print_duration(mplan[i].duration);
     c1c:	f7 01       	movw	r30, r14
     c1e:	ec 0d       	add	r30, r12
     c20:	fd 1d       	adc	r31, r13
     c22:	61 85       	ldd	r22, Z+9	; 0x09
     c24:	72 85       	ldd	r23, Z+10	; 0x0a
     c26:	83 85       	ldd	r24, Z+11	; 0x0b
     c28:	94 85       	ldd	r25, Z+12	; 0x0c
     c2a:	0e 94 59 05 	call	0xab2	; 0xab2 <_Z14print_durationm>
			Serial.println();
     c2e:	8e e6       	ldi	r24, 0x6E	; 110
     c30:	98 e0       	ldi	r25, 0x08	; 8
     c32:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN5Print7printlnEv>
			++num;
     c36:	df 5f       	subi	r29, 0xFF	; 255
}

void print_plan(){
	water_plan_array_t const& mplan = water_plan.value;
	uint8_t num = 0;
	for(uint8_t i=0;i<mplan.size();++i){
     c38:	cf 5f       	subi	r28, 0xFF	; 255
     c3a:	bd cf       	rjmp	.-134    	; 0xbb6 <_Z10print_planv+0x1c>
			print_duration(mplan[i].duration);
			Serial.println();
			++num;
		}
	}
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	08 95       	ret

00000c4e <_Z11print_everyv>:
void print_every(){
     c4e:	cf 92       	push	r12
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	27 97       	sbiw	r28, 0x07	; 7
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
	water_every_array_t const& m_every = water_every.value;
     c6e:	e0 90 1b 02 	lds	r14, 0x021B	; 0x80021b <water_every>
     c72:	f0 90 1c 02 	lds	r15, 0x021C	; 0x80021c <water_every+0x1>
	uint8_t num = 0;
	for(uint8_t i=0;i<m_every.size();++i){
     c76:	d1 2c       	mov	r13, r1
		}
	}
}
void print_every(){
	water_every_array_t const& m_every = water_every.value;
	uint8_t num = 0;
     c78:	c1 2c       	mov	r12, r1
	for(uint8_t i=0;i<m_every.size();++i){
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	8d 15       	cp	r24, r13
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <_Z11print_everyv+0x34>
     c80:	53 c0       	rjmp	.+166    	; 0xd28 <_Z11print_everyv+0xda>
		if(m_every[i].exist_flag){
     c82:	0d 2d       	mov	r16, r13
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	f8 01       	movw	r30, r16
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	c8 01       	movw	r24, r16
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	e8 0f       	add	r30, r24
     c9c:	f9 1f       	adc	r31, r25
     c9e:	ee 0d       	add	r30, r14
     ca0:	ff 1d       	adc	r31, r15
     ca2:	80 81       	ld	r24, Z
     ca4:	88 23       	and	r24, r24
     ca6:	f1 f1       	breq	.+124    	; 0xd24 <_Z11print_everyv+0xd6>
			Serial.print((char) (num+'0'));
     ca8:	60 e3       	ldi	r22, 0x30	; 48
     caa:	6c 0d       	add	r22, r12
     cac:	8e e6       	ldi	r24, 0x6E	; 110
     cae:	98 e0       	ldi	r25, 0x08	; 8
     cb0:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN5Print5printEc>
			Serial.print(')');
     cb4:	69 e2       	ldi	r22, 0x29	; 41
     cb6:	8e e6       	ldi	r24, 0x6E	; 110
     cb8:	98 e0       	ldi	r25, 0x08	; 8
     cba:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN5Print5printEc>
			Serial.print("every ");
     cbe:	68 e2       	ldi	r22, 0x28	; 40
     cc0:	71 e0       	ldi	r23, 0x01	; 1
     cc2:	8e e6       	ldi	r24, 0x6E	; 110
     cc4:	98 e0       	ldi	r25, 0x08	; 8
     cc6:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
			print_clock(hh_mm_ss_dd(0,m_every[i].hh,m_every[i].mm,0));
     cca:	c8 01       	movw	r24, r16
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	00 0f       	add	r16, r16
     cd2:	11 1f       	adc	r17, r17
     cd4:	00 0f       	add	r16, r16
     cd6:	11 1f       	adc	r17, r17
     cd8:	00 0f       	add	r16, r16
     cda:	11 1f       	adc	r17, r17
     cdc:	08 0f       	add	r16, r24
     cde:	19 1f       	adc	r17, r25
     ce0:	0e 0d       	add	r16, r14
     ce2:	1f 1d       	adc	r17, r15
     ce4:	f8 01       	movw	r30, r16
     ce6:	84 81       	ldd	r24, Z+4	; 0x04
     ce8:	93 81       	ldd	r25, Z+3	; 0x03
    uint_least32_t days;
	
	
    hh_mm_ss_dd(){}
    hh_mm_ss_dd(int_least32_t days,uint_least8_t hh,uint_least8_t mm,uint_least8_t ss = 0):
    hh(hh),mm(mm),ss(ss),days(days){}
     cea:	99 83       	std	Y+1, r25	; 0x01
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	1b 82       	std	Y+3, r1	; 0x03
     cf0:	1c 82       	std	Y+4, r1	; 0x04
     cf2:	1d 82       	std	Y+5, r1	; 0x05
     cf4:	1e 82       	std	Y+6, r1	; 0x06
     cf6:	1f 82       	std	Y+7, r1	; 0x07
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_Z11print_clockRK11hh_mm_ss_dd>
			Serial.print(" , ");
     d00:	64 e2       	ldi	r22, 0x24	; 36
     d02:	71 e0       	ldi	r23, 0x01	; 1
     d04:	8e e6       	ldi	r24, 0x6E	; 110
     d06:	98 e0       	ldi	r25, 0x08	; 8
     d08:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
			print_duration(m_every[i].duration);
     d0c:	f8 01       	movw	r30, r16
     d0e:	66 81       	ldd	r22, Z+6	; 0x06
     d10:	77 81       	ldd	r23, Z+7	; 0x07
     d12:	80 85       	ldd	r24, Z+8	; 0x08
     d14:	91 85       	ldd	r25, Z+9	; 0x09
     d16:	0e 94 59 05 	call	0xab2	; 0xab2 <_Z14print_durationm>
			Serial.println();
     d1a:	8e e6       	ldi	r24, 0x6E	; 110
     d1c:	98 e0       	ldi	r25, 0x08	; 8
     d1e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN5Print7printlnEv>
			++num;
     d22:	c3 94       	inc	r12
	}
}
void print_every(){
	water_every_array_t const& m_every = water_every.value;
	uint8_t num = 0;
	for(uint8_t i=0;i<m_every.size();++i){
     d24:	d3 94       	inc	r13
     d26:	a9 cf       	rjmp	.-174    	; 0xc7a <_Z11print_everyv+0x2c>
			print_duration(m_every[i].duration);
			Serial.println();
			++num;
		}
	}
     d28:	27 96       	adiw	r28, 0x07	; 7
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	08 95       	ret

00000d46 <_Z21task_command_executorPv>:
inline void print_sw(Std::string_view const &m_string){
	Serial.write(m_string.data(),m_string.size());
}
void print_clock(hh_mm_ss_dd const & m_time);

void task_command_executor(void *){
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	cf 5a       	subi	r28, 0xAF	; 175
     d50:	d1 09       	sbc	r29, r1
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
	  
	inline void set_f_cpu(uint_least32_t n_f_cpu = SERIAL_F_CPU){
		_f_cpu = n_f_cpu;
	}
	
    inline void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     d5c:	26 e0       	ldi	r18, 0x06	; 6
     d5e:	40 e8       	ldi	r20, 0x80	; 128
     d60:	55 e2       	ldi	r21, 0x25	; 37
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	8e e6       	ldi	r24, 0x6E	; 110
     d68:	98 e0       	ldi	r25, 0x08	; 8
     d6a:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	while(1){
		
		//uint8_t rd_bt = Serial.readBytesUntil('\n',strbuf,max_buf_size);
		uint8_t rd_bt = 8;
		memcpy(strbuf,"get Temp",8);
     d6e:	ce 01       	movw	r24, r28
     d70:	84 96       	adiw	r24, 0x24	; 36
     d72:	28 e0       	ldi	r18, 0x08	; 8
     d74:	ef e2       	ldi	r30, 0x2F	; 47
     d76:	f1 e0       	ldi	r31, 0x01	; 1
     d78:	dc 01       	movw	r26, r24
     d7a:	01 90       	ld	r0, Z+
     d7c:	0d 92       	st	X+, r0
     d7e:	2a 95       	dec	r18
     d80:	e1 f7       	brne	.-8      	; 0xd7a <_Z21task_command_executorPv+0x34>
     d82:	c8 55       	subi	r28, 0x58	; 88
     d84:	df 4f       	sbci	r29, 0xFF	; 255
     d86:	99 83       	std	Y+1, r25	; 0x01
     d88:	88 83       	st	Y, r24
     d8a:	c8 5a       	subi	r28, 0xA8	; 168
     d8c:	d0 40       	sbci	r29, 0x00	; 0
     d8e:	88 e0       	ldi	r24, 0x08	; 8
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	c6 55       	subi	r28, 0x56	; 86
     d94:	df 4f       	sbci	r29, 0xFF	; 255
     d96:	99 83       	std	Y+1, r25	; 0x01
     d98:	88 83       	st	Y, r24
     d9a:	ca 5a       	subi	r28, 0xAA	; 170
     d9c:	d0 40       	sbci	r29, 0x00	; 0
		Std::string_view m_string(strbuf,rd_bt);
		Std::string_view m_command = parse_command(m_string);
     d9e:	ce 01       	movw	r24, r28
     da0:	88 55       	subi	r24, 0x58	; 88
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z13parse_commandRN3Std11string_viewE>
     da8:	4b 01       	movw	r8, r22
     daa:	5c 01       	movw	r10, r24
		template <size_t N>
		constexpr string_view(Std::array<char,N> const & m_char_array):
			_data(m_char_array.data()),_size(N){}

        inline size_t size()const{
            return _size;
     dac:	75 01       	movw	r14, r10
		if(m_command.size() == 0){
     dae:	ab 28       	or	r10, r11
     db0:	89 f4       	brne	.+34     	; 0xdd4 <_Z21task_command_executorPv+0x8e>
			char error_code[] = "error no command name";
     db2:	86 e1       	ldi	r24, 0x16	; 22
     db4:	ef e6       	ldi	r30, 0x6F	; 111
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	de 01       	movw	r26, r28
     dba:	ac 59       	subi	r26, 0x9C	; 156
     dbc:	bf 4f       	sbci	r27, 0xFF	; 255
     dbe:	01 90       	ld	r0, Z+
     dc0:	0d 92       	st	X+, r0
     dc2:	8a 95       	dec	r24
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <_Z21task_command_executorPv+0x78>
			Serial.println(error_code);
     dc6:	be 01       	movw	r22, r28
     dc8:	6c 59       	subi	r22, 0x9C	; 156
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
     dcc:	8e e6       	ldi	r24, 0x6E	; 110
     dce:	98 e0       	ldi	r25, 0x08	; 8
     dd0:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <_ZN5Print7printlnEPKc>
        constexpr  char back() const{
            return _data[_size-1];
        }

        constexpr bool operator == (const char * _other)const{
            for(size_t i=0;i<_size;++i){
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	6e 15       	cp	r22, r14
     dda:	7f 05       	cpc	r23, r15
     ddc:	c0 f4       	brcc	.+48     	; 0xe0e <_Z21task_command_executorPv+0xc8>
                if(_other[i] ==  (char)0){
     dde:	fb 01       	movw	r30, r22
     de0:	ef 55       	subi	r30, 0x5F	; 95
     de2:	fe 4f       	sbci	r31, 0xFE	; 254
     de4:	80 81       	ld	r24, Z
     de6:	81 11       	cpse	r24, r1
     de8:	09 c0       	rjmp	.+18     	; 0xdfc <_Z21task_command_executorPv+0xb6>
                    return _data[i] == (char)0;
     dea:	fb 01       	movw	r30, r22
     dec:	e8 0d       	add	r30, r8
     dee:	f9 1d       	adc	r31, r9
     df0:	80 81       	ld	r24, Z
     df2:	11 e0       	ldi	r17, 0x01	; 1
     df4:	88 23       	and	r24, r24
     df6:	71 f0       	breq	.+28     	; 0xe14 <_Z21task_command_executorPv+0xce>
     df8:	10 e0       	ldi	r17, 0x00	; 0
     dfa:	0c c0       	rjmp	.+24     	; 0xe14 <_Z21task_command_executorPv+0xce>
                }else if(_other[i] != _data[i]){
     dfc:	fb 01       	movw	r30, r22
     dfe:	e8 0d       	add	r30, r8
     e00:	f9 1d       	adc	r31, r9
     e02:	90 81       	ld	r25, Z
     e04:	98 13       	cpse	r25, r24
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <_Z21task_command_executorPv+0xcc>
        constexpr  char back() const{
            return _data[_size-1];
        }

        constexpr bool operator == (const char * _other)const{
            for(size_t i=0;i<_size;++i){
     e08:	6f 5f       	subi	r22, 0xFF	; 255
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	e5 cf       	rjmp	.-54     	; 0xdd8 <_Z21task_command_executorPv+0x92>
                    return _data[i] == (char)0;
                }else if(_other[i] != _data[i]){
                    return false;
				}
            }
			 return true;
     e0e:	11 e0       	ldi	r17, 0x01	; 1
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <_Z21task_command_executorPv+0xce>
        constexpr bool operator == (const char * _other)const{
            for(size_t i=0;i<_size;++i){
                if(_other[i] ==  (char)0){
                    return _data[i] == (char)0;
                }else if(_other[i] != _data[i]){
                    return false;
     e12:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		
		
		if(m_command == "get"){
     e14:	11 23       	and	r17, r17
     e16:	09 f4       	brne	.+2      	; 0xe1a <_Z21task_command_executorPv+0xd4>
     e18:	aa cf       	rjmp	.-172    	; 0xd6e <_Z21task_command_executorPv+0x28>
			using namespace Std;
			Std::array<Std::string_view ,5> float_params
			("Temp"sv,"T1o"sv,"T1c"sv,"T2o"sv,"T2c"sv);
     e1a:	63 e0       	ldi	r22, 0x03	; 3
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	88 e3       	ldi	r24, 0x38	; 56
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Stdli2svEPKcj>
     e26:	c4 55       	subi	r28, 0x54	; 84
     e28:	df 4f       	sbci	r29, 0xFF	; 255
     e2a:	68 83       	st	Y, r22
     e2c:	79 83       	std	Y+1, r23	; 0x01
     e2e:	8a 83       	std	Y+2, r24	; 0x02
     e30:	9b 83       	std	Y+3, r25	; 0x03
     e32:	cc 5a       	subi	r28, 0xAC	; 172
     e34:	d0 40       	sbci	r29, 0x00	; 0
     e36:	63 e0       	ldi	r22, 0x03	; 3
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	8c e3       	ldi	r24, 0x3C	; 60
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Stdli2svEPKcj>
     e42:	6b 01       	movw	r12, r22
     e44:	7c 01       	movw	r14, r24
     e46:	63 e0       	ldi	r22, 0x03	; 3
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	80 e4       	ldi	r24, 0x40	; 64
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Stdli2svEPKcj>
     e52:	4b 01       	movw	r8, r22
     e54:	5c 01       	movw	r10, r24
     e56:	63 e0       	ldi	r22, 0x03	; 3
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	84 e4       	ldi	r24, 0x44	; 68
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Stdli2svEPKcj>
     e62:	2b 01       	movw	r4, r22
     e64:	3c 01       	movw	r6, r24
     e66:	64 e0       	ldi	r22, 0x04	; 4
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	83 e3       	ldi	r24, 0x33	; 51
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Stdli2svEPKcj>
				ret._data[i] = m_data[i];
			}
			return ret;
		}
		template <typename...Args>
		inline array(T _first,Args &&... args){
     e72:	fe 01       	movw	r30, r28
     e74:	ec 57       	subi	r30, 0x7C	; 124
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	24 e1       	ldi	r18, 0x14	; 20
     e7a:	df 01       	movw	r26, r30
     e7c:	1d 92       	st	X+, r1
     e7e:	2a 95       	dec	r18
     e80:	e9 f7       	brne	.-6      	; 0xe7c <_Z21task_command_executorPv+0x136>
		}

		private:
		template <size_t idx,typename _T,typename...Args>
		inline void _fill_args(integral_constant<size_t,idx>,_T && _first,Args&&...other){
			_data[idx] = forward<_T>(_first);
     e82:	60 83       	st	Z, r22
     e84:	71 83       	std	Z+1, r23	; 0x01
     e86:	82 83       	std	Z+2, r24	; 0x02
     e88:	93 83       	std	Z+3, r25	; 0x03
     e8a:	44 82       	std	Z+4, r4	; 0x04
     e8c:	55 82       	std	Z+5, r5	; 0x05
     e8e:	66 82       	std	Z+6, r6	; 0x06
     e90:	77 82       	std	Z+7, r7	; 0x07
     e92:	80 86       	std	Z+8, r8	; 0x08
     e94:	91 86       	std	Z+9, r9	; 0x09
     e96:	a2 86       	std	Z+10, r10	; 0x0a
     e98:	b3 86       	std	Z+11, r11	; 0x0b
     e9a:	c4 86       	std	Z+12, r12	; 0x0c
     e9c:	d5 86       	std	Z+13, r13	; 0x0d
     e9e:	e6 86       	std	Z+14, r14	; 0x0e
     ea0:	f7 86       	std	Z+15, r15	; 0x0f
     ea2:	c4 55       	subi	r28, 0x54	; 84
     ea4:	df 4f       	sbci	r29, 0xFF	; 255
     ea6:	88 81       	ld	r24, Y
     ea8:	99 81       	ldd	r25, Y+1	; 0x01
     eaa:	aa 81       	ldd	r26, Y+2	; 0x02
     eac:	bb 81       	ldd	r27, Y+3	; 0x03
     eae:	cc 5a       	subi	r28, 0xAC	; 172
     eb0:	d0 40       	sbci	r29, 0x00	; 0
     eb2:	80 8b       	std	Z+16, r24	; 0x10
     eb4:	91 8b       	std	Z+17, r25	; 0x11
     eb6:	a2 8b       	std	Z+18, r26	; 0x12
     eb8:	b3 8b       	std	Z+19, r27	; 0x13
			 
			Std::string_view m_pname = parse_variable(m_string);
     eba:	ce 01       	movw	r24, r28
     ebc:	88 55       	subi	r24, 0x58	; 88
     ebe:	9f 4f       	sbci	r25, 0xFF	; 255
     ec0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_Z14parse_variableRN3Std11string_viewE>
     ec4:	fe 01       	movw	r30, r28
     ec6:	ec 55       	subi	r30, 0x5C	; 92
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	60 83       	st	Z, r22
     ecc:	71 83       	std	Z+1, r23	; 0x01
     ece:	82 83       	std	Z+2, r24	; 0x02
     ed0:	93 83       	std	Z+3, r25	; 0x03
			return N;
		}
		
		template <typename U>
		inline size_t find(const U & _cmprtr) const{
			return find_if([&_cmprtr](const T & _this){return  _cmprtr == _this	;});
     ed2:	bf 01       	movw	r22, r30
			return _data;
		}
		
		template <typename Condition_t>
		inline size_t find_if(Condition_t && m_condition) const{
			for(size_t i=0;i<N;++i){
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	85 30       	cpi	r24, 0x05	; 5
     eda:	91 05       	cpc	r25, r1
     edc:	08 f0       	brcs	.+2      	; 0xee0 <_Z21task_command_executorPv+0x19a>
     ede:	45 c0       	rjmp	.+138    	; 0xf6a <_Z21task_command_executorPv+0x224>
			return N;
		}
		
		template <typename U>
		inline size_t find(const U & _cmprtr) const{
			return find_if([&_cmprtr](const T & _this){return  _cmprtr == _this	;});
     ee0:	db 01       	movw	r26, r22
        }
        friend constexpr bool operator !=(const char * _other,string_view const &_this){
            return _this !=_other;
        }
        constexpr bool  operator ==(string_view const &_other)const{
            if(_size != _other._size){
     ee2:	12 96       	adiw	r26, 0x02	; 2
     ee4:	4d 91       	ld	r20, X+
     ee6:	5c 91       	ld	r21, X
     ee8:	13 97       	sbiw	r26, 0x03	; 3
     eea:	fc 01       	movw	r30, r24
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	0f 2e       	mov	r0, r31
     ef6:	f4 e8       	ldi	r31, 0x84	; 132
     ef8:	cf 2e       	mov	r12, r31
     efa:	d1 2c       	mov	r13, r1
     efc:	f0 2d       	mov	r31, r0
     efe:	cc 0e       	add	r12, r28
     f00:	dd 1e       	adc	r13, r29
     f02:	ec 0d       	add	r30, r12
     f04:	fd 1d       	adc	r31, r13
     f06:	22 81       	ldd	r18, Z+2	; 0x02
     f08:	33 81       	ldd	r19, Z+3	; 0x03
     f0a:	42 17       	cp	r20, r18
     f0c:	53 07       	cpc	r21, r19
     f0e:	21 f5       	brne	.+72     	; 0xf58 <_Z21task_command_executorPv+0x212>
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
                return false;
            }
            for(size_t i=0;i<_size;++i){
     f14:	24 17       	cp	r18, r20
     f16:	35 07       	cpc	r19, r21
     f18:	08 f5       	brcc	.+66     	; 0xf5c <_Z21task_command_executorPv+0x216>
                if(_data[i] != _other[i]){
     f1a:	ed 91       	ld	r30, X+
     f1c:	fc 91       	ld	r31, X
     f1e:	11 97       	sbiw	r26, 0x01	; 1
     f20:	e2 0f       	add	r30, r18
     f22:	f3 1f       	adc	r31, r19
     f24:	f0 80       	ld	r15, Z

        inline size_t size()const{
            return _size;
        }
        constexpr  char operator [](size_t i) const{
            return _data[i];
     f26:	fc 01       	movw	r30, r24
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	0f 2e       	mov	r0, r31
     f32:	f4 e8       	ldi	r31, 0x84	; 132
     f34:	cf 2e       	mov	r12, r31
     f36:	d1 2c       	mov	r13, r1
     f38:	f0 2d       	mov	r31, r0
     f3a:	cc 0e       	add	r12, r28
     f3c:	dd 1e       	adc	r13, r29
     f3e:	ec 0d       	add	r30, r12
     f40:	fd 1d       	adc	r31, r13
     f42:	01 90       	ld	r0, Z+
     f44:	f0 81       	ld	r31, Z
     f46:	e0 2d       	mov	r30, r0
     f48:	e2 0f       	add	r30, r18
     f4a:	f3 1f       	adc	r31, r19
     f4c:	e0 81       	ld	r30, Z
        constexpr bool  operator ==(string_view const &_other)const{
            if(_size != _other._size){
                return false;
            }
            for(size_t i=0;i<_size;++i){
                if(_data[i] != _other[i]){
     f4e:	fe 12       	cpse	r15, r30
     f50:	07 c0       	rjmp	.+14     	; 0xf60 <_Z21task_command_executorPv+0x21a>
        }
        constexpr bool  operator ==(string_view const &_other)const{
            if(_size != _other._size){
                return false;
            }
            for(size_t i=0;i<_size;++i){
     f52:	2f 5f       	subi	r18, 0xFF	; 255
     f54:	3f 4f       	sbci	r19, 0xFF	; 255
     f56:	de cf       	rjmp	.-68     	; 0xf14 <_Z21task_command_executorPv+0x1ce>
        friend constexpr bool operator !=(const char * _other,string_view const &_this){
            return _this !=_other;
        }
        constexpr bool  operator ==(string_view const &_other)const{
            if(_size != _other._size){
                return false;
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <_Z21task_command_executorPv+0x21c>
            for(size_t i=0;i<_size;++i){
                if(_data[i] != _other[i]){
                    return false;
                }
            }
            return true;
     f5c:	21 2f       	mov	r18, r17
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <_Z21task_command_executorPv+0x21c>
            if(_size != _other._size){
                return false;
            }
            for(size_t i=0;i<_size;++i){
                if(_data[i] != _other[i]){
                    return false;
     f60:	20 e0       	ldi	r18, 0x00	; 0
		}
		
		template <typename Condition_t>
		inline size_t find_if(Condition_t && m_condition) const{
			for(size_t i=0;i<N;++i){
				if(m_condition(_data[i])){
     f62:	21 11       	cpse	r18, r1
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <_Z21task_command_executorPv+0x228>
			return _data;
		}
		
		template <typename Condition_t>
		inline size_t find_if(Condition_t && m_condition) const{
			for(size_t i=0;i<N;++i){
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	b7 cf       	rjmp	.-146    	; 0xed8 <_Z21task_command_executorPv+0x192>
				if(m_condition(_data[i])){
					return i;
				}
			}
			return N;
     f6a:	85 e0       	ldi	r24, 0x05	; 5
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	7c 01       	movw	r14, r24
     f70:	ff 24       	eor	r15, r15
			uint8_t is_float = float_params.find(m_pname);
			
			if(is_float <float_params.size() ){
     f72:	25 e0       	ldi	r18, 0x05	; 5
     f74:	e2 16       	cp	r14, r18
     f76:	f1 04       	cpc	r15, r1
     f78:	58 f5       	brcc	.+86     	; 0xfd0 <_Z21task_command_executorPv+0x28a>
				float m_param = get_float_param(static_cast<float_pname>(is_float));
     f7a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z15get_float_param11float_pname>
     f7e:	4b 01       	movw	r8, r22
     f80:	5c 01       	movw	r10, r24
		template <size_t N>
		constexpr string_view(Std::array<char,N> const & m_char_array):
			_data(m_char_array.data()),_size(N){}

        inline size_t size()const{
            return _size;
     f82:	ee 0c       	add	r14, r14
     f84:	ff 1c       	adc	r15, r15
     f86:	ee 0c       	add	r14, r14
     f88:	ff 1c       	adc	r15, r15
     f8a:	e4 e8       	ldi	r30, 0x84	; 132
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	ec 0f       	add	r30, r28
     f90:	fd 1f       	adc	r31, r29
     f92:	ee 0d       	add	r30, r14
     f94:	ff 1d       	adc	r31, r15
     f96:	42 81       	ldd	r20, Z+2	; 0x02
     f98:	53 81       	ldd	r21, Z+3	; 0x03
        }
		const char * cbegin()const{
			return _data;
		}
		const char * data()const{
			return _data;
     f9a:	60 81       	ld	r22, Z
     f9c:	71 81       	ldd	r23, Z+1	; 0x01
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     f9e:	e0 91 6e 08 	lds	r30, 0x086E	; 0x80086e <Serial>
     fa2:	f0 91 6f 08 	lds	r31, 0x086F	; 0x80086f <Serial+0x1>
     fa6:	02 80       	ldd	r0, Z+2	; 0x02
     fa8:	f3 81       	ldd	r31, Z+3	; 0x03
     faa:	e0 2d       	mov	r30, r0
     fac:	8e e6       	ldi	r24, 0x6E	; 110
     fae:	98 e0       	ldi	r25, 0x08	; 8
     fb0:	09 95       	icall
				print_sw(float_params[is_float]);
				Serial.print(" = ");
     fb2:	60 e6       	ldi	r22, 0x60	; 96
     fb4:	71 e0       	ldi	r23, 0x01	; 1
     fb6:	8e e6       	ldi	r24, 0x6E	; 110
     fb8:	98 e0       	ldi	r25, 0x08	; 8
     fba:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
				Serial.println(m_param);
     fbe:	22 e0       	ldi	r18, 0x02	; 2
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	b5 01       	movw	r22, r10
     fc4:	a4 01       	movw	r20, r8
     fc6:	8e e6       	ldi	r24, 0x6E	; 110
     fc8:	98 e0       	ldi	r25, 0x08	; 8
     fca:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN5Print7printlnEdi>
				continue;
     fce:	cf ce       	rjmp	.-610    	; 0xd6e <_Z21task_command_executorPv+0x28>
			}
			Std::array<Std::string_view ,3> int_params
				("Tmd"sv,"Twd"sv,"f_cpu"sv);
     fd0:	65 e0       	ldi	r22, 0x05	; 5
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	88 e4       	ldi	r24, 0x48	; 72
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Stdli2svEPKcj>
     fdc:	4b 01       	movw	r8, r22
     fde:	5c 01       	movw	r10, r24
     fe0:	63 e0       	ldi	r22, 0x03	; 3
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	8e e4       	ldi	r24, 0x4E	; 78
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Stdli2svEPKcj>
     fec:	2b 01       	movw	r4, r22
     fee:	3c 01       	movw	r6, r24
     ff0:	63 e0       	ldi	r22, 0x03	; 3
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	82 e5       	ldi	r24, 0x52	; 82
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3Stdli2svEPKcj>
				ret._data[i] = m_data[i];
			}
			return ret;
		}
		template <typename...Args>
		inline array(T _first,Args &&... args){
     ffc:	fe 01       	movw	r30, r28
     ffe:	e8 56       	subi	r30, 0x68	; 104
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	2c e0       	ldi	r18, 0x0C	; 12
    1004:	df 01       	movw	r26, r30
    1006:	1d 92       	st	X+, r1
    1008:	2a 95       	dec	r18
    100a:	e9 f7       	brne	.-6      	; 0x1006 <_Z21task_command_executorPv+0x2c0>
		}

		private:
		template <size_t idx,typename _T,typename...Args>
		inline void _fill_args(integral_constant<size_t,idx>,_T && _first,Args&&...other){
			_data[idx] = forward<_T>(_first);
    100c:	60 83       	st	Z, r22
    100e:	71 83       	std	Z+1, r23	; 0x01
    1010:	82 83       	std	Z+2, r24	; 0x02
    1012:	93 83       	std	Z+3, r25	; 0x03
    1014:	44 82       	std	Z+4, r4	; 0x04
    1016:	55 82       	std	Z+5, r5	; 0x05
    1018:	66 82       	std	Z+6, r6	; 0x06
    101a:	77 82       	std	Z+7, r7	; 0x07
    101c:	80 86       	std	Z+8, r8	; 0x08
    101e:	91 86       	std	Z+9, r9	; 0x09
    1020:	a2 86       	std	Z+10, r10	; 0x0a
    1022:	b3 86       	std	Z+11, r11	; 0x0b
			return _data;
		}
		
		template <typename Condition_t>
		inline size_t find_if(Condition_t && m_condition) const{
			for(size_t i=0;i<N;++i){
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	23 30       	cpi	r18, 0x03	; 3
    102a:	31 05       	cpc	r19, r1
    102c:	08 f0       	brcs	.+2      	; 0x1030 <_Z21task_command_executorPv+0x2ea>
    102e:	49 c0       	rjmp	.+146    	; 0x10c2 <_Z21task_command_executorPv+0x37c>
			return N;
		}
		
		template <typename U>
		inline size_t find(const U & _cmprtr) const{
			return find_if([&_cmprtr](const T & _this){return  _cmprtr == _this	;});
    1030:	de 01       	movw	r26, r28
    1032:	ac 55       	subi	r26, 0x5C	; 92
    1034:	bf 4f       	sbci	r27, 0xFF	; 255
        }
        friend constexpr bool operator !=(const char * _other,string_view const &_this){
            return _this !=_other;
        }
        constexpr bool  operator ==(string_view const &_other)const{
            if(_size != _other._size){
    1036:	ca 55       	subi	r28, 0x5A	; 90
    1038:	df 4f       	sbci	r29, 0xFF	; 255
    103a:	48 81       	ld	r20, Y
    103c:	59 81       	ldd	r21, Y+1	; 0x01
    103e:	c6 5a       	subi	r28, 0xA6	; 166
    1040:	d0 40       	sbci	r29, 0x00	; 0
    1042:	f9 01       	movw	r30, r18
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	ee 0f       	add	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	0f 2e       	mov	r0, r31
    104e:	f8 e9       	ldi	r31, 0x98	; 152
    1050:	cf 2e       	mov	r12, r31
    1052:	d1 2c       	mov	r13, r1
    1054:	f0 2d       	mov	r31, r0
    1056:	cc 0e       	add	r12, r28
    1058:	dd 1e       	adc	r13, r29
    105a:	ec 0d       	add	r30, r12
    105c:	fd 1d       	adc	r31, r13
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	48 17       	cp	r20, r24
    1064:	59 07       	cpc	r21, r25
    1066:	19 f5       	brne	.+70     	; 0x10ae <_Z21task_command_executorPv+0x368>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
                return false;
            }
            for(size_t i=0;i<_size;++i){
    106c:	84 17       	cp	r24, r20
    106e:	95 07       	cpc	r25, r21
    1070:	00 f5       	brcc	.+64     	; 0x10b2 <_Z21task_command_executorPv+0x36c>
                if(_data[i] != _other[i]){
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	11 97       	sbiw	r26, 0x01	; 1
    1078:	e8 0f       	add	r30, r24
    107a:	f9 1f       	adc	r31, r25
    107c:	70 81       	ld	r23, Z

        inline size_t size()const{
            return _size;
        }
        constexpr  char operator [](size_t i) const{
            return _data[i];
    107e:	f9 01       	movw	r30, r18
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	0f 2e       	mov	r0, r31
    108a:	f8 e9       	ldi	r31, 0x98	; 152
    108c:	cf 2e       	mov	r12, r31
    108e:	d1 2c       	mov	r13, r1
    1090:	f0 2d       	mov	r31, r0
    1092:	cc 0e       	add	r12, r28
    1094:	dd 1e       	adc	r13, r29
    1096:	ec 0d       	add	r30, r12
    1098:	fd 1d       	adc	r31, r13
    109a:	01 90       	ld	r0, Z+
    109c:	f0 81       	ld	r31, Z
    109e:	e0 2d       	mov	r30, r0
    10a0:	e8 0f       	add	r30, r24
    10a2:	f9 1f       	adc	r31, r25
    10a4:	60 81       	ld	r22, Z
        constexpr bool  operator ==(string_view const &_other)const{
            if(_size != _other._size){
                return false;
            }
            for(size_t i=0;i<_size;++i){
                if(_data[i] != _other[i]){
    10a6:	76 13       	cpse	r23, r22
    10a8:	06 c0       	rjmp	.+12     	; 0x10b6 <_Z21task_command_executorPv+0x370>
        }
        constexpr bool  operator ==(string_view const &_other)const{
            if(_size != _other._size){
                return false;
            }
            for(size_t i=0;i<_size;++i){
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	df cf       	rjmp	.-66     	; 0x106c <_Z21task_command_executorPv+0x326>
        friend constexpr bool operator !=(const char * _other,string_view const &_this){
            return _this !=_other;
        }
        constexpr bool  operator ==(string_view const &_other)const{
            if(_size != _other._size){
                return false;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <_Z21task_command_executorPv+0x372>
            for(size_t i=0;i<_size;++i){
                if(_data[i] != _other[i]){
                    return false;
                }
            }
            return true;
    10b2:	81 2f       	mov	r24, r17
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <_Z21task_command_executorPv+0x372>
            if(_size != _other._size){
                return false;
            }
            for(size_t i=0;i<_size;++i){
                if(_data[i] != _other[i]){
                    return false;
    10b6:	80 e0       	ldi	r24, 0x00	; 0
		}
		
		template <typename Condition_t>
		inline size_t find_if(Condition_t && m_condition) const{
			for(size_t i=0;i<N;++i){
				if(m_condition(_data[i])){
    10b8:	81 11       	cpse	r24, r1
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <_Z21task_command_executorPv+0x380>
			return _data;
		}
		
		template <typename Condition_t>
		inline size_t find_if(Condition_t && m_condition) const{
			for(size_t i=0;i<N;++i){
    10bc:	2f 5f       	subi	r18, 0xFF	; 255
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	b3 cf       	rjmp	.-154    	; 0x1028 <_Z21task_command_executorPv+0x2e2>
				if(m_condition(_data[i])){
					return i;
				}
			}
			return N;
    10c2:	23 e0       	ldi	r18, 0x03	; 3
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	69 01       	movw	r12, r18
    10c8:	dd 24       	eor	r13, r13

			uint8_t is_int = int_params.find(m_pname);
			if(is_int < int_params.size()){
    10ca:	23 e0       	ldi	r18, 0x03	; 3
    10cc:	c2 16       	cp	r12, r18
    10ce:	d1 04       	cpc	r13, r1
    10d0:	60 f5       	brcc	.+88     	; 0x112a <_Z21task_command_executorPv+0x3e4>
				uint_least32_t m_param = get_uint32_param(static_cast<uint32_pname>(is_float));
    10d2:	c7 01       	movw	r24, r14
    10d4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_Z16get_uint32_param12uint32_pname>
    10d8:	4b 01       	movw	r8, r22
    10da:	5c 01       	movw	r10, r24
		template <size_t N>
		constexpr string_view(Std::array<char,N> const & m_char_array):
			_data(m_char_array.data()),_size(N){}

        inline size_t size()const{
            return _size;
    10dc:	cc 0c       	add	r12, r12
    10de:	dd 1c       	adc	r13, r13
    10e0:	cc 0c       	add	r12, r12
    10e2:	dd 1c       	adc	r13, r13
    10e4:	e8 e9       	ldi	r30, 0x98	; 152
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	ec 0f       	add	r30, r28
    10ea:	fd 1f       	adc	r31, r29
    10ec:	ec 0d       	add	r30, r12
    10ee:	fd 1d       	adc	r31, r13
    10f0:	42 81       	ldd	r20, Z+2	; 0x02
    10f2:	53 81       	ldd	r21, Z+3	; 0x03
        }
		const char * cbegin()const{
			return _data;
		}
		const char * data()const{
			return _data;
    10f4:	60 81       	ld	r22, Z
    10f6:	71 81       	ldd	r23, Z+1	; 0x01
    10f8:	e0 91 6e 08 	lds	r30, 0x086E	; 0x80086e <Serial>
    10fc:	f0 91 6f 08 	lds	r31, 0x086F	; 0x80086f <Serial+0x1>
    1100:	02 80       	ldd	r0, Z+2	; 0x02
    1102:	f3 81       	ldd	r31, Z+3	; 0x03
    1104:	e0 2d       	mov	r30, r0
    1106:	8e e6       	ldi	r24, 0x6E	; 110
    1108:	98 e0       	ldi	r25, 0x08	; 8
    110a:	09 95       	icall
				print_sw(int_params[is_int]);
				Serial.print(" = ");
    110c:	60 e6       	ldi	r22, 0x60	; 96
    110e:	71 e0       	ldi	r23, 0x01	; 1
    1110:	8e e6       	ldi	r24, 0x6E	; 110
    1112:	98 e0       	ldi	r25, 0x08	; 8
    1114:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
				Serial.println(m_param);
    1118:	2a e0       	ldi	r18, 0x0A	; 10
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	b5 01       	movw	r22, r10
    111e:	a4 01       	movw	r20, r8
    1120:	8e e6       	ldi	r24, 0x6E	; 110
    1122:	98 e0       	ldi	r25, 0x08	; 8
    1124:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN5Print7printlnEmi>
				continue;
    1128:	22 ce       	rjmp	.-956    	; 0xd6e <_Z21task_command_executorPv+0x28>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
        constexpr  char back() const{
            return _data[_size-1];
        }

        constexpr bool operator == (const char * _other)const{
            for(size_t i=0;i<_size;++i){
    112e:	ca 55       	subi	r28, 0x5A	; 90
    1130:	df 4f       	sbci	r29, 0xFF	; 255
    1132:	28 81       	ld	r18, Y
    1134:	39 81       	ldd	r19, Y+1	; 0x01
    1136:	c6 5a       	subi	r28, 0xA6	; 166
    1138:	d0 40       	sbci	r29, 0x00	; 0
    113a:	82 17       	cp	r24, r18
    113c:	93 07       	cpc	r25, r19
    113e:	10 f5       	brcc	.+68     	; 0x1184 <_Z21task_command_executorPv+0x43e>
                if(_other[i] ==  (char)0){
    1140:	fc 01       	movw	r30, r24
    1142:	ea 5a       	subi	r30, 0xAA	; 170
    1144:	fe 4f       	sbci	r31, 0xFE	; 254
    1146:	40 81       	ld	r20, Z
    1148:	41 11       	cpse	r20, r1
    114a:	0f c0       	rjmp	.+30     	; 0x116a <_Z21task_command_executorPv+0x424>
                    return _data[i] == (char)0;
    114c:	cc 55       	subi	r28, 0x5C	; 92
    114e:	df 4f       	sbci	r29, 0xFF	; 255
    1150:	48 81       	ld	r20, Y
    1152:	59 81       	ldd	r21, Y+1	; 0x01
    1154:	c4 5a       	subi	r28, 0xA4	; 164
    1156:	d0 40       	sbci	r29, 0x00	; 0
    1158:	fa 01       	movw	r30, r20
    115a:	e8 0f       	add	r30, r24
    115c:	f9 1f       	adc	r31, r25
    115e:	80 81       	ld	r24, Z
    1160:	61 e0       	ldi	r22, 0x01	; 1
    1162:	88 23       	and	r24, r24
    1164:	91 f0       	breq	.+36     	; 0x118a <_Z21task_command_executorPv+0x444>
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	10 c0       	rjmp	.+32     	; 0x118a <_Z21task_command_executorPv+0x444>
                }else if(_other[i] != _data[i]){
    116a:	cc 55       	subi	r28, 0x5C	; 92
    116c:	df 4f       	sbci	r29, 0xFF	; 255
    116e:	e8 81       	ld	r30, Y
    1170:	f9 81       	ldd	r31, Y+1	; 0x01
    1172:	c4 5a       	subi	r28, 0xA4	; 164
    1174:	d0 40       	sbci	r29, 0x00	; 0
    1176:	e8 0f       	add	r30, r24
    1178:	f9 1f       	adc	r31, r25
    117a:	50 81       	ld	r21, Z
    117c:	45 13       	cpse	r20, r21
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <_Z21task_command_executorPv+0x442>
        constexpr  char back() const{
            return _data[_size-1];
        }

        constexpr bool operator == (const char * _other)const{
            for(size_t i=0;i<_size;++i){
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	d5 cf       	rjmp	.-86     	; 0x112e <_Z21task_command_executorPv+0x3e8>
                    return _data[i] == (char)0;
                }else if(_other[i] != _data[i]){
                    return false;
				}
            }
			 return true;
    1184:	61 2f       	mov	r22, r17
    1186:	01 c0       	rjmp	.+2      	; 0x118a <_Z21task_command_executorPv+0x444>
        constexpr bool operator == (const char * _other)const{
            for(size_t i=0;i<_size;++i){
                if(_other[i] ==  (char)0){
                    return _data[i] == (char)0;
                }else if(_other[i] != _data[i]){
                    return false;
    1188:	60 e0       	ldi	r22, 0x00	; 0
			}
			if(m_pname == "clock"){
    118a:	66 23       	and	r22, r22
    118c:	09 f4       	brne	.+2      	; 0x1190 <_Z21task_command_executorPv+0x44a>
    118e:	69 c0       	rjmp	.+210    	; 0x1262 <_Z21task_command_executorPv+0x51c>
				Serial.print("Time = ");
    1190:	6c e5       	ldi	r22, 0x5C	; 92
    1192:	71 e0       	ldi	r23, 0x01	; 1
    1194:	8e e6       	ldi	r24, 0x6E	; 110
    1196:	98 e0       	ldi	r25, 0x08	; 8
    1198:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
struct guard_timer0{
	mutex m;
	inline guard_timer0(){}
	
	inline void lock(){
		TIMSK0 = 0;
    119c:	0e e6       	ldi	r16, 0x6E	; 110
    119e:	10 e0       	ldi	r17, 0x00	; 0
    11a0:	d8 01       	movw	r26, r16
    11a2:	1c 92       	st	X, r1
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
    11a4:	0f 2e       	mov	r0, r31
    11a6:	fc ec       	ldi	r31, 0xCC	; 204
    11a8:	ef 2e       	mov	r14, r31
    11aa:	f1 e0       	ldi	r31, 0x01	; 1
    11ac:	ff 2e       	mov	r15, r31
    11ae:	f0 2d       	mov	r31, r0
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	4f ef       	ldi	r20, 0xFF	; 255
    11b4:	5f ef       	ldi	r21, 0xFF	; 255
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	f7 01       	movw	r30, r14
    11bc:	87 a5       	ldd	r24, Z+47	; 0x2f
    11be:	90 a9       	ldd	r25, Z+48	; 0x30
    11c0:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
				print_clock(clocks.get([](Clocks const & clk){return clk.current();}));
    11c4:	87 e0       	ldi	r24, 0x07	; 7
    11c6:	f7 01       	movw	r30, r14
    11c8:	de 01       	movw	r26, r28
    11ca:	1f 96       	adiw	r26, 0x0f	; 15
    11cc:	01 90       	ld	r0, Z+
    11ce:	0d 92       	st	X+, r0
    11d0:	8a 95       	dec	r24
    11d2:	e1 f7       	brne	.-8      	; 0x11cc <_Z21task_command_executorPv+0x486>
    11d4:	87 e0       	ldi	r24, 0x07	; 7
    11d6:	fe 01       	movw	r30, r28
    11d8:	3f 96       	adiw	r30, 0x0f	; 15
    11da:	de 01       	movw	r26, r28
    11dc:	18 96       	adiw	r26, 0x08	; 8
    11de:	01 90       	ld	r0, Z+
    11e0:	0d 92       	st	X+, r0
    11e2:	8a 95       	dec	r24
    11e4:	e1 f7       	brne	.-8      	; 0x11de <_Z21task_command_executorPv+0x498>
	
	
	template <typename Func_t>
	inline auto get(Func_t && F) const{
		lock();
		auto m_value = F(value);
    11e6:	87 e0       	ldi	r24, 0x07	; 7
    11e8:	fe 01       	movw	r30, r28
    11ea:	38 96       	adiw	r30, 0x08	; 8
    11ec:	de 01       	movw	r26, r28
    11ee:	ac 59       	subi	r26, 0x9C	; 156
    11f0:	bf 4f       	sbci	r27, 0xFF	; 255
    11f2:	01 90       	ld	r0, Z+
    11f4:	0d 92       	st	X+, r0
    11f6:	8a 95       	dec	r24
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <_Z21task_command_executorPv+0x4ac>
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
	};
	void unlock(){
		xSemaphoreGive(xMutex);
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	d7 01       	movw	r26, r14
    1206:	9f 96       	adiw	r26, 0x2f	; 47
    1208:	8d 91       	ld	r24, X+
    120a:	9c 91       	ld	r25, X
    120c:	d0 97       	sbiw	r26, 0x30	; 48
    120e:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
		TIMSK0 = 0;
		m.lock();
	}
	inline void unlock(){
		m.unlock();
		TIMSK0 = 1<<TOIE0;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	f8 01       	movw	r30, r16
    1216:	80 83       	st	Z, r24
	template <typename Func_t>
	inline auto get(Func_t && F) const{
		lock();
		auto m_value = F(value);
		unlock();
		return m_value;
    1218:	87 e0       	ldi	r24, 0x07	; 7
    121a:	fe 01       	movw	r30, r28
    121c:	ec 59       	subi	r30, 0x9C	; 156
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	de 01       	movw	r26, r28
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	01 90       	ld	r0, Z+
    1226:	0d 92       	st	X+, r0
    1228:	8a 95       	dec	r24
    122a:	e1 f7       	brne	.-8      	; 0x1224 <_Z21task_command_executorPv+0x4de>
    122c:	87 e0       	ldi	r24, 0x07	; 7
    122e:	fe 01       	movw	r30, r28
    1230:	31 96       	adiw	r30, 0x01	; 1
    1232:	de 01       	movw	r26, r28
    1234:	56 96       	adiw	r26, 0x16	; 22
    1236:	01 90       	ld	r0, Z+
    1238:	0d 92       	st	X+, r0
    123a:	8a 95       	dec	r24
    123c:	e1 f7       	brne	.-8      	; 0x1236 <_Z21task_command_executorPv+0x4f0>
    123e:	87 e0       	ldi	r24, 0x07	; 7
    1240:	fe 01       	movw	r30, r28
    1242:	76 96       	adiw	r30, 0x16	; 22
    1244:	de 01       	movw	r26, r28
    1246:	5d 96       	adiw	r26, 0x1d	; 29
    1248:	01 90       	ld	r0, Z+
    124a:	0d 92       	st	X+, r0
    124c:	8a 95       	dec	r24
    124e:	e1 f7       	brne	.-8      	; 0x1248 <_Z21task_command_executorPv+0x502>
    1250:	ce 01       	movw	r24, r28
    1252:	4d 96       	adiw	r24, 0x1d	; 29
    1254:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_Z11print_clockRK11hh_mm_ss_dd>
				Serial.println();
    1258:	8e e6       	ldi	r24, 0x6E	; 110
    125a:	98 e0       	ldi	r25, 0x08	; 8
    125c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN5Print7printlnEv>
				continue;
    1260:	86 cd       	rjmp	.-1268   	; 0xd6e <_Z21task_command_executorPv+0x28>
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
        constexpr  char back() const{
            return _data[_size-1];
        }

        constexpr bool operator == (const char * _other)const{
            for(size_t i=0;i<_size;++i){
    1266:	82 17       	cp	r24, r18
    1268:	93 07       	cpc	r25, r19
    126a:	10 f5       	brcc	.+68     	; 0x12b0 <_Z21task_command_executorPv+0x56a>
                if(_other[i] ==  (char)0){
    126c:	fc 01       	movw	r30, r24
    126e:	ec 59       	subi	r30, 0x9C	; 156
    1270:	fe 4f       	sbci	r31, 0xFE	; 254
    1272:	40 81       	ld	r20, Z
    1274:	41 11       	cpse	r20, r1
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <_Z21task_command_executorPv+0x550>
                    return _data[i] == (char)0;
    1278:	cc 55       	subi	r28, 0x5C	; 92
    127a:	df 4f       	sbci	r29, 0xFF	; 255
    127c:	48 81       	ld	r20, Y
    127e:	59 81       	ldd	r21, Y+1	; 0x01
    1280:	c4 5a       	subi	r28, 0xA4	; 164
    1282:	d0 40       	sbci	r29, 0x00	; 0
    1284:	fa 01       	movw	r30, r20
    1286:	e8 0f       	add	r30, r24
    1288:	f9 1f       	adc	r31, r25
    128a:	80 81       	ld	r24, Z
    128c:	61 e0       	ldi	r22, 0x01	; 1
    128e:	88 23       	and	r24, r24
    1290:	81 f0       	breq	.+32     	; 0x12b2 <_Z21task_command_executorPv+0x56c>
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <_Z21task_command_executorPv+0x56c>
                }else if(_other[i] != _data[i]){
    1296:	cc 55       	subi	r28, 0x5C	; 92
    1298:	df 4f       	sbci	r29, 0xFF	; 255
    129a:	e8 81       	ld	r30, Y
    129c:	f9 81       	ldd	r31, Y+1	; 0x01
    129e:	c4 5a       	subi	r28, 0xA4	; 164
    12a0:	d0 40       	sbci	r29, 0x00	; 0
    12a2:	e8 0f       	add	r30, r24
    12a4:	f9 1f       	adc	r31, r25
    12a6:	50 81       	ld	r21, Z
    12a8:	45 13       	cpse	r20, r21
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <_Z21task_command_executorPv+0x56c>
        constexpr  char back() const{
            return _data[_size-1];
        }

        constexpr bool operator == (const char * _other)const{
            for(size_t i=0;i<_size;++i){
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	db cf       	rjmp	.-74     	; 0x1266 <_Z21task_command_executorPv+0x520>
                    return _data[i] == (char)0;
                }else if(_other[i] != _data[i]){
                    return false;
				}
            }
			 return true;
    12b0:	61 2f       	mov	r22, r17
			}
			if(m_pname == "plan"){
    12b2:	66 23       	and	r22, r22
    12b4:	19 f0       	breq	.+6      	; 0x12bc <_Z21task_command_executorPv+0x576>
				print_plan();
    12b6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z10print_planv>
				continue;
    12ba:	59 cd       	rjmp	.-1358   	; 0xd6e <_Z21task_command_executorPv+0x28>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
        constexpr  char back() const{
            return _data[_size-1];
        }

        constexpr bool operator == (const char * _other)const{
            for(size_t i=0;i<_size;++i){
    12c0:	82 17       	cp	r24, r18
    12c2:	93 07       	cpc	r25, r19
    12c4:	18 f5       	brcc	.+70     	; 0x130c <_Z21task_command_executorPv+0x5c6>
                if(_other[i] ==  (char)0){
    12c6:	fc 01       	movw	r30, r24
    12c8:	e7 59       	subi	r30, 0x97	; 151
    12ca:	fe 4f       	sbci	r31, 0xFE	; 254
    12cc:	40 81       	ld	r20, Z
    12ce:	41 11       	cpse	r20, r1
    12d0:	0f c0       	rjmp	.+30     	; 0x12f0 <_Z21task_command_executorPv+0x5aa>
                    return _data[i] == (char)0;
    12d2:	cc 55       	subi	r28, 0x5C	; 92
    12d4:	df 4f       	sbci	r29, 0xFF	; 255
    12d6:	28 81       	ld	r18, Y
    12d8:	39 81       	ldd	r19, Y+1	; 0x01
    12da:	c4 5a       	subi	r28, 0xA4	; 164
    12dc:	d0 40       	sbci	r29, 0x00	; 0
    12de:	f9 01       	movw	r30, r18
    12e0:	e8 0f       	add	r30, r24
    12e2:	f9 1f       	adc	r31, r25
    12e4:	80 81       	ld	r24, Z
    12e6:	11 e0       	ldi	r17, 0x01	; 1
    12e8:	88 23       	and	r24, r24
    12ea:	81 f0       	breq	.+32     	; 0x130c <_Z21task_command_executorPv+0x5c6>
    12ec:	10 e0       	ldi	r17, 0x00	; 0
    12ee:	0e c0       	rjmp	.+28     	; 0x130c <_Z21task_command_executorPv+0x5c6>
                }else if(_other[i] != _data[i]){
    12f0:	cc 55       	subi	r28, 0x5C	; 92
    12f2:	df 4f       	sbci	r29, 0xFF	; 255
    12f4:	e8 81       	ld	r30, Y
    12f6:	f9 81       	ldd	r31, Y+1	; 0x01
    12f8:	c4 5a       	subi	r28, 0xA4	; 164
    12fa:	d0 40       	sbci	r29, 0x00	; 0
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	50 81       	ld	r21, Z
    1302:	45 13       	cpse	r20, r21
    1304:	02 c0       	rjmp	.+4      	; 0x130a <_Z21task_command_executorPv+0x5c4>
        constexpr  char back() const{
            return _data[_size-1];
        }

        constexpr bool operator == (const char * _other)const{
            for(size_t i=0;i<_size;++i){
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	db cf       	rjmp	.-74     	; 0x12c0 <_Z21task_command_executorPv+0x57a>
                if(_other[i] ==  (char)0){
                    return _data[i] == (char)0;
                }else if(_other[i] != _data[i]){
                    return false;
    130a:	16 2f       	mov	r17, r22
			}
			if(m_pname == "every"){
    130c:	11 23       	and	r17, r17
    130e:	19 f0       	breq	.+6      	; 0x1316 <_Z21task_command_executorPv+0x5d0>
				print_every();
    1310:	0e 94 27 06 	call	0xc4e	; 0xc4e <_Z11print_everyv>
				continue;
    1314:	2c cd       	rjmp	.-1448   	; 0xd6e <_Z21task_command_executorPv+0x28>
			}
			{
				char error_code[] = "unknown argument of command get";
    1316:	80 e2       	ldi	r24, 0x20	; 32
    1318:	e5 e8       	ldi	r30, 0x85	; 133
    131a:	f1 e0       	ldi	r31, 0x01	; 1
    131c:	de 01       	movw	r26, r28
    131e:	ac 59       	subi	r26, 0x9C	; 156
    1320:	bf 4f       	sbci	r27, 0xFF	; 255
    1322:	01 90       	ld	r0, Z+
    1324:	0d 92       	st	X+, r0
    1326:	8a 95       	dec	r24
    1328:	e1 f7       	brne	.-8      	; 0x1322 <_Z21task_command_executorPv+0x5dc>
				Serial.println(error_code);
    132a:	be 01       	movw	r22, r28
    132c:	6c 59       	subi	r22, 0x9C	; 156
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8e e6       	ldi	r24, 0x6E	; 110
    1332:	98 e0       	ldi	r25, 0x08	; 8
    1334:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <_ZN5Print7printlnEPKc>
			}
			continue;
    1338:	1a cd       	rjmp	.-1484   	; 0xd6e <_Z21task_command_executorPv+0x28>

0000133a <_Z18NextDayUpdatePlansv>:
#include "global.h"
#include "Pump.h"

void NextDayUpdatePlans(){
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
    1346:	cf e1       	ldi	r28, 0x1F	; 31
    1348:	d2 e0       	ldi	r29, 0x02	; 2
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	4f ef       	ldi	r20, 0xFF	; 255
    134e:	5f ef       	ldi	r21, 0xFF	; 255
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	9b 81       	ldd	r25, Y+3	; 0x03
    1358:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
	template <typename Func_t,
		Std::enable_if_same_t<Std::invoke_result_t<Func_t,T &>,void,bool> = true>
	inline void apply(Func_t && F){
		//static_assert(Std::is_same_v<Std::invoke_result_t<Func_t,T &>,void>,"not void function in void spec");
		lock();
		F(value);
    135c:	48 81       	ld	r20, Y
    135e:	59 81       	ldd	r21, Y+1	; 0x01
	water_plan.apply([](water_plan_array_t & plan){
			for(uint_least8_t i=0;i<plan.size();++i){
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	88 30       	cpi	r24, 0x08	; 8
    1364:	80 f5       	brcc	.+96     	; 0x13c6 <_Z18NextDayUpdatePlansv+0x8c>
				if(plan[i].actual){
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	9d e0       	ldi	r25, 0x0D	; 13
    136c:	92 9f       	mul	r25, r18
    136e:	f0 01       	movw	r30, r0
    1370:	93 9f       	mul	r25, r19
    1372:	f0 0d       	add	r31, r0
    1374:	11 24       	eor	r1, r1
    1376:	e4 0f       	add	r30, r20
    1378:	f5 1f       	adc	r31, r21
    137a:	90 81       	ld	r25, Z
    137c:	99 23       	and	r25, r25
    137e:	09 f1       	breq	.+66     	; 0x13c2 <_Z18NextDayUpdatePlansv+0x88>
        ptime.mm=_mm;
        ptime.ss=_ss;
        ptime.days= _days_delay;
    }
    void next_day(){
        if(ptime.days > 0)
    1380:	9d e0       	ldi	r25, 0x0D	; 13
    1382:	92 9f       	mul	r25, r18
    1384:	f0 01       	movw	r30, r0
    1386:	93 9f       	mul	r25, r19
    1388:	f0 0d       	add	r31, r0
    138a:	11 24       	eor	r1, r1
    138c:	e4 0f       	add	r30, r20
    138e:	f5 1f       	adc	r31, r21
    1390:	c5 80       	ldd	r12, Z+5	; 0x05
    1392:	d6 80       	ldd	r13, Z+6	; 0x06
    1394:	e7 80       	ldd	r14, Z+7	; 0x07
    1396:	f0 84       	ldd	r15, Z+8	; 0x08
    1398:	c1 14       	cp	r12, r1
    139a:	d1 04       	cpc	r13, r1
    139c:	e1 04       	cpc	r14, r1
    139e:	f1 04       	cpc	r15, r1
    13a0:	81 f0       	breq	.+32     	; 0x13c2 <_Z18NextDayUpdatePlansv+0x88>
            ptime.days--;
    13a2:	92 9f       	mul	r25, r18
    13a4:	f0 01       	movw	r30, r0
    13a6:	93 9f       	mul	r25, r19
    13a8:	f0 0d       	add	r31, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	e4 0f       	add	r30, r20
    13ae:	f5 1f       	adc	r31, r21
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	c9 1a       	sub	r12, r25
    13b4:	d1 08       	sbc	r13, r1
    13b6:	e1 08       	sbc	r14, r1
    13b8:	f1 08       	sbc	r15, r1
    13ba:	c5 82       	std	Z+5, r12	; 0x05
    13bc:	d6 82       	std	Z+6, r13	; 0x06
    13be:	e7 82       	std	Z+7, r14	; 0x07
    13c0:	f0 86       	std	Z+8, r15	; 0x08
#include "global.h"
#include "Pump.h"

void NextDayUpdatePlans(){
	water_plan.apply([](water_plan_array_t & plan){
			for(uint_least8_t i=0;i<plan.size();++i){
    13c2:	8f 5f       	subi	r24, 0xFF	; 255
    13c4:	ce cf       	rjmp	.-100    	; 0x1362 <_Z18NextDayUpdatePlansv+0x28>
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
	};
	void unlock(){
		xSemaphoreGive(xMutex);
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <water_plan+0x2>
    13d4:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <water_plan+0x3>
    13d8:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
    13dc:	cb e1       	ldi	r28, 0x1B	; 27
    13de:	d2 e0       	ldi	r29, 0x02	; 2
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	4f ef       	ldi	r20, 0xFF	; 255
    13e4:	5f ef       	ldi	r21, 0xFF	; 255
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
	template <typename Func_t,
		Std::enable_if_same_t<Std::invoke_result_t<Func_t,T &>,void,bool> = true>
	inline void apply(Func_t && F){
		//static_assert(Std::is_same_v<Std::invoke_result_t<Func_t,T &>,void>,"not void function in void spec");
		lock();
		F(value);
    13f2:	68 81       	ld	r22, Y
    13f4:	79 81       	ldd	r23, Y+1	; 0x01
				}
			}
		});
	
	water_every.apply([](water_every_array_t & every){
		for(uint_least8_t i=0;i<every.size();++i){
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	44 30       	cpi	r20, 0x04	; 4
    13fa:	28 f5       	brcc	.+74     	; 0x1446 <_Z18NextDayUpdatePlansv+0x10c>
			if(every[i].exist_flag){
    13fc:	84 2f       	mov	r24, r20
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	fc 01       	movw	r30, r24
    1402:	ee 0f       	add	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	9c 01       	movw	r18, r24
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	22 0f       	add	r18, r18
    140e:	33 1f       	adc	r19, r19
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	e2 0f       	add	r30, r18
    1416:	f3 1f       	adc	r31, r19
    1418:	e6 0f       	add	r30, r22
    141a:	f7 1f       	adc	r31, r23
    141c:	20 81       	ld	r18, Z
    141e:	22 23       	and	r18, r18
    1420:	81 f0       	breq	.+32     	; 0x1442 <_Z18NextDayUpdatePlansv+0x108>
        ss=_ss;
        days_delay = _days_delay > 0 ? _days_delay : 1;
        tmp_delayed_days = 0;
    }
    void next_day(){
        tmp_delayed_days++;
    1422:	fc 01       	movw	r30, r24
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	e8 0f       	add	r30, r24
    1436:	f9 1f       	adc	r31, r25
    1438:	e6 0f       	add	r30, r22
    143a:	f7 1f       	adc	r31, r23
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	82 83       	std	Z+2, r24	; 0x02
				}
			}
		});
	
	water_every.apply([](water_every_array_t & every){
		for(uint_least8_t i=0;i<every.size();++i){
    1442:	4f 5f       	subi	r20, 0xFF	; 255
    1444:	d9 cf       	rjmp	.-78     	; 0x13f8 <_Z18NextDayUpdatePlansv+0xbe>
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
	};
	void unlock(){
		xSemaphoreGive(xMutex);
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <water_every+0x2>
    1454:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <water_every+0x3>
    1458:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
			if(every[i].exist_flag){
				every[i].next_day();
			}
		}
	});
}
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	cf 90       	pop	r12
    1468:	08 95       	ret

0000146a <_Z13water_processRK11hh_mm_ss_ddm>:

hh_mm_ss_dd water_process(hh_mm_ss_dd const &current,uint32_t water_seconds_duration){
    146a:	2f 92       	push	r2
    146c:	3f 92       	push	r3
    146e:	4f 92       	push	r4
    1470:	5f 92       	push	r5
    1472:	6f 92       	push	r6
    1474:	7f 92       	push	r7
    1476:	8f 92       	push	r8
    1478:	9f 92       	push	r9
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	e1 97       	sbiw	r28, 0x31	; 49
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	fc 01       	movw	r30, r24
	hh_mm_ss_dd stop_time = current + water_seconds_duration;
    14a0:	1a 01       	movw	r2, r20
    14a2:	2b 01       	movw	r4, r22
		
		days += msecs;
		return *this;
	}
	inline hh_mm_ss_dd operator + (uint_least64_t msecs)const{
		hh_mm_ss_dd ret = *this;
    14a4:	97 e0       	ldi	r25, 0x07	; 7
    14a6:	de 01       	movw	r26, r28
    14a8:	9b 96       	adiw	r26, 0x2b	; 43
    14aa:	01 90       	ld	r0, Z+
    14ac:	0d 92       	st	X+, r0
    14ae:	9a 95       	dec	r25
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <_Z13water_processRK11hh_mm_ss_ddm+0x40>
	inline bool operator <=(hh_mm_ss_dd const & other) const{
		return other >= *this;
	}
	
	inline hh_mm_ss_dd & operator += (uint_least64_t msecs){
		msecs += ss;
    14b2:	2d a5       	ldd	r18, Y+45	; 0x2d
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a2 2c       	mov	r10, r2
    14c4:	b3 2c       	mov	r11, r3
    14c6:	c4 2c       	mov	r12, r4
    14c8:	d5 2c       	mov	r13, r5
    14ca:	e1 2c       	mov	r14, r1
    14cc:	f1 2c       	mov	r15, r1
    14ce:	00 e0       	ldi	r16, 0x00	; 0
    14d0:	10 e0       	ldi	r17, 0x00	; 0
    14d2:	0e 94 b8 22 	call	0x4570	; 0x4570 <__adddi3>
    14d6:	22 2e       	mov	r2, r18
    14d8:	33 2e       	mov	r3, r19
    14da:	44 2e       	mov	r4, r20
    14dc:	55 2e       	mov	r5, r21
    14de:	66 2e       	mov	r6, r22
    14e0:	77 2e       	mov	r7, r23
    14e2:	88 2e       	mov	r8, r24
    14e4:	99 2e       	mov	r9, r25
		ss = msecs % 60;
    14e6:	0f 2e       	mov	r0, r31
    14e8:	fc e3       	ldi	r31, 0x3C	; 60
    14ea:	af 2e       	mov	r10, r31
    14ec:	f0 2d       	mov	r31, r0
    14ee:	b1 2c       	mov	r11, r1
    14f0:	c1 2c       	mov	r12, r1
    14f2:	d1 2c       	mov	r13, r1
    14f4:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__umoddi3>
    14f8:	2d a7       	std	Y+45, r18	; 0x2d
		msecs/=60;
    14fa:	22 2d       	mov	r18, r2
    14fc:	33 2d       	mov	r19, r3
    14fe:	44 2d       	mov	r20, r4
    1500:	55 2d       	mov	r21, r5
    1502:	66 2d       	mov	r22, r6
    1504:	77 2d       	mov	r23, r7
    1506:	88 2d       	mov	r24, r8
    1508:	99 2d       	mov	r25, r9
    150a:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__udivdi3>
    150e:	a2 2e       	mov	r10, r18
    1510:	b3 2e       	mov	r11, r19
    1512:	c4 2e       	mov	r12, r20
    1514:	d5 2e       	mov	r13, r21
    1516:	e6 2e       	mov	r14, r22
    1518:	f7 2e       	mov	r15, r23
    151a:	08 2f       	mov	r16, r24
    151c:	19 2f       	mov	r17, r25
		
		msecs += mm;
    151e:	2c a5       	ldd	r18, Y+44	; 0x2c
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 b8 22 	call	0x4570	; 0x4570 <__adddi3>
    1532:	22 2e       	mov	r2, r18
    1534:	33 2e       	mov	r3, r19
    1536:	44 2e       	mov	r4, r20
    1538:	55 2e       	mov	r5, r21
    153a:	66 2e       	mov	r6, r22
    153c:	77 2e       	mov	r7, r23
    153e:	88 2e       	mov	r8, r24
    1540:	99 2e       	mov	r9, r25
		mm = msecs % 60;
    1542:	0f 2e       	mov	r0, r31
    1544:	fc e3       	ldi	r31, 0x3C	; 60
    1546:	af 2e       	mov	r10, r31
    1548:	f0 2d       	mov	r31, r0
    154a:	b1 2c       	mov	r11, r1
    154c:	c1 2c       	mov	r12, r1
    154e:	d1 2c       	mov	r13, r1
    1550:	e1 2c       	mov	r14, r1
    1552:	f1 2c       	mov	r15, r1
    1554:	00 e0       	ldi	r16, 0x00	; 0
    1556:	10 e0       	ldi	r17, 0x00	; 0
    1558:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__umoddi3>
    155c:	2c a7       	std	Y+44, r18	; 0x2c
		msecs/=60;
    155e:	22 2d       	mov	r18, r2
    1560:	33 2d       	mov	r19, r3
    1562:	44 2d       	mov	r20, r4
    1564:	55 2d       	mov	r21, r5
    1566:	66 2d       	mov	r22, r6
    1568:	77 2d       	mov	r23, r7
    156a:	88 2d       	mov	r24, r8
    156c:	99 2d       	mov	r25, r9
    156e:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__udivdi3>
    1572:	a2 2e       	mov	r10, r18
    1574:	b3 2e       	mov	r11, r19
    1576:	c4 2e       	mov	r12, r20
    1578:	d5 2e       	mov	r13, r21
    157a:	e6 2e       	mov	r14, r22
    157c:	f7 2e       	mov	r15, r23
    157e:	08 2f       	mov	r16, r24
    1580:	19 2f       	mov	r17, r25
		
		msecs += hh;
    1582:	2b a5       	ldd	r18, Y+43	; 0x2b
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 b8 22 	call	0x4570	; 0x4570 <__adddi3>
    1596:	22 2e       	mov	r2, r18
    1598:	33 2e       	mov	r3, r19
    159a:	44 2e       	mov	r4, r20
    159c:	55 2e       	mov	r5, r21
    159e:	66 2e       	mov	r6, r22
    15a0:	77 2e       	mov	r7, r23
    15a2:	88 2e       	mov	r8, r24
    15a4:	99 2e       	mov	r9, r25
		hh = msecs % 24;
    15a6:	0f 2e       	mov	r0, r31
    15a8:	f8 e1       	ldi	r31, 0x18	; 24
    15aa:	af 2e       	mov	r10, r31
    15ac:	f0 2d       	mov	r31, r0
    15ae:	b1 2c       	mov	r11, r1
    15b0:	c1 2c       	mov	r12, r1
    15b2:	d1 2c       	mov	r13, r1
    15b4:	e1 2c       	mov	r14, r1
    15b6:	f1 2c       	mov	r15, r1
    15b8:	00 e0       	ldi	r16, 0x00	; 0
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__umoddi3>
    15c0:	2b a7       	std	Y+43, r18	; 0x2b
		msecs/=24;
    15c2:	22 2d       	mov	r18, r2
    15c4:	33 2d       	mov	r19, r3
    15c6:	44 2d       	mov	r20, r4
    15c8:	55 2d       	mov	r21, r5
    15ca:	66 2d       	mov	r22, r6
    15cc:	77 2d       	mov	r23, r7
    15ce:	88 2d       	mov	r24, r8
    15d0:	99 2d       	mov	r25, r9
    15d2:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__udivdi3>
    15d6:	02 2f       	mov	r16, r18
    15d8:	13 2f       	mov	r17, r19
    15da:	24 2f       	mov	r18, r20
    15dc:	35 2f       	mov	r19, r21
		
		days += msecs;
    15de:	8e a5       	ldd	r24, Y+46	; 0x2e
    15e0:	9f a5       	ldd	r25, Y+47	; 0x2f
    15e2:	a8 a9       	ldd	r26, Y+48	; 0x30
    15e4:	b9 a9       	ldd	r27, Y+49	; 0x31
    15e6:	08 0f       	add	r16, r24
    15e8:	19 1f       	adc	r17, r25
    15ea:	2a 1f       	adc	r18, r26
    15ec:	3b 1f       	adc	r19, r27
    15ee:	0e a7       	std	Y+46, r16	; 0x2e
    15f0:	1f a7       	std	Y+47, r17	; 0x2f
    15f2:	28 ab       	std	Y+48, r18	; 0x30
    15f4:	39 ab       	std	Y+49, r19	; 0x31
		return *this;
	}
	inline hh_mm_ss_dd operator + (uint_least64_t msecs)const{
		hh_mm_ss_dd ret = *this;
		ret+=msecs;
		return ret;
    15f6:	87 e0       	ldi	r24, 0x07	; 7
    15f8:	fe 01       	movw	r30, r28
    15fa:	bb 96       	adiw	r30, 0x2b	; 43
    15fc:	de 01       	movw	r26, r28
    15fe:	56 96       	adiw	r26, 0x16	; 22
    1600:	01 90       	ld	r0, Z+
    1602:	0d 92       	st	X+, r0
    1604:	8a 95       	dec	r24
    1606:	e1 f7       	brne	.-8      	; 0x1600 <_Z13water_processRK11hh_mm_ss_ddm+0x196>
    1608:	87 e0       	ldi	r24, 0x07	; 7
    160a:	fe 01       	movw	r30, r28
    160c:	76 96       	adiw	r30, 0x16	; 22
    160e:	de 01       	movw	r26, r28
    1610:	94 96       	adiw	r26, 0x24	; 36
    1612:	01 90       	ld	r0, Z+
    1614:	0d 92       	st	X+, r0
    1616:	8a 95       	dec	r24
    1618:	e1 f7       	brne	.-8      	; 0x1612 <_Z13water_processRK11hh_mm_ss_ddm+0x1a8>
#define PIN_MASK_12 0b00010000
#define PIN_MASK_13 0b00100000

inline void set_port_bit(volatile uint8_t & _port,uint8_t bit_num,uint8_t value){
	if(value){
		_port |= (1<<bit_num);
    161a:	88 b1       	in	r24, 0x08	; 8
    161c:	84 60       	ori	r24, 0x04	; 4
    161e:	88 b9       	out	0x08, r24	; 8
	water_impl.water();
	while(1){
		vTaskDelay(1000);
    1620:	88 ee       	ldi	r24, 0xE8	; 232
    1622:	93 e0       	ldi	r25, 0x03	; 3
    1624:	0e 94 79 18 	call	0x30f2	; 0x30f2 <vTaskDelay>
struct guard_timer0{
	mutex m;
	inline guard_timer0(){}
	
	inline void lock(){
		TIMSK0 = 0;
    1628:	0e e6       	ldi	r16, 0x6E	; 110
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	f8 01       	movw	r30, r16
    162e:	10 82       	st	Z, r1
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
    1630:	0f 2e       	mov	r0, r31
    1632:	fc ec       	ldi	r31, 0xCC	; 204
    1634:	ef 2e       	mov	r14, r31
    1636:	f1 e0       	ldi	r31, 0x01	; 1
    1638:	ff 2e       	mov	r15, r31
    163a:	f0 2d       	mov	r31, r0
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	4f ef       	ldi	r20, 0xFF	; 255
    1640:	5f ef       	ldi	r21, 0xFF	; 255
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	f7 01       	movw	r30, r14
    1648:	87 a5       	ldd	r24, Z+47	; 0x2f
    164a:	90 a9       	ldd	r25, Z+48	; 0x30
    164c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
		auto curr_time = clocks.get([](Clocks const & clk){return clk.current();});
    1650:	87 e0       	ldi	r24, 0x07	; 7
    1652:	f7 01       	movw	r30, r14
    1654:	de 01       	movw	r26, r28
    1656:	1f 96       	adiw	r26, 0x0f	; 15
    1658:	01 90       	ld	r0, Z+
    165a:	0d 92       	st	X+, r0
    165c:	8a 95       	dec	r24
    165e:	e1 f7       	brne	.-8      	; 0x1658 <_Z13water_processRK11hh_mm_ss_ddm+0x1ee>
    1660:	87 e0       	ldi	r24, 0x07	; 7
    1662:	fe 01       	movw	r30, r28
    1664:	3f 96       	adiw	r30, 0x0f	; 15
    1666:	de 01       	movw	r26, r28
    1668:	18 96       	adiw	r26, 0x08	; 8
    166a:	01 90       	ld	r0, Z+
    166c:	0d 92       	st	X+, r0
    166e:	8a 95       	dec	r24
    1670:	e1 f7       	brne	.-8      	; 0x166a <_Z13water_processRK11hh_mm_ss_ddm+0x200>
	
	
	template <typename Func_t>
	inline auto get(Func_t && F) const{
		lock();
		auto m_value = F(value);
    1672:	87 e0       	ldi	r24, 0x07	; 7
    1674:	fe 01       	movw	r30, r28
    1676:	38 96       	adiw	r30, 0x08	; 8
    1678:	de 01       	movw	r26, r28
    167a:	9b 96       	adiw	r26, 0x2b	; 43
    167c:	01 90       	ld	r0, Z+
    167e:	0d 92       	st	X+, r0
    1680:	8a 95       	dec	r24
    1682:	e1 f7       	brne	.-8      	; 0x167c <_Z13water_processRK11hh_mm_ss_ddm+0x212>
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
	};
	void unlock(){
		xSemaphoreGive(xMutex);
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	f7 01       	movw	r30, r14
    1690:	87 a5       	ldd	r24, Z+47	; 0x2f
    1692:	90 a9       	ldd	r25, Z+48	; 0x30
    1694:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
		TIMSK0 = 0;
		m.lock();
	}
	inline void unlock(){
		m.unlock();
		TIMSK0 = 1<<TOIE0;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	f8 01       	movw	r30, r16
    169c:	80 83       	st	Z, r24
	template <typename Func_t>
	inline auto get(Func_t && F) const{
		lock();
		auto m_value = F(value);
		unlock();
		return m_value;
    169e:	87 e0       	ldi	r24, 0x07	; 7
    16a0:	fe 01       	movw	r30, r28
    16a2:	bb 96       	adiw	r30, 0x2b	; 43
    16a4:	de 01       	movw	r26, r28
    16a6:	11 96       	adiw	r26, 0x01	; 1
    16a8:	01 90       	ld	r0, Z+
    16aa:	0d 92       	st	X+, r0
    16ac:	8a 95       	dec	r24
    16ae:	e1 f7       	brne	.-8      	; 0x16a8 <_Z13water_processRK11hh_mm_ss_ddm+0x23e>
    16b0:	87 e0       	ldi	r24, 0x07	; 7
    16b2:	fe 01       	movw	r30, r28
    16b4:	31 96       	adiw	r30, 0x01	; 1
    16b6:	de 01       	movw	r26, r28
    16b8:	9b 96       	adiw	r26, 0x2b	; 43
    16ba:	01 90       	ld	r0, Z+
    16bc:	0d 92       	st	X+, r0
    16be:	8a 95       	dec	r24
    16c0:	e1 f7       	brne	.-8      	; 0x16ba <_Z13water_processRK11hh_mm_ss_ddm+0x250>
	inline void on_out_of_water(){
		stop();
	}
	
	bool is_out_of_water() const{
		if(m_manage.Read() && !m_out_of_water.Read()){
    16c2:	42 9b       	sbis	0x08, 2	; 8
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <_Z13water_processRK11hh_mm_ss_ddm+0x264>
    16c6:	42 99       	sbic	0x08, 2	; 8
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <_Z13water_processRK11hh_mm_ss_ddm+0x268>
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <_Z13water_processRK11hh_mm_ss_ddm+0x26a>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <_Z13water_processRK11hh_mm_ss_ddm+0x26a>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
		if(water_impl.is_out_of_water() || curr_time >= stop_time){
    16d4:	81 11       	cpse	r24, r1
    16d6:	26 c0       	rjmp	.+76     	; 0x1724 <_Z13water_processRK11hh_mm_ss_ddm+0x2ba>
	}
	inline bool operator <(hh_mm_ss_dd const & other) const{
		return other > *this;
	}
	inline bool operator >=(hh_mm_ss_dd const & other) const{
		if(days > other.days){
    16d8:	0e a5       	ldd	r16, Y+46	; 0x2e
    16da:	1f a5       	ldd	r17, Y+47	; 0x2f
    16dc:	28 a9       	ldd	r18, Y+48	; 0x30
    16de:	39 a9       	ldd	r19, Y+49	; 0x31
    16e0:	4f a1       	ldd	r20, Y+39	; 0x27
    16e2:	58 a5       	ldd	r21, Y+40	; 0x28
    16e4:	69 a5       	ldd	r22, Y+41	; 0x29
    16e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    16e8:	40 17       	cp	r20, r16
    16ea:	51 07       	cpc	r21, r17
    16ec:	62 07       	cpc	r22, r18
    16ee:	73 07       	cpc	r23, r19
    16f0:	90 f0       	brcs	.+36     	; 0x1716 <_Z13water_processRK11hh_mm_ss_ddm+0x2ac>
			return true;
		} else if (days < other.days) {
    16f2:	04 17       	cp	r16, r20
    16f4:	15 07       	cpc	r17, r21
    16f6:	26 07       	cpc	r18, r22
    16f8:	37 07       	cpc	r19, r23
    16fa:	a0 f0       	brcs	.+40     	; 0x1724 <_Z13water_processRK11hh_mm_ss_ddm+0x2ba>
			return false;
		}
		
		if(hh > other.hh){
    16fc:	2b a5       	ldd	r18, Y+43	; 0x2b
    16fe:	9c a1       	ldd	r25, Y+36	; 0x24
    1700:	92 17       	cp	r25, r18
    1702:	58 f0       	brcs	.+22     	; 0x171a <_Z13water_processRK11hh_mm_ss_ddm+0x2b0>
			return true;
		} else if (hh < other.hh) {
    1704:	29 17       	cp	r18, r25
    1706:	70 f0       	brcs	.+28     	; 0x1724 <_Z13water_processRK11hh_mm_ss_ddm+0x2ba>
			return false;
		}
		
		if(mm > other.mm){
    1708:	2c a5       	ldd	r18, Y+44	; 0x2c
    170a:	9d a1       	ldd	r25, Y+37	; 0x25
    170c:	92 17       	cp	r25, r18
    170e:	38 f0       	brcs	.+14     	; 0x171e <_Z13water_processRK11hh_mm_ss_ddm+0x2b4>
			return true;
		} else if (mm < other.mm) {
    1710:	29 17       	cp	r18, r25
    1712:	38 f4       	brcc	.+14     	; 0x1722 <_Z13water_processRK11hh_mm_ss_ddm+0x2b8>
    1714:	07 c0       	rjmp	.+14     	; 0x1724 <_Z13water_processRK11hh_mm_ss_ddm+0x2ba>
	inline bool operator <(hh_mm_ss_dd const & other) const{
		return other > *this;
	}
	inline bool operator >=(hh_mm_ss_dd const & other) const{
		if(days > other.days){
			return true;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <_Z13water_processRK11hh_mm_ss_ddm+0x2ba>
		} else if (days < other.days) {
			return false;
		}
		
		if(hh > other.hh){
			return true;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <_Z13water_processRK11hh_mm_ss_ddm+0x2ba>
		} else if (hh < other.hh) {
			return false;
		}
		
		if(mm > other.mm){
			return true;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <_Z13water_processRK11hh_mm_ss_ddm+0x2ba>
		} else if (mm < other.mm) {
			return false;
		}
		
		if(ss >= other.ss){
			return true;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	88 23       	and	r24, r24
    1726:	09 f4       	brne	.+2      	; 0x172a <_Z13water_processRK11hh_mm_ss_ddm+0x2c0>
    1728:	7b cf       	rjmp	.-266    	; 0x1620 <_Z13water_processRK11hh_mm_ss_ddm+0x1b6>
	} else {
		_port &= ~(1<<bit_num);
    172a:	88 b1       	in	r24, 0x08	; 8
    172c:	8b 7f       	andi	r24, 0xFB	; 251
    172e:	88 b9       	out	0x08, r24	; 8
			water_impl.stop();
			return curr_time;
    1730:	87 e0       	ldi	r24, 0x07	; 7
    1732:	fe 01       	movw	r30, r28
    1734:	bb 96       	adiw	r30, 0x2b	; 43
    1736:	de 01       	movw	r26, r28
    1738:	5d 96       	adiw	r26, 0x1d	; 29
    173a:	01 90       	ld	r0, Z+
    173c:	0d 92       	st	X+, r0
    173e:	8a 95       	dec	r24
    1740:	e1 f7       	brne	.-8      	; 0x173a <_Z13water_processRK11hh_mm_ss_ddm+0x2d0>
    1742:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1744:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1746:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1748:	58 a1       	ldd	r21, Y+32	; 0x20
    174a:	69 a1       	ldd	r22, Y+33	; 0x21
    174c:	7a a1       	ldd	r23, Y+34	; 0x22
		}
	}
}
    174e:	8b a1       	ldd	r24, Y+35	; 0x23
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	e1 96       	adiw	r28, 0x31	; 49
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	bf 90       	pop	r11
    1770:	af 90       	pop	r10
    1772:	9f 90       	pop	r9
    1774:	8f 90       	pop	r8
    1776:	7f 90       	pop	r7
    1778:	6f 90       	pop	r6
    177a:	5f 90       	pop	r5
    177c:	4f 90       	pop	r4
    177e:	3f 90       	pop	r3
    1780:	2f 90       	pop	r2
    1782:	08 95       	ret

00001784 <_Z13task_wateringPv>:

void task_watering(void *){
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	ce 59       	subi	r28, 0x9E	; 158
    178e:	d1 09       	sbc	r29, r1
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
struct guard_timer0{
	mutex m;
	inline guard_timer0(){}
	
	inline void lock(){
		TIMSK0 = 0;
    179a:	0e e6       	ldi	r16, 0x6E	; 110
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	f8 01       	movw	r30, r16
    17a0:	10 82       	st	Z, r1
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
    17a2:	0f 2e       	mov	r0, r31
    17a4:	fc ec       	ldi	r31, 0xCC	; 204
    17a6:	ef 2e       	mov	r14, r31
    17a8:	f1 e0       	ldi	r31, 0x01	; 1
    17aa:	ff 2e       	mov	r15, r31
    17ac:	f0 2d       	mov	r31, r0
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	4f ef       	ldi	r20, 0xFF	; 255
    17b2:	5f ef       	ldi	r21, 0xFF	; 255
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	f7 01       	movw	r30, r14
    17ba:	87 a5       	ldd	r24, Z+47	; 0x2f
    17bc:	90 a9       	ldd	r25, Z+48	; 0x30
    17be:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
	hh_mm_ss_dd last_water = clocks.get([](Clocks const & clk){return clk.current();});
    17c2:	87 e0       	ldi	r24, 0x07	; 7
    17c4:	f7 01       	movw	r30, r14
    17c6:	de 01       	movw	r26, r28
    17c8:	a2 5b       	subi	r26, 0xB2	; 178
    17ca:	bf 4f       	sbci	r27, 0xFF	; 255
    17cc:	01 90       	ld	r0, Z+
    17ce:	0d 92       	st	X+, r0
    17d0:	8a 95       	dec	r24
    17d2:	e1 f7       	brne	.-8      	; 0x17cc <_Z13task_wateringPv+0x48>
    17d4:	87 e0       	ldi	r24, 0x07	; 7
    17d6:	fe 01       	movw	r30, r28
    17d8:	e2 5b       	subi	r30, 0xB2	; 178
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	de 01       	movw	r26, r28
    17de:	a9 5b       	subi	r26, 0xB9	; 185
    17e0:	bf 4f       	sbci	r27, 0xFF	; 255
    17e2:	01 90       	ld	r0, Z+
    17e4:	0d 92       	st	X+, r0
    17e6:	8a 95       	dec	r24
    17e8:	e1 f7       	brne	.-8      	; 0x17e2 <_Z13task_wateringPv+0x5e>
	
	
	template <typename Func_t>
	inline auto get(Func_t && F) const{
		lock();
		auto m_value = F(value);
    17ea:	87 e0       	ldi	r24, 0x07	; 7
    17ec:	fe 01       	movw	r30, r28
    17ee:	e9 5b       	subi	r30, 0xB9	; 185
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	de 01       	movw	r26, r28
    17f4:	a9 58       	subi	r26, 0x89	; 137
    17f6:	bf 4f       	sbci	r27, 0xFF	; 255
    17f8:	01 90       	ld	r0, Z+
    17fa:	0d 92       	st	X+, r0
    17fc:	8a 95       	dec	r24
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <_Z13task_wateringPv+0x74>
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
	};
	void unlock(){
		xSemaphoreGive(xMutex);
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	f7 01       	movw	r30, r14
    180c:	87 a5       	ldd	r24, Z+47	; 0x2f
    180e:	90 a9       	ldd	r25, Z+48	; 0x30
    1810:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
		TIMSK0 = 0;
		m.lock();
	}
	inline void unlock(){
		m.unlock();
		TIMSK0 = 1<<TOIE0;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	f8 01       	movw	r30, r16
    1818:	80 83       	st	Z, r24
	template <typename Func_t>
	inline auto get(Func_t && F) const{
		lock();
		auto m_value = F(value);
		unlock();
		return m_value;
    181a:	87 e0       	ldi	r24, 0x07	; 7
    181c:	fe 01       	movw	r30, r28
    181e:	e9 58       	subi	r30, 0x89	; 137
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	de 01       	movw	r26, r28
    1824:	a0 5c       	subi	r26, 0xC0	; 192
    1826:	bf 4f       	sbci	r27, 0xFF	; 255
    1828:	01 90       	ld	r0, Z+
    182a:	0d 92       	st	X+, r0
    182c:	8a 95       	dec	r24
    182e:	e1 f7       	brne	.-8      	; 0x1828 <_Z13task_wateringPv+0xa4>
    1830:	87 e0       	ldi	r24, 0x07	; 7
    1832:	fe 01       	movw	r30, r28
    1834:	e0 5c       	subi	r30, 0xC0	; 192
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	de 01       	movw	r26, r28
    183a:	ab 5a       	subi	r26, 0xAB	; 171
    183c:	bf 4f       	sbci	r27, 0xFF	; 255
    183e:	01 90       	ld	r0, Z+
    1840:	0d 92       	st	X+, r0
    1842:	8a 95       	dec	r24
    1844:	e1 f7       	brne	.-8      	; 0x183e <_Z13task_wateringPv+0xba>
    1846:	87 e0       	ldi	r24, 0x07	; 7
    1848:	fe 01       	movw	r30, r28
    184a:	eb 5a       	subi	r30, 0xAB	; 171
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	de 01       	movw	r26, r28
    1850:	a0 59       	subi	r26, 0x90	; 144
    1852:	bf 4f       	sbci	r27, 0xFF	; 255
    1854:	01 90       	ld	r0, Z+
    1856:	0d 92       	st	X+, r0
    1858:	8a 95       	dec	r24
    185a:	e1 f7       	brne	.-8      	; 0x1854 <_Z13task_wateringPv+0xd0>
	
	while(1){
		vTaskDelay(1000);
    185c:	88 ee       	ldi	r24, 0xE8	; 232
    185e:	93 e0       	ldi	r25, 0x03	; 3
    1860:	0e 94 79 18 	call	0x30f2	; 0x30f2 <vTaskDelay>
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
    1864:	0d ef       	ldi	r16, 0xFD	; 253
    1866:	11 e0       	ldi	r17, 0x01	; 1
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	4f ef       	ldi	r20, 0xFF	; 255
    186c:	5f ef       	ldi	r21, 0xFF	; 255
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	f8 01       	movw	r30, r16
    1874:	84 8d       	ldd	r24, Z+28	; 0x1c
    1876:	95 8d       	ldd	r25, Z+29	; 0x1d
    1878:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
		uint_least32_t m_delay = settings.get([](Settings const & S){return S.Twd;});
    187c:	f8 01       	movw	r30, r16
    187e:	c4 88       	ldd	r12, Z+20	; 0x14
    1880:	d5 88       	ldd	r13, Z+21	; 0x15
    1882:	e6 88       	ldd	r14, Z+22	; 0x16
    1884:	f7 88       	ldd	r15, Z+23	; 0x17
	};
	void unlock(){
		xSemaphoreGive(xMutex);
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	84 8d       	ldd	r24, Z+28	; 0x1c
    1892:	95 8d       	ldd	r25, Z+29	; 0x1d
    1894:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
    1898:	8e 01       	movw	r16, r28
    189a:	07 57       	subi	r16, 0x77	; 119
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	f8 01       	movw	r30, r16
    18a0:	c0 82       	st	Z, r12
    18a2:	d1 82       	std	Z+1, r13	; 0x01
    18a4:	e2 82       	std	Z+2, r14	; 0x02
    18a6:	f3 82       	std	Z+3, r15	; 0x03
struct guard_timer0{
	mutex m;
	inline guard_timer0(){}
	
	inline void lock(){
		TIMSK0 = 0;
    18a8:	0f 2e       	mov	r0, r31
    18aa:	fe e6       	ldi	r31, 0x6E	; 110
    18ac:	ef 2e       	mov	r14, r31
    18ae:	f1 2c       	mov	r15, r1
    18b0:	f0 2d       	mov	r31, r0
    18b2:	f7 01       	movw	r30, r14
    18b4:	10 82       	st	Z, r1
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
    18b6:	0f 2e       	mov	r0, r31
    18b8:	fc ec       	ldi	r31, 0xCC	; 204
    18ba:	cf 2e       	mov	r12, r31
    18bc:	f1 e0       	ldi	r31, 0x01	; 1
    18be:	df 2e       	mov	r13, r31
    18c0:	f0 2d       	mov	r31, r0
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	4f ef       	ldi	r20, 0xFF	; 255
    18c6:	5f ef       	ldi	r21, 0xFF	; 255
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	f6 01       	movw	r30, r12
    18ce:	87 a5       	ldd	r24, Z+47	; 0x2f
    18d0:	90 a9       	ldd	r25, Z+48	; 0x30
    18d2:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
		hh_mm_ss_dd current = clocks.get([](Clocks const & clk){return clk.current();});
    18d6:	87 e0       	ldi	r24, 0x07	; 7
    18d8:	f6 01       	movw	r30, r12
    18da:	de 01       	movw	r26, r28
    18dc:	d2 96       	adiw	r26, 0x32	; 50
    18de:	01 90       	ld	r0, Z+
    18e0:	0d 92       	st	X+, r0
    18e2:	8a 95       	dec	r24
    18e4:	e1 f7       	brne	.-8      	; 0x18de <_Z13task_wateringPv+0x15a>
    18e6:	87 e0       	ldi	r24, 0x07	; 7
    18e8:	fe 01       	movw	r30, r28
    18ea:	f2 96       	adiw	r30, 0x32	; 50
    18ec:	de 01       	movw	r26, r28
    18ee:	9b 96       	adiw	r26, 0x2b	; 43
    18f0:	01 90       	ld	r0, Z+
    18f2:	0d 92       	st	X+, r0
    18f4:	8a 95       	dec	r24
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <_Z13task_wateringPv+0x16c>
	
	
	template <typename Func_t>
	inline auto get(Func_t && F) const{
		lock();
		auto m_value = F(value);
    18f8:	87 e0       	ldi	r24, 0x07	; 7
    18fa:	fe 01       	movw	r30, r28
    18fc:	bb 96       	adiw	r30, 0x2b	; 43
    18fe:	de 01       	movw	r26, r28
    1900:	a9 58       	subi	r26, 0x89	; 137
    1902:	bf 4f       	sbci	r27, 0xFF	; 255
    1904:	01 90       	ld	r0, Z+
    1906:	0d 92       	st	X+, r0
    1908:	8a 95       	dec	r24
    190a:	e1 f7       	brne	.-8      	; 0x1904 <_Z13task_wateringPv+0x180>
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
	};
	void unlock(){
		xSemaphoreGive(xMutex);
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	f6 01       	movw	r30, r12
    1918:	87 a5       	ldd	r24, Z+47	; 0x2f
    191a:	90 a9       	ldd	r25, Z+48	; 0x30
    191c:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
		TIMSK0 = 0;
		m.lock();
	}
	inline void unlock(){
		m.unlock();
		TIMSK0 = 1<<TOIE0;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	f7 01       	movw	r30, r14
    1924:	80 83       	st	Z, r24
	template <typename Func_t>
	inline auto get(Func_t && F) const{
		lock();
		auto m_value = F(value);
		unlock();
		return m_value;
    1926:	87 e0       	ldi	r24, 0x07	; 7
    1928:	fe 01       	movw	r30, r28
    192a:	e9 58       	subi	r30, 0x89	; 137
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	de 01       	movw	r26, r28
    1930:	94 96       	adiw	r26, 0x24	; 36
    1932:	01 90       	ld	r0, Z+
    1934:	0d 92       	st	X+, r0
    1936:	8a 95       	dec	r24
    1938:	e1 f7       	brne	.-8      	; 0x1932 <_Z13task_wateringPv+0x1ae>
    193a:	87 e0       	ldi	r24, 0x07	; 7
    193c:	fe 01       	movw	r30, r28
    193e:	b4 96       	adiw	r30, 0x24	; 36
    1940:	de 01       	movw	r26, r28
    1942:	d9 96       	adiw	r26, 0x39	; 57
    1944:	01 90       	ld	r0, Z+
    1946:	0d 92       	st	X+, r0
    1948:	8a 95       	dec	r24
    194a:	e1 f7       	brne	.-8      	; 0x1944 <_Z13task_wateringPv+0x1c0>
    194c:	ce 01       	movw	r24, r28
    194e:	82 58       	subi	r24, 0x82	; 130
    1950:	9f 4f       	sbci	r25, 0xFF	; 255
    1952:	27 e0       	ldi	r18, 0x07	; 7
    1954:	fe 01       	movw	r30, r28
    1956:	f9 96       	adiw	r30, 0x39	; 57
    1958:	dc 01       	movw	r26, r24
    195a:	01 90       	ld	r0, Z+
    195c:	0d 92       	st	X+, r0
    195e:	2a 95       	dec	r18
    1960:	e1 f7       	brne	.-8      	; 0x195a <_Z13task_wateringPv+0x1d6>
		bool ready = false;
    1962:	de 01       	movw	r26, r28
    1964:	a3 57       	subi	r26, 0x73	; 115
    1966:	bf 4f       	sbci	r27, 0xFF	; 255
    1968:	1c 92       	st	X, r1
		uint_least32_t duration = 0; 
    196a:	fe 01       	movw	r30, r28
    196c:	eb 57       	subi	r30, 0x7B	; 123
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	10 82       	st	Z, r1
    1972:	11 82       	std	Z+1, r1	; 0x01
    1974:	12 82       	std	Z+2, r1	; 0x02
    1976:	13 82       	std	Z+3, r1	; 0x03
		water_plan.apply([&current,&last_water,&ready,&duration,&m_delay](water_plan_array_t & plan){
    1978:	a8 96       	adiw	r28, 0x28	; 40
    197a:	9f af       	std	Y+63, r25	; 0x3f
    197c:	8e af       	std	Y+62, r24	; 0x3e
    197e:	a8 97       	sbiw	r28, 0x28	; 40
    1980:	0e 97       	sbiw	r24, 0x0e	; 14
    1982:	aa 96       	adiw	r28, 0x2a	; 42
    1984:	9f af       	std	Y+63, r25	; 0x3f
    1986:	8e af       	std	Y+62, r24	; 0x3e
    1988:	aa 97       	sbiw	r28, 0x2a	; 42
    198a:	ac 96       	adiw	r28, 0x2c	; 44
    198c:	bf af       	std	Y+63, r27	; 0x3f
    198e:	ae af       	std	Y+62, r26	; 0x3e
    1990:	ac 97       	sbiw	r28, 0x2c	; 44
    1992:	ae 96       	adiw	r28, 0x2e	; 46
    1994:	ff af       	std	Y+63, r31	; 0x3f
    1996:	ee af       	std	Y+62, r30	; 0x3e
    1998:	ae 97       	sbiw	r28, 0x2e	; 46
    199a:	e0 96       	adiw	r28, 0x30	; 48
    199c:	1f af       	std	Y+63, r17	; 0x3f
    199e:	0e af       	std	Y+62, r16	; 0x3e
    19a0:	e0 97       	sbiw	r28, 0x30	; 48
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
    19a2:	0f e1       	ldi	r16, 0x1F	; 31
    19a4:	12 e0       	ldi	r17, 0x02	; 2
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	4f ef       	ldi	r20, 0xFF	; 255
    19aa:	5f ef       	ldi	r21, 0xFF	; 255
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	f8 01       	movw	r30, r16
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
	template <typename Func_t,
		Std::enable_if_same_t<Std::invoke_result_t<Func_t,T &>,void,bool> = true>
	inline void apply(Func_t && F){
		//static_assert(Std::is_same_v<Std::invoke_result_t<Func_t,T &>,void>,"not void function in void spec");
		lock();
		F(value);
    19ba:	f8 01       	movw	r30, r16
    19bc:	20 80       	ld	r2, Z
    19be:	31 80       	ldd	r3, Z+1	; 0x01
			for (uint_least8_t i=0;i<plan.size();++i){
    19c0:	81 2c       	mov	r8, r1
    19c2:	98 2c       	mov	r9, r8
    19c4:	f7 e0       	ldi	r31, 0x07	; 7
    19c6:	f9 15       	cp	r31, r9
    19c8:	08 f4       	brcc	.+2      	; 0x19cc <_Z13task_wateringPv+0x248>
    19ca:	8b c2       	rjmp	.+1302   	; 0x1ee2 <_Z13task_wateringPv+0x75e>
				if(plan[i].actual){
    19cc:	69 2c       	mov	r6, r9
    19ce:	71 2c       	mov	r7, r1
    19d0:	8d e0       	ldi	r24, 0x0D	; 13
    19d2:	86 9d       	mul	r24, r6
    19d4:	f0 01       	movw	r30, r0
    19d6:	87 9d       	mul	r24, r7
    19d8:	f0 0d       	add	r31, r0
    19da:	11 24       	eor	r1, r1
    19dc:	e2 0d       	add	r30, r2
    19de:	f3 1d       	adc	r31, r3
    19e0:	80 80       	ld	r8, Z
    19e2:	88 20       	and	r8, r8
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <_Z13task_wateringPv+0x264>
    19e6:	7b c2       	rjmp	.+1270   	; 0x1ede <_Z13task_wateringPv+0x75a>
		vTaskDelay(1000);
		uint_least32_t m_delay = settings.get([](Settings const & S){return S.Twd;});
		hh_mm_ss_dd current = clocks.get([](Clocks const & clk){return clk.current();});
		bool ready = false;
		uint_least32_t duration = 0; 
		water_plan.apply([&current,&last_water,&ready,&duration,&m_delay](water_plan_array_t & plan){
    19e8:	a8 96       	adiw	r28, 0x28	; 40
    19ea:	4e ac       	ldd	r4, Y+62	; 0x3e
    19ec:	5f ac       	ldd	r5, Y+63	; 0x3f
    19ee:	a8 97       	sbiw	r28, 0x28	; 40
			for (uint_least8_t i=0;i<plan.size();++i){
				if(plan[i].actual){
					if(plan[i].is_ready(current.hh,current.mm,current.ss)){
    19f0:	f2 01       	movw	r30, r4
    19f2:	42 81       	ldd	r20, Z+2	; 0x02
    19f4:	31 81       	ldd	r19, Z+1	; 0x01
    19f6:	20 81       	ld	r18, Z
    }

    bool is_ready(uint_least8_t tmp_hh,uint_least8_t tmp_mm,uint_least8_t tmp_ss){
        if(ptime.days > 0){
    19f8:	86 9d       	mul	r24, r6
    19fa:	f0 01       	movw	r30, r0
    19fc:	87 9d       	mul	r24, r7
    19fe:	f0 0d       	add	r31, r0
    1a00:	11 24       	eor	r1, r1
    1a02:	e2 0d       	add	r30, r2
    1a04:	f3 1d       	adc	r31, r3
    1a06:	85 81       	ldd	r24, Z+5	; 0x05
    1a08:	96 81       	ldd	r25, Z+6	; 0x06
    1a0a:	a7 81       	ldd	r26, Z+7	; 0x07
    1a0c:	b0 85       	ldd	r27, Z+8	; 0x08
    1a0e:	89 2b       	or	r24, r25
    1a10:	8a 2b       	or	r24, r26
    1a12:	8b 2b       	or	r24, r27
    1a14:	49 f5       	brne	.+82     	; 0x1a68 <_Z13task_wateringPv+0x2e4>
            return false;
        }
        if(ptime.hh > tmp_hh){
    1a16:	8d e0       	ldi	r24, 0x0D	; 13
    1a18:	86 9d       	mul	r24, r6
    1a1a:	f0 01       	movw	r30, r0
    1a1c:	87 9d       	mul	r24, r7
    1a1e:	f0 0d       	add	r31, r0
    1a20:	11 24       	eor	r1, r1
    1a22:	e2 0d       	add	r30, r2
    1a24:	f3 1d       	adc	r31, r3
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	28 17       	cp	r18, r24
    1a2a:	00 f1       	brcs	.+64     	; 0x1a6c <_Z13task_wateringPv+0x2e8>
            return false;
        } else if (ptime.hh < tmp_hh ) {
    1a2c:	82 17       	cp	r24, r18
    1a2e:	08 f1       	brcs	.+66     	; 0x1a72 <_Z13task_wateringPv+0x2ee>
            return true;
        }

        if(ptime.mm > tmp_mm){
    1a30:	8d e0       	ldi	r24, 0x0D	; 13
    1a32:	86 9d       	mul	r24, r6
    1a34:	f0 01       	movw	r30, r0
    1a36:	87 9d       	mul	r24, r7
    1a38:	f0 0d       	add	r31, r0
    1a3a:	11 24       	eor	r1, r1
    1a3c:	e2 0d       	add	r30, r2
    1a3e:	f3 1d       	adc	r31, r3
    1a40:	83 81       	ldd	r24, Z+3	; 0x03
    1a42:	38 17       	cp	r19, r24
    1a44:	a8 f0       	brcs	.+42     	; 0x1a70 <_Z13task_wateringPv+0x2ec>
            return false;
        } else if (ptime.mm < tmp_mm) {
    1a46:	83 17       	cp	r24, r19
    1a48:	a0 f0       	brcs	.+40     	; 0x1a72 <_Z13task_wateringPv+0x2ee>
            return true;
        }
        return tmp_ss >= ptime.ss;
    1a4a:	8d e0       	ldi	r24, 0x0D	; 13
    1a4c:	86 9d       	mul	r24, r6
    1a4e:	f0 01       	movw	r30, r0
    1a50:	87 9d       	mul	r24, r7
    1a52:	f0 0d       	add	r31, r0
    1a54:	11 24       	eor	r1, r1
    1a56:	e2 0d       	add	r30, r2
    1a58:	f3 1d       	adc	r31, r3
    1a5a:	88 24       	eor	r8, r8
    1a5c:	83 94       	inc	r8
    1a5e:	84 81       	ldd	r24, Z+4	; 0x04
    1a60:	48 17       	cp	r20, r24
    1a62:	38 f4       	brcc	.+14     	; 0x1a72 <_Z13task_wateringPv+0x2ee>
    1a64:	81 2c       	mov	r8, r1
    1a66:	05 c0       	rjmp	.+10     	; 0x1a72 <_Z13task_wateringPv+0x2ee>
            ptime.days--;
    }

    bool is_ready(uint_least8_t tmp_hh,uint_least8_t tmp_mm,uint_least8_t tmp_ss){
        if(ptime.days > 0){
            return false;
    1a68:	81 2c       	mov	r8, r1
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <_Z13task_wateringPv+0x2ee>
        }
        if(ptime.hh > tmp_hh){
            return false;
    1a6c:	81 2c       	mov	r8, r1
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <_Z13task_wateringPv+0x2ee>
        } else if (ptime.hh < tmp_hh ) {
            return true;
        }

        if(ptime.mm > tmp_mm){
            return false;
    1a70:	81 2c       	mov	r8, r1
    1a72:	88 20       	and	r8, r8
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <_Z13task_wateringPv+0x2f4>
    1a76:	33 c2       	rjmp	.+1126   	; 0x1ede <_Z13task_wateringPv+0x75a>
		vTaskDelay(1000);
		uint_least32_t m_delay = settings.get([](Settings const & S){return S.Twd;});
		hh_mm_ss_dd current = clocks.get([](Clocks const & clk){return clk.current();});
		bool ready = false;
		uint_least32_t duration = 0; 
		water_plan.apply([&current,&last_water,&ready,&duration,&m_delay](water_plan_array_t & plan){
    1a78:	e0 96       	adiw	r28, 0x30	; 48
    1a7a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a7c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a7e:	e0 97       	sbiw	r28, 0x30	; 48
			for (uint_least8_t i=0;i<plan.size();++i){
				if(plan[i].actual){
					if(plan[i].is_ready(current.hh,current.mm,current.ss)){
						if(last_water + m_delay < current || plan[i].force){
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	a2 81       	ldd	r26, Z+2	; 0x02
    1a86:	b3 81       	ldd	r27, Z+3	; 0x03
    1a88:	8c 01       	movw	r16, r24
    1a8a:	9d 01       	movw	r18, r26
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	ba 01       	movw	r22, r20
    1a92:	c2 57       	subi	r28, 0x72	; 114
    1a94:	df 4f       	sbci	r29, 0xFF	; 255
    1a96:	88 83       	st	Y, r24
    1a98:	ce 58       	subi	r28, 0x8E	; 142
    1a9a:	d0 40       	sbci	r29, 0x00	; 0
    1a9c:	c1 57       	subi	r28, 0x71	; 113
    1a9e:	df 4f       	sbci	r29, 0xFF	; 255
    1aa0:	18 83       	st	Y, r17
    1aa2:	cf 58       	subi	r28, 0x8F	; 143
    1aa4:	d0 40       	sbci	r29, 0x00	; 0
    1aa6:	c0 57       	subi	r28, 0x70	; 112
    1aa8:	df 4f       	sbci	r29, 0xFF	; 255
    1aaa:	28 83       	st	Y, r18
    1aac:	c0 59       	subi	r28, 0x90	; 144
    1aae:	d0 40       	sbci	r29, 0x00	; 0
    1ab0:	cf 56       	subi	r28, 0x6F	; 111
    1ab2:	df 4f       	sbci	r29, 0xFF	; 255
    1ab4:	38 83       	st	Y, r19
    1ab6:	c1 59       	subi	r28, 0x91	; 145
    1ab8:	d0 40       	sbci	r29, 0x00	; 0
    1aba:	ce 56       	subi	r28, 0x6E	; 110
    1abc:	df 4f       	sbci	r29, 0xFF	; 255
    1abe:	48 83       	st	Y, r20
    1ac0:	c2 59       	subi	r28, 0x92	; 146
    1ac2:	d0 40       	sbci	r29, 0x00	; 0
    1ac4:	cd 56       	subi	r28, 0x6D	; 109
    1ac6:	df 4f       	sbci	r29, 0xFF	; 255
    1ac8:	58 83       	st	Y, r21
    1aca:	c3 59       	subi	r28, 0x93	; 147
    1acc:	d0 40       	sbci	r29, 0x00	; 0
    1ace:	cc 56       	subi	r28, 0x6C	; 108
    1ad0:	df 4f       	sbci	r29, 0xFF	; 255
    1ad2:	68 83       	st	Y, r22
    1ad4:	c4 59       	subi	r28, 0x94	; 148
    1ad6:	d0 40       	sbci	r29, 0x00	; 0
    1ad8:	cb 56       	subi	r28, 0x6B	; 107
    1ada:	df 4f       	sbci	r29, 0xFF	; 255
    1adc:	78 83       	st	Y, r23
    1ade:	c5 59       	subi	r28, 0x95	; 149
    1ae0:	d0 40       	sbci	r29, 0x00	; 0
		vTaskDelay(1000);
		uint_least32_t m_delay = settings.get([](Settings const & S){return S.Twd;});
		hh_mm_ss_dd current = clocks.get([](Clocks const & clk){return clk.current();});
		bool ready = false;
		uint_least32_t duration = 0; 
		water_plan.apply([&current,&last_water,&ready,&duration,&m_delay](water_plan_array_t & plan){
    1ae2:	aa 96       	adiw	r28, 0x2a	; 42
    1ae4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ae6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ae8:	aa 97       	sbiw	r28, 0x2a	; 42
		
		days += msecs;
		return *this;
	}
	inline hh_mm_ss_dd operator + (uint_least64_t msecs)const{
		hh_mm_ss_dd ret = *this;
    1aea:	87 e0       	ldi	r24, 0x07	; 7
    1aec:	de 01       	movw	r26, r28
    1aee:	a9 58       	subi	r26, 0x89	; 137
    1af0:	bf 4f       	sbci	r27, 0xFF	; 255
    1af2:	01 90       	ld	r0, Z+
    1af4:	0d 92       	st	X+, r0
    1af6:	8a 95       	dec	r24
    1af8:	e1 f7       	brne	.-8      	; 0x1af2 <_Z13task_wateringPv+0x36e>
	inline bool operator <=(hh_mm_ss_dd const & other) const{
		return other >= *this;
	}
	
	inline hh_mm_ss_dd & operator += (uint_least64_t msecs){
		msecs += ss;
    1afa:	ea 96       	adiw	r28, 0x3a	; 58
    1afc:	2f ad       	ldd	r18, Y+63	; 0x3f
    1afe:	ea 97       	sbiw	r28, 0x3a	; 58
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	c2 57       	subi	r28, 0x72	; 114
    1b10:	df 4f       	sbci	r29, 0xFF	; 255
    1b12:	a8 80       	ld	r10, Y
    1b14:	ce 58       	subi	r28, 0x8E	; 142
    1b16:	d0 40       	sbci	r29, 0x00	; 0
    1b18:	c1 57       	subi	r28, 0x71	; 113
    1b1a:	df 4f       	sbci	r29, 0xFF	; 255
    1b1c:	b8 80       	ld	r11, Y
    1b1e:	cf 58       	subi	r28, 0x8F	; 143
    1b20:	d0 40       	sbci	r29, 0x00	; 0
    1b22:	c0 57       	subi	r28, 0x70	; 112
    1b24:	df 4f       	sbci	r29, 0xFF	; 255
    1b26:	c8 80       	ld	r12, Y
    1b28:	c0 59       	subi	r28, 0x90	; 144
    1b2a:	d0 40       	sbci	r29, 0x00	; 0
    1b2c:	cf 56       	subi	r28, 0x6F	; 111
    1b2e:	df 4f       	sbci	r29, 0xFF	; 255
    1b30:	d8 80       	ld	r13, Y
    1b32:	c1 59       	subi	r28, 0x91	; 145
    1b34:	d0 40       	sbci	r29, 0x00	; 0
    1b36:	e1 2c       	mov	r14, r1
    1b38:	f1 2c       	mov	r15, r1
    1b3a:	00 e0       	ldi	r16, 0x00	; 0
    1b3c:	10 e0       	ldi	r17, 0x00	; 0
    1b3e:	0e 94 b8 22 	call	0x4570	; 0x4570 <__adddi3>
    1b42:	c2 57       	subi	r28, 0x72	; 114
    1b44:	df 4f       	sbci	r29, 0xFF	; 255
    1b46:	28 83       	st	Y, r18
    1b48:	ce 58       	subi	r28, 0x8E	; 142
    1b4a:	d0 40       	sbci	r29, 0x00	; 0
    1b4c:	c4 56       	subi	r28, 0x64	; 100
    1b4e:	df 4f       	sbci	r29, 0xFF	; 255
    1b50:	38 83       	st	Y, r19
    1b52:	cc 59       	subi	r28, 0x9C	; 156
    1b54:	d0 40       	sbci	r29, 0x00	; 0
    1b56:	ca 56       	subi	r28, 0x6A	; 106
    1b58:	df 4f       	sbci	r29, 0xFF	; 255
    1b5a:	48 83       	st	Y, r20
    1b5c:	c6 59       	subi	r28, 0x96	; 150
    1b5e:	d0 40       	sbci	r29, 0x00	; 0
    1b60:	c9 56       	subi	r28, 0x69	; 105
    1b62:	df 4f       	sbci	r29, 0xFF	; 255
    1b64:	58 83       	st	Y, r21
    1b66:	c7 59       	subi	r28, 0x97	; 151
    1b68:	d0 40       	sbci	r29, 0x00	; 0
    1b6a:	c8 56       	subi	r28, 0x68	; 104
    1b6c:	df 4f       	sbci	r29, 0xFF	; 255
    1b6e:	68 83       	st	Y, r22
    1b70:	c8 59       	subi	r28, 0x98	; 152
    1b72:	d0 40       	sbci	r29, 0x00	; 0
    1b74:	c7 56       	subi	r28, 0x67	; 103
    1b76:	df 4f       	sbci	r29, 0xFF	; 255
    1b78:	78 83       	st	Y, r23
    1b7a:	c9 59       	subi	r28, 0x99	; 153
    1b7c:	d0 40       	sbci	r29, 0x00	; 0
    1b7e:	c6 56       	subi	r28, 0x66	; 102
    1b80:	df 4f       	sbci	r29, 0xFF	; 255
    1b82:	88 83       	st	Y, r24
    1b84:	ca 59       	subi	r28, 0x9A	; 154
    1b86:	d0 40       	sbci	r29, 0x00	; 0
    1b88:	c5 56       	subi	r28, 0x65	; 101
    1b8a:	df 4f       	sbci	r29, 0xFF	; 255
    1b8c:	98 83       	st	Y, r25
    1b8e:	cb 59       	subi	r28, 0x9B	; 155
    1b90:	d0 40       	sbci	r29, 0x00	; 0
		ss = msecs % 60;
    1b92:	0f 2e       	mov	r0, r31
    1b94:	fc e3       	ldi	r31, 0x3C	; 60
    1b96:	af 2e       	mov	r10, r31
    1b98:	f0 2d       	mov	r31, r0
    1b9a:	b1 2c       	mov	r11, r1
    1b9c:	c1 2c       	mov	r12, r1
    1b9e:	d1 2c       	mov	r13, r1
    1ba0:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__umoddi3>
    1ba4:	ea 96       	adiw	r28, 0x3a	; 58
    1ba6:	2f af       	std	Y+63, r18	; 0x3f
    1ba8:	ea 97       	sbiw	r28, 0x3a	; 58
		msecs/=60;
    1baa:	c2 57       	subi	r28, 0x72	; 114
    1bac:	df 4f       	sbci	r29, 0xFF	; 255
    1bae:	28 81       	ld	r18, Y
    1bb0:	ce 58       	subi	r28, 0x8E	; 142
    1bb2:	d0 40       	sbci	r29, 0x00	; 0
    1bb4:	c4 56       	subi	r28, 0x64	; 100
    1bb6:	df 4f       	sbci	r29, 0xFF	; 255
    1bb8:	38 81       	ld	r19, Y
    1bba:	cc 59       	subi	r28, 0x9C	; 156
    1bbc:	d0 40       	sbci	r29, 0x00	; 0
    1bbe:	ca 56       	subi	r28, 0x6A	; 106
    1bc0:	df 4f       	sbci	r29, 0xFF	; 255
    1bc2:	48 81       	ld	r20, Y
    1bc4:	c6 59       	subi	r28, 0x96	; 150
    1bc6:	d0 40       	sbci	r29, 0x00	; 0
    1bc8:	c9 56       	subi	r28, 0x69	; 105
    1bca:	df 4f       	sbci	r29, 0xFF	; 255
    1bcc:	58 81       	ld	r21, Y
    1bce:	c7 59       	subi	r28, 0x97	; 151
    1bd0:	d0 40       	sbci	r29, 0x00	; 0
    1bd2:	c8 56       	subi	r28, 0x68	; 104
    1bd4:	df 4f       	sbci	r29, 0xFF	; 255
    1bd6:	68 81       	ld	r22, Y
    1bd8:	c8 59       	subi	r28, 0x98	; 152
    1bda:	d0 40       	sbci	r29, 0x00	; 0
    1bdc:	c7 56       	subi	r28, 0x67	; 103
    1bde:	df 4f       	sbci	r29, 0xFF	; 255
    1be0:	78 81       	ld	r23, Y
    1be2:	c9 59       	subi	r28, 0x99	; 153
    1be4:	d0 40       	sbci	r29, 0x00	; 0
    1be6:	c6 56       	subi	r28, 0x66	; 102
    1be8:	df 4f       	sbci	r29, 0xFF	; 255
    1bea:	88 81       	ld	r24, Y
    1bec:	ca 59       	subi	r28, 0x9A	; 154
    1bee:	d0 40       	sbci	r29, 0x00	; 0
    1bf0:	c5 56       	subi	r28, 0x65	; 101
    1bf2:	df 4f       	sbci	r29, 0xFF	; 255
    1bf4:	98 81       	ld	r25, Y
    1bf6:	cb 59       	subi	r28, 0x9B	; 155
    1bf8:	d0 40       	sbci	r29, 0x00	; 0
    1bfa:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__udivdi3>
    1bfe:	a2 2e       	mov	r10, r18
    1c00:	b3 2e       	mov	r11, r19
    1c02:	c4 2e       	mov	r12, r20
    1c04:	d5 2e       	mov	r13, r21
    1c06:	e6 2e       	mov	r14, r22
    1c08:	f7 2e       	mov	r15, r23
    1c0a:	08 2f       	mov	r16, r24
    1c0c:	19 2f       	mov	r17, r25
		
		msecs += mm;
    1c0e:	e9 96       	adiw	r28, 0x39	; 57
    1c10:	2f ad       	ldd	r18, Y+63	; 0x3f
    1c12:	e9 97       	sbiw	r28, 0x39	; 57
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 b8 22 	call	0x4570	; 0x4570 <__adddi3>
    1c26:	c2 57       	subi	r28, 0x72	; 114
    1c28:	df 4f       	sbci	r29, 0xFF	; 255
    1c2a:	28 83       	st	Y, r18
    1c2c:	ce 58       	subi	r28, 0x8E	; 142
    1c2e:	d0 40       	sbci	r29, 0x00	; 0
    1c30:	c4 56       	subi	r28, 0x64	; 100
    1c32:	df 4f       	sbci	r29, 0xFF	; 255
    1c34:	38 83       	st	Y, r19
    1c36:	cc 59       	subi	r28, 0x9C	; 156
    1c38:	d0 40       	sbci	r29, 0x00	; 0
    1c3a:	ca 56       	subi	r28, 0x6A	; 106
    1c3c:	df 4f       	sbci	r29, 0xFF	; 255
    1c3e:	48 83       	st	Y, r20
    1c40:	c6 59       	subi	r28, 0x96	; 150
    1c42:	d0 40       	sbci	r29, 0x00	; 0
    1c44:	c9 56       	subi	r28, 0x69	; 105
    1c46:	df 4f       	sbci	r29, 0xFF	; 255
    1c48:	58 83       	st	Y, r21
    1c4a:	c7 59       	subi	r28, 0x97	; 151
    1c4c:	d0 40       	sbci	r29, 0x00	; 0
    1c4e:	c8 56       	subi	r28, 0x68	; 104
    1c50:	df 4f       	sbci	r29, 0xFF	; 255
    1c52:	68 83       	st	Y, r22
    1c54:	c8 59       	subi	r28, 0x98	; 152
    1c56:	d0 40       	sbci	r29, 0x00	; 0
    1c58:	c7 56       	subi	r28, 0x67	; 103
    1c5a:	df 4f       	sbci	r29, 0xFF	; 255
    1c5c:	78 83       	st	Y, r23
    1c5e:	c9 59       	subi	r28, 0x99	; 153
    1c60:	d0 40       	sbci	r29, 0x00	; 0
    1c62:	c6 56       	subi	r28, 0x66	; 102
    1c64:	df 4f       	sbci	r29, 0xFF	; 255
    1c66:	88 83       	st	Y, r24
    1c68:	ca 59       	subi	r28, 0x9A	; 154
    1c6a:	d0 40       	sbci	r29, 0x00	; 0
    1c6c:	c5 56       	subi	r28, 0x65	; 101
    1c6e:	df 4f       	sbci	r29, 0xFF	; 255
    1c70:	98 83       	st	Y, r25
    1c72:	cb 59       	subi	r28, 0x9B	; 155
    1c74:	d0 40       	sbci	r29, 0x00	; 0
		mm = msecs % 60;
    1c76:	0f 2e       	mov	r0, r31
    1c78:	fc e3       	ldi	r31, 0x3C	; 60
    1c7a:	af 2e       	mov	r10, r31
    1c7c:	f0 2d       	mov	r31, r0
    1c7e:	b1 2c       	mov	r11, r1
    1c80:	c1 2c       	mov	r12, r1
    1c82:	d1 2c       	mov	r13, r1
    1c84:	e1 2c       	mov	r14, r1
    1c86:	f1 2c       	mov	r15, r1
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
    1c8c:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__umoddi3>
    1c90:	e9 96       	adiw	r28, 0x39	; 57
    1c92:	2f af       	std	Y+63, r18	; 0x3f
    1c94:	e9 97       	sbiw	r28, 0x39	; 57
		msecs/=60;
    1c96:	c2 57       	subi	r28, 0x72	; 114
    1c98:	df 4f       	sbci	r29, 0xFF	; 255
    1c9a:	28 81       	ld	r18, Y
    1c9c:	ce 58       	subi	r28, 0x8E	; 142
    1c9e:	d0 40       	sbci	r29, 0x00	; 0
    1ca0:	c4 56       	subi	r28, 0x64	; 100
    1ca2:	df 4f       	sbci	r29, 0xFF	; 255
    1ca4:	38 81       	ld	r19, Y
    1ca6:	cc 59       	subi	r28, 0x9C	; 156
    1ca8:	d0 40       	sbci	r29, 0x00	; 0
    1caa:	ca 56       	subi	r28, 0x6A	; 106
    1cac:	df 4f       	sbci	r29, 0xFF	; 255
    1cae:	48 81       	ld	r20, Y
    1cb0:	c6 59       	subi	r28, 0x96	; 150
    1cb2:	d0 40       	sbci	r29, 0x00	; 0
    1cb4:	c9 56       	subi	r28, 0x69	; 105
    1cb6:	df 4f       	sbci	r29, 0xFF	; 255
    1cb8:	58 81       	ld	r21, Y
    1cba:	c7 59       	subi	r28, 0x97	; 151
    1cbc:	d0 40       	sbci	r29, 0x00	; 0
    1cbe:	c8 56       	subi	r28, 0x68	; 104
    1cc0:	df 4f       	sbci	r29, 0xFF	; 255
    1cc2:	68 81       	ld	r22, Y
    1cc4:	c8 59       	subi	r28, 0x98	; 152
    1cc6:	d0 40       	sbci	r29, 0x00	; 0
    1cc8:	c7 56       	subi	r28, 0x67	; 103
    1cca:	df 4f       	sbci	r29, 0xFF	; 255
    1ccc:	78 81       	ld	r23, Y
    1cce:	c9 59       	subi	r28, 0x99	; 153
    1cd0:	d0 40       	sbci	r29, 0x00	; 0
    1cd2:	c6 56       	subi	r28, 0x66	; 102
    1cd4:	df 4f       	sbci	r29, 0xFF	; 255
    1cd6:	88 81       	ld	r24, Y
    1cd8:	ca 59       	subi	r28, 0x9A	; 154
    1cda:	d0 40       	sbci	r29, 0x00	; 0
    1cdc:	c5 56       	subi	r28, 0x65	; 101
    1cde:	df 4f       	sbci	r29, 0xFF	; 255
    1ce0:	98 81       	ld	r25, Y
    1ce2:	cb 59       	subi	r28, 0x9B	; 155
    1ce4:	d0 40       	sbci	r29, 0x00	; 0
    1ce6:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__udivdi3>
    1cea:	a2 2e       	mov	r10, r18
    1cec:	b3 2e       	mov	r11, r19
    1cee:	c4 2e       	mov	r12, r20
    1cf0:	d5 2e       	mov	r13, r21
    1cf2:	e6 2e       	mov	r14, r22
    1cf4:	f7 2e       	mov	r15, r23
    1cf6:	08 2f       	mov	r16, r24
    1cf8:	19 2f       	mov	r17, r25
		
		msecs += hh;
    1cfa:	e8 96       	adiw	r28, 0x38	; 56
    1cfc:	2f ad       	ldd	r18, Y+63	; 0x3f
    1cfe:	e8 97       	sbiw	r28, 0x38	; 56
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 b8 22 	call	0x4570	; 0x4570 <__adddi3>
    1d12:	c2 57       	subi	r28, 0x72	; 114
    1d14:	df 4f       	sbci	r29, 0xFF	; 255
    1d16:	28 83       	st	Y, r18
    1d18:	ce 58       	subi	r28, 0x8E	; 142
    1d1a:	d0 40       	sbci	r29, 0x00	; 0
    1d1c:	c4 56       	subi	r28, 0x64	; 100
    1d1e:	df 4f       	sbci	r29, 0xFF	; 255
    1d20:	38 83       	st	Y, r19
    1d22:	cc 59       	subi	r28, 0x9C	; 156
    1d24:	d0 40       	sbci	r29, 0x00	; 0
    1d26:	ca 56       	subi	r28, 0x6A	; 106
    1d28:	df 4f       	sbci	r29, 0xFF	; 255
    1d2a:	48 83       	st	Y, r20
    1d2c:	c6 59       	subi	r28, 0x96	; 150
    1d2e:	d0 40       	sbci	r29, 0x00	; 0
    1d30:	c9 56       	subi	r28, 0x69	; 105
    1d32:	df 4f       	sbci	r29, 0xFF	; 255
    1d34:	58 83       	st	Y, r21
    1d36:	c7 59       	subi	r28, 0x97	; 151
    1d38:	d0 40       	sbci	r29, 0x00	; 0
    1d3a:	c8 56       	subi	r28, 0x68	; 104
    1d3c:	df 4f       	sbci	r29, 0xFF	; 255
    1d3e:	68 83       	st	Y, r22
    1d40:	c8 59       	subi	r28, 0x98	; 152
    1d42:	d0 40       	sbci	r29, 0x00	; 0
    1d44:	c7 56       	subi	r28, 0x67	; 103
    1d46:	df 4f       	sbci	r29, 0xFF	; 255
    1d48:	78 83       	st	Y, r23
    1d4a:	c9 59       	subi	r28, 0x99	; 153
    1d4c:	d0 40       	sbci	r29, 0x00	; 0
    1d4e:	c6 56       	subi	r28, 0x66	; 102
    1d50:	df 4f       	sbci	r29, 0xFF	; 255
    1d52:	88 83       	st	Y, r24
    1d54:	ca 59       	subi	r28, 0x9A	; 154
    1d56:	d0 40       	sbci	r29, 0x00	; 0
    1d58:	c5 56       	subi	r28, 0x65	; 101
    1d5a:	df 4f       	sbci	r29, 0xFF	; 255
    1d5c:	98 83       	st	Y, r25
    1d5e:	cb 59       	subi	r28, 0x9B	; 155
    1d60:	d0 40       	sbci	r29, 0x00	; 0
		hh = msecs % 24;
    1d62:	0f 2e       	mov	r0, r31
    1d64:	f8 e1       	ldi	r31, 0x18	; 24
    1d66:	af 2e       	mov	r10, r31
    1d68:	f0 2d       	mov	r31, r0
    1d6a:	b1 2c       	mov	r11, r1
    1d6c:	c1 2c       	mov	r12, r1
    1d6e:	d1 2c       	mov	r13, r1
    1d70:	e1 2c       	mov	r14, r1
    1d72:	f1 2c       	mov	r15, r1
    1d74:	00 e0       	ldi	r16, 0x00	; 0
    1d76:	10 e0       	ldi	r17, 0x00	; 0
    1d78:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__umoddi3>
    1d7c:	e8 96       	adiw	r28, 0x38	; 56
    1d7e:	2f af       	std	Y+63, r18	; 0x3f
    1d80:	e8 97       	sbiw	r28, 0x38	; 56
		msecs/=24;
    1d82:	c2 57       	subi	r28, 0x72	; 114
    1d84:	df 4f       	sbci	r29, 0xFF	; 255
    1d86:	28 81       	ld	r18, Y
    1d88:	ce 58       	subi	r28, 0x8E	; 142
    1d8a:	d0 40       	sbci	r29, 0x00	; 0
    1d8c:	c4 56       	subi	r28, 0x64	; 100
    1d8e:	df 4f       	sbci	r29, 0xFF	; 255
    1d90:	38 81       	ld	r19, Y
    1d92:	cc 59       	subi	r28, 0x9C	; 156
    1d94:	d0 40       	sbci	r29, 0x00	; 0
    1d96:	ca 56       	subi	r28, 0x6A	; 106
    1d98:	df 4f       	sbci	r29, 0xFF	; 255
    1d9a:	48 81       	ld	r20, Y
    1d9c:	c6 59       	subi	r28, 0x96	; 150
    1d9e:	d0 40       	sbci	r29, 0x00	; 0
    1da0:	c9 56       	subi	r28, 0x69	; 105
    1da2:	df 4f       	sbci	r29, 0xFF	; 255
    1da4:	58 81       	ld	r21, Y
    1da6:	c7 59       	subi	r28, 0x97	; 151
    1da8:	d0 40       	sbci	r29, 0x00	; 0
    1daa:	c8 56       	subi	r28, 0x68	; 104
    1dac:	df 4f       	sbci	r29, 0xFF	; 255
    1dae:	68 81       	ld	r22, Y
    1db0:	c8 59       	subi	r28, 0x98	; 152
    1db2:	d0 40       	sbci	r29, 0x00	; 0
    1db4:	c7 56       	subi	r28, 0x67	; 103
    1db6:	df 4f       	sbci	r29, 0xFF	; 255
    1db8:	78 81       	ld	r23, Y
    1dba:	c9 59       	subi	r28, 0x99	; 153
    1dbc:	d0 40       	sbci	r29, 0x00	; 0
    1dbe:	c6 56       	subi	r28, 0x66	; 102
    1dc0:	df 4f       	sbci	r29, 0xFF	; 255
    1dc2:	88 81       	ld	r24, Y
    1dc4:	ca 59       	subi	r28, 0x9A	; 154
    1dc6:	d0 40       	sbci	r29, 0x00	; 0
    1dc8:	c5 56       	subi	r28, 0x65	; 101
    1dca:	df 4f       	sbci	r29, 0xFF	; 255
    1dcc:	98 81       	ld	r25, Y
    1dce:	cb 59       	subi	r28, 0x9B	; 155
    1dd0:	d0 40       	sbci	r29, 0x00	; 0
    1dd2:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__udivdi3>
    1dd6:	02 2f       	mov	r16, r18
    1dd8:	13 2f       	mov	r17, r19
    1dda:	24 2f       	mov	r18, r20
    1ddc:	35 2f       	mov	r19, r21
		
		days += msecs;
    1dde:	ee 96       	adiw	r28, 0x3e	; 62
    1de0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1de2:	9d ad       	ldd	r25, Y+61	; 0x3d
    1de4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1de6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1de8:	ee 97       	sbiw	r28, 0x3e	; 62
    1dea:	08 0f       	add	r16, r24
    1dec:	19 1f       	adc	r17, r25
    1dee:	2a 1f       	adc	r18, r26
    1df0:	3b 1f       	adc	r19, r27
    1df2:	ee 96       	adiw	r28, 0x3e	; 62
    1df4:	0c af       	std	Y+60, r16	; 0x3c
    1df6:	1d af       	std	Y+61, r17	; 0x3d
    1df8:	2e af       	std	Y+62, r18	; 0x3e
    1dfa:	3f af       	std	Y+63, r19	; 0x3f
    1dfc:	ee 97       	sbiw	r28, 0x3e	; 62
		return *this;
	}
	inline hh_mm_ss_dd operator + (uint_least64_t msecs)const{
		hh_mm_ss_dd ret = *this;
		ret+=msecs;
		return ret;
    1dfe:	87 e0       	ldi	r24, 0x07	; 7
    1e00:	fe 01       	movw	r30, r28
    1e02:	e9 58       	subi	r30, 0x89	; 137
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	de 01       	movw	r26, r28
    1e08:	1f 96       	adiw	r26, 0x0f	; 15
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	0d 92       	st	X+, r0
    1e0e:	8a 95       	dec	r24
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <_Z13task_wateringPv+0x686>
    1e12:	87 e0       	ldi	r24, 0x07	; 7
    1e14:	fe 01       	movw	r30, r28
    1e16:	3f 96       	adiw	r30, 0x0f	; 15
    1e18:	de 01       	movw	r26, r28
    1e1a:	56 96       	adiw	r26, 0x16	; 22
    1e1c:	01 90       	ld	r0, Z+
    1e1e:	0d 92       	st	X+, r0
    1e20:	8a 95       	dec	r24
    1e22:	e1 f7       	brne	.-8      	; 0x1e1c <_Z13task_wateringPv+0x698>
			for (uint_least8_t i=0;i<plan.size();++i){
				if(plan[i].actual){
					if(plan[i].is_ready(current.hh,current.mm,current.ss)){
						if(last_water + m_delay < current || plan[i].force){
    1e24:	87 e0       	ldi	r24, 0x07	; 7
    1e26:	fe 01       	movw	r30, r28
    1e28:	76 96       	adiw	r30, 0x16	; 22
    1e2a:	de 01       	movw	r26, r28
    1e2c:	5d 96       	adiw	r26, 0x1d	; 29
    1e2e:	01 90       	ld	r0, Z+
    1e30:	0d 92       	st	X+, r0
    1e32:	8a 95       	dec	r24
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <_Z13task_wateringPv+0x6aa>
		
	}
	
		
	inline bool operator > (hh_mm_ss_dd const & other)const{
		if(days > other.days){
    1e36:	f2 01       	movw	r30, r4
    1e38:	43 81       	ldd	r20, Z+3	; 0x03
    1e3a:	54 81       	ldd	r21, Z+4	; 0x04
    1e3c:	65 81       	ldd	r22, Z+5	; 0x05
    1e3e:	76 81       	ldd	r23, Z+6	; 0x06
    1e40:	88 a1       	ldd	r24, Y+32	; 0x20
    1e42:	99 a1       	ldd	r25, Y+33	; 0x21
    1e44:	aa a1       	ldd	r26, Y+34	; 0x22
    1e46:	bb a1       	ldd	r27, Y+35	; 0x23
    1e48:	84 17       	cp	r24, r20
    1e4a:	95 07       	cpc	r25, r21
    1e4c:	a6 07       	cpc	r26, r22
    1e4e:	b7 07       	cpc	r27, r23
    1e50:	e8 f0       	brcs	.+58     	; 0x1e8c <_Z13task_wateringPv+0x708>
			return true;
		} else if (days < other.days) {
    1e52:	48 17       	cp	r20, r24
    1e54:	59 07       	cpc	r21, r25
    1e56:	6a 07       	cpc	r22, r26
    1e58:	7b 07       	cpc	r23, r27
    1e5a:	88 f0       	brcs	.+34     	; 0x1e7e <_Z13task_wateringPv+0x6fa>
			return false;
		}
		
		if(hh > other.hh){
    1e5c:	90 81       	ld	r25, Z
    1e5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e60:	89 17       	cp	r24, r25
    1e62:	a0 f0       	brcs	.+40     	; 0x1e8c <_Z13task_wateringPv+0x708>
			return true;
		} else if (hh < other.hh) {
    1e64:	98 17       	cp	r25, r24
    1e66:	68 f0       	brcs	.+26     	; 0x1e82 <_Z13task_wateringPv+0x6fe>
			return false;
		}
		
		if(mm > other.mm){
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e6c:	89 17       	cp	r24, r25
    1e6e:	70 f0       	brcs	.+28     	; 0x1e8c <_Z13task_wateringPv+0x708>
			return true;
		} else if (mm < other.mm) {
    1e70:	98 17       	cp	r25, r24
    1e72:	48 f0       	brcs	.+18     	; 0x1e86 <_Z13task_wateringPv+0x702>
			return false;
		}
		
		if(ss > other.ss){
    1e74:	92 81       	ldd	r25, Z+2	; 0x02
    1e76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e78:	89 17       	cp	r24, r25
    1e7a:	38 f4       	brcc	.+14     	; 0x1e8a <_Z13task_wateringPv+0x706>
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <_Z13task_wateringPv+0x708>
		
	inline bool operator > (hh_mm_ss_dd const & other)const{
		if(days > other.days){
			return true;
		} else if (days < other.days) {
			return false;
    1e7e:	81 2c       	mov	r8, r1
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <_Z13task_wateringPv+0x708>
		}
		
		if(hh > other.hh){
			return true;
		} else if (hh < other.hh) {
			return false;
    1e82:	81 2c       	mov	r8, r1
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <_Z13task_wateringPv+0x708>
		}
		
		if(mm > other.mm){
			return true;
		} else if (mm < other.mm) {
			return false;
    1e86:	81 2c       	mov	r8, r1
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <_Z13task_wateringPv+0x708>
		}
		
		if(ss > other.ss){
			return true;
		} else {
			return false;
    1e8a:	81 2c       	mov	r8, r1
    1e8c:	81 10       	cpse	r8, r1
    1e8e:	09 c0       	rjmp	.+18     	; 0x1ea2 <_Z13task_wateringPv+0x71e>
    1e90:	8d e0       	ldi	r24, 0x0D	; 13
    1e92:	86 9d       	mul	r24, r6
    1e94:	f0 01       	movw	r30, r0
    1e96:	87 9d       	mul	r24, r7
    1e98:	f0 0d       	add	r31, r0
    1e9a:	11 24       	eor	r1, r1
    1e9c:	e2 0d       	add	r30, r2
    1e9e:	f3 1d       	adc	r31, r3
    1ea0:	81 80       	ldd	r8, Z+1	; 0x01
    1ea2:	88 20       	and	r8, r8
    1ea4:	e1 f0       	breq	.+56     	; 0x1ede <_Z13task_wateringPv+0x75a>
		vTaskDelay(1000);
		uint_least32_t m_delay = settings.get([](Settings const & S){return S.Twd;});
		hh_mm_ss_dd current = clocks.get([](Clocks const & clk){return clk.current();});
		bool ready = false;
		uint_least32_t duration = 0; 
		water_plan.apply([&current,&last_water,&ready,&duration,&m_delay](water_plan_array_t & plan){
    1ea6:	ac 96       	adiw	r28, 0x2c	; 44
    1ea8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1eaa:	ff ad       	ldd	r31, Y+63	; 0x3f
    1eac:	ac 97       	sbiw	r28, 0x2c	; 44
			for (uint_least8_t i=0;i<plan.size();++i){
				if(plan[i].actual){
					if(plan[i].is_ready(current.hh,current.mm,current.ss)){
						if(last_water + m_delay < current || plan[i].force){
							ready = true;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	80 83       	st	Z, r24
		vTaskDelay(1000);
		uint_least32_t m_delay = settings.get([](Settings const & S){return S.Twd;});
		hh_mm_ss_dd current = clocks.get([](Clocks const & clk){return clk.current();});
		bool ready = false;
		uint_least32_t duration = 0; 
		water_plan.apply([&current,&last_water,&ready,&duration,&m_delay](water_plan_array_t & plan){
    1eb2:	ae 96       	adiw	r28, 0x2e	; 46
    1eb4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1eb6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1eb8:	ae 97       	sbiw	r28, 0x2e	; 46
			for (uint_least8_t i=0;i<plan.size();++i){
				if(plan[i].actual){
					if(plan[i].is_ready(current.hh,current.mm,current.ss)){
						if(last_water + m_delay < current || plan[i].force){
							ready = true;
							duration = plan[i].duration;
    1eba:	8d e0       	ldi	r24, 0x0D	; 13
    1ebc:	86 9d       	mul	r24, r6
    1ebe:	f0 01       	movw	r30, r0
    1ec0:	87 9d       	mul	r24, r7
    1ec2:	f0 0d       	add	r31, r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	e2 0d       	add	r30, r2
    1ec8:	f3 1d       	adc	r31, r3
    1eca:	41 85       	ldd	r20, Z+9	; 0x09
    1ecc:	52 85       	ldd	r21, Z+10	; 0x0a
    1ece:	63 85       	ldd	r22, Z+11	; 0x0b
    1ed0:	74 85       	ldd	r23, Z+12	; 0x0c
    1ed2:	4d 93       	st	X+, r20
    1ed4:	5d 93       	st	X+, r21
    1ed6:	6d 93       	st	X+, r22
    1ed8:	7c 93       	st	X, r23
    1eda:	13 97       	sbiw	r26, 0x03	; 3
            return true;
        }
        return tmp_ss >= ptime.ss;
    }
    void after_water(){
        actual = false;
    1edc:	10 82       	st	Z, r1
		uint_least32_t m_delay = settings.get([](Settings const & S){return S.Twd;});
		hh_mm_ss_dd current = clocks.get([](Clocks const & clk){return clk.current();});
		bool ready = false;
		uint_least32_t duration = 0; 
		water_plan.apply([&current,&last_water,&ready,&duration,&m_delay](water_plan_array_t & plan){
			for (uint_least8_t i=0;i<plan.size();++i){
    1ede:	93 94       	inc	r9
    1ee0:	71 cd       	rjmp	.-1310   	; 0x19c4 <_Z13task_wateringPv+0x240>
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
	};
	void unlock(){
		xSemaphoreGive(xMutex);
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <water_plan+0x2>
    1ef0:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <water_plan+0x3>
    1ef4:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
						}
					}
				}
			}
		});
		if(ready){
    1ef8:	c3 57       	subi	r28, 0x73	; 115
    1efa:	df 4f       	sbci	r29, 0xFF	; 255
    1efc:	88 81       	ld	r24, Y
    1efe:	cd 58       	subi	r28, 0x8D	; 141
    1f00:	d0 40       	sbci	r29, 0x00	; 0
    1f02:	88 23       	and	r24, r24
    1f04:	11 f1       	breq	.+68     	; 0x1f4a <_Z13task_wateringPv+0x7c6>
			last_water = water_process(current,duration);
    1f06:	cb 57       	subi	r28, 0x7B	; 123
    1f08:	df 4f       	sbci	r29, 0xFF	; 255
    1f0a:	48 81       	ld	r20, Y
    1f0c:	59 81       	ldd	r21, Y+1	; 0x01
    1f0e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f10:	7b 81       	ldd	r23, Y+3	; 0x03
    1f12:	c5 58       	subi	r28, 0x85	; 133
    1f14:	d0 40       	sbci	r29, 0x00	; 0
    1f16:	ce 01       	movw	r24, r28
    1f18:	82 58       	subi	r24, 0x82	; 130
    1f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1c:	0e 94 35 0a 	call	0x146a	; 0x146a <_Z13water_processRK11hh_mm_ss_ddm>
    1f20:	e1 96       	adiw	r28, 0x31	; 49
    1f22:	2f af       	std	Y+63, r18	; 0x3f
    1f24:	e1 97       	sbiw	r28, 0x31	; 49
    1f26:	e2 96       	adiw	r28, 0x32	; 50
    1f28:	3f af       	std	Y+63, r19	; 0x3f
    1f2a:	e2 97       	sbiw	r28, 0x32	; 50
    1f2c:	e3 96       	adiw	r28, 0x33	; 51
    1f2e:	4f af       	std	Y+63, r20	; 0x3f
    1f30:	e3 97       	sbiw	r28, 0x33	; 51
    1f32:	e4 96       	adiw	r28, 0x34	; 52
    1f34:	5f af       	std	Y+63, r21	; 0x3f
    1f36:	e4 97       	sbiw	r28, 0x34	; 52
    1f38:	e5 96       	adiw	r28, 0x35	; 53
    1f3a:	6f af       	std	Y+63, r22	; 0x3f
    1f3c:	e5 97       	sbiw	r28, 0x35	; 53
    1f3e:	e6 96       	adiw	r28, 0x36	; 54
    1f40:	7f af       	std	Y+63, r23	; 0x3f
    1f42:	e6 97       	sbiw	r28, 0x36	; 54
    1f44:	e7 96       	adiw	r28, 0x37	; 55
    1f46:	8f af       	std	Y+63, r24	; 0x3f
    1f48:	e7 97       	sbiw	r28, 0x37	; 55
		}
		ready = false;
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e3 57       	subi	r30, 0x73	; 115
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	10 82       	st	Z, r1
		water_every.apply([&current,&last_water,&ready,&duration,&m_delay](water_every_array_t & m_every){
    1f52:	ce 01       	movw	r24, r28
    1f54:	82 58       	subi	r24, 0x82	; 130
    1f56:	9f 4f       	sbci	r25, 0xFF	; 255
    1f58:	6e 96       	adiw	r28, 0x1e	; 30
    1f5a:	9f af       	std	Y+63, r25	; 0x3f
    1f5c:	8e af       	std	Y+62, r24	; 0x3e
    1f5e:	6e 97       	sbiw	r28, 0x1e	; 30
    1f60:	0e 97       	sbiw	r24, 0x0e	; 14
    1f62:	a0 96       	adiw	r28, 0x20	; 32
    1f64:	9f af       	std	Y+63, r25	; 0x3f
    1f66:	8e af       	std	Y+62, r24	; 0x3e
    1f68:	a0 97       	sbiw	r28, 0x20	; 32
    1f6a:	a2 96       	adiw	r28, 0x22	; 34
    1f6c:	ff af       	std	Y+63, r31	; 0x3f
    1f6e:	ee af       	std	Y+62, r30	; 0x3e
    1f70:	a2 97       	sbiw	r28, 0x22	; 34
    1f72:	45 96       	adiw	r24, 0x15	; 21
    1f74:	a4 96       	adiw	r28, 0x24	; 36
    1f76:	9f af       	std	Y+63, r25	; 0x3f
    1f78:	8e af       	std	Y+62, r24	; 0x3e
    1f7a:	a4 97       	sbiw	r28, 0x24	; 36
    1f7c:	04 96       	adiw	r24, 0x04	; 4
    1f7e:	a6 96       	adiw	r28, 0x26	; 38
    1f80:	9f af       	std	Y+63, r25	; 0x3f
    1f82:	8e af       	std	Y+62, r24	; 0x3e
    1f84:	a6 97       	sbiw	r28, 0x26	; 38
#include "../../FreeRTOS/semphr.h"

struct mutex{
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
    1f86:	0b e1       	ldi	r16, 0x1B	; 27
    1f88:	12 e0       	ldi	r17, 0x02	; 2
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	4f ef       	ldi	r20, 0xFF	; 255
    1f8e:	5f ef       	ldi	r21, 0xFF	; 255
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	f8 01       	movw	r30, r16
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	0e 94 d6 14 	call	0x29ac	; 0x29ac <xQueueGenericReceive>
	template <typename Func_t,
		Std::enable_if_same_t<Std::invoke_result_t<Func_t,T &>,void,bool> = true>
	inline void apply(Func_t && F){
		//static_assert(Std::is_same_v<Std::invoke_result_t<Func_t,T &>,void>,"not void function in void spec");
		lock();
		F(value);
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	20 80       	ld	r2, Z
    1fa2:	31 80       	ldd	r3, Z+1	; 0x01
			for (uint_least8_t i=0;i<m_every.size();++i){
    1fa4:	61 2c       	mov	r6, r1
    1fa6:	96 2c       	mov	r9, r6
    1fa8:	f3 e0       	ldi	r31, 0x03	; 3
    1faa:	f9 15       	cp	r31, r9
    1fac:	08 f4       	brcc	.+2      	; 0x1fb0 <_Z13task_wateringPv+0x82c>
    1fae:	af c2       	rjmp	.+1374   	; 0x250e <_Z13task_wateringPv+0xd8a>
				if(m_every[i].exist_flag){
    1fb0:	69 2c       	mov	r6, r9
    1fb2:	71 2c       	mov	r7, r1
    1fb4:	f3 01       	movw	r30, r6
    1fb6:	ee 0f       	add	r30, r30
    1fb8:	ff 1f       	adc	r31, r31
    1fba:	c3 01       	movw	r24, r6
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	e8 0f       	add	r30, r24
    1fca:	f9 1f       	adc	r31, r25
    1fcc:	e2 0d       	add	r30, r2
    1fce:	f3 1d       	adc	r31, r3
    1fd0:	80 80       	ld	r8, Z
    1fd2:	88 20       	and	r8, r8
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <_Z13task_wateringPv+0x854>
    1fd6:	99 c2       	rjmp	.+1330   	; 0x250a <_Z13task_wateringPv+0xd86>
		});
		if(ready){
			last_water = water_process(current,duration);
		}
		ready = false;
		water_every.apply([&current,&last_water,&ready,&duration,&m_delay](water_every_array_t & m_every){
    1fd8:	6e 96       	adiw	r28, 0x1e	; 30
    1fda:	4e ac       	ldd	r4, Y+62	; 0x3e
    1fdc:	5f ac       	ldd	r5, Y+63	; 0x3f
    1fde:	6e 97       	sbiw	r28, 0x1e	; 30
			for (uint_least8_t i=0;i<m_every.size();++i){
				if(m_every[i].exist_flag){
					if(m_every[i].is_ready(current.hh,current.mm,current.ss)){
    1fe0:	f2 01       	movw	r30, r4
    1fe2:	22 81       	ldd	r18, Z+2	; 0x02
    1fe4:	f1 81       	ldd	r31, Z+1	; 0x01
    1fe6:	c2 56       	subi	r28, 0x62	; 98
    1fe8:	df 4f       	sbci	r29, 0xFF	; 255
    1fea:	f8 83       	st	Y, r31
    1fec:	ce 59       	subi	r28, 0x9E	; 158
    1fee:	d0 40       	sbci	r29, 0x00	; 0
    1ff0:	f2 01       	movw	r30, r4
    1ff2:	f0 81       	ld	r31, Z
    1ff4:	c4 56       	subi	r28, 0x64	; 100
    1ff6:	df 4f       	sbci	r29, 0xFF	; 255
    1ff8:	f8 83       	st	Y, r31
    1ffa:	cc 59       	subi	r28, 0x9C	; 156
    1ffc:	d0 40       	sbci	r29, 0x00	; 0
    }
    bool is_ready(uint_least8_t tmp_hh,uint_least8_t tmp_mm,uint_least8_t tmp_ss){
        if(tmp_delayed_days < days_delay){
    1ffe:	c3 01       	movw	r24, r6
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	f3 01       	movw	r30, r6
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	e8 0f       	add	r30, r24
    2014:	f9 1f       	adc	r31, r25
    2016:	e2 0d       	add	r30, r2
    2018:	f3 1d       	adc	r31, r3
    201a:	92 81       	ldd	r25, Z+2	; 0x02
    201c:	81 81       	ldd	r24, Z+1	; 0x01
    201e:	98 17       	cp	r25, r24
    2020:	08 f4       	brcc	.+2      	; 0x2024 <_Z13task_wateringPv+0x8a0>
    2022:	45 c0       	rjmp	.+138    	; 0x20ae <_Z13task_wateringPv+0x92a>
            return false;
        }
        if(hh > tmp_hh){
    2024:	c3 01       	movw	r24, r6
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	f3 01       	movw	r30, r6
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	e8 0f       	add	r30, r24
    203a:	f9 1f       	adc	r31, r25
    203c:	e2 0d       	add	r30, r2
    203e:	f3 1d       	adc	r31, r3
    2040:	83 81       	ldd	r24, Z+3	; 0x03
    2042:	c4 56       	subi	r28, 0x64	; 100
    2044:	df 4f       	sbci	r29, 0xFF	; 255
    2046:	08 81       	ld	r16, Y
    2048:	cc 59       	subi	r28, 0x9C	; 156
    204a:	d0 40       	sbci	r29, 0x00	; 0
    204c:	08 17       	cp	r16, r24
    204e:	88 f1       	brcs	.+98     	; 0x20b2 <_Z13task_wateringPv+0x92e>
            return false;
        } else if (hh < tmp_hh ) {
    2050:	80 17       	cp	r24, r16
    2052:	90 f1       	brcs	.+100    	; 0x20b8 <_Z13task_wateringPv+0x934>
            return true;
        }

        if(mm > tmp_mm){
    2054:	c3 01       	movw	r24, r6
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	88 0f       	add	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	f3 01       	movw	r30, r6
    2064:	ee 0f       	add	r30, r30
    2066:	ff 1f       	adc	r31, r31
    2068:	e8 0f       	add	r30, r24
    206a:	f9 1f       	adc	r31, r25
    206c:	e2 0d       	add	r30, r2
    206e:	f3 1d       	adc	r31, r3
    2070:	84 81       	ldd	r24, Z+4	; 0x04
    2072:	c2 56       	subi	r28, 0x62	; 98
    2074:	df 4f       	sbci	r29, 0xFF	; 255
    2076:	18 81       	ld	r17, Y
    2078:	ce 59       	subi	r28, 0x9E	; 158
    207a:	d0 40       	sbci	r29, 0x00	; 0
    207c:	18 17       	cp	r17, r24
    207e:	d8 f0       	brcs	.+54     	; 0x20b6 <_Z13task_wateringPv+0x932>
            return false;
        } else if (mm < tmp_mm) {
    2080:	81 17       	cp	r24, r17
    2082:	d0 f0       	brcs	.+52     	; 0x20b8 <_Z13task_wateringPv+0x934>
            return true;
        }
        return tmp_ss >= ss;
    2084:	c3 01       	movw	r24, r6
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	f3 01       	movw	r30, r6
    2094:	ee 0f       	add	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	e8 0f       	add	r30, r24
    209a:	f9 1f       	adc	r31, r25
    209c:	e2 0d       	add	r30, r2
    209e:	f3 1d       	adc	r31, r3
    20a0:	88 24       	eor	r8, r8
    20a2:	83 94       	inc	r8
    20a4:	85 81       	ldd	r24, Z+5	; 0x05
    20a6:	28 17       	cp	r18, r24
    20a8:	38 f4       	brcc	.+14     	; 0x20b8 <_Z13task_wateringPv+0x934>
    20aa:	81 2c       	mov	r8, r1
    20ac:	05 c0       	rjmp	.+10     	; 0x20b8 <_Z13task_wateringPv+0x934>
    void next_day(){
        tmp_delayed_days++;
    }
    bool is_ready(uint_least8_t tmp_hh,uint_least8_t tmp_mm,uint_least8_t tmp_ss){
        if(tmp_delayed_days < days_delay){
            return false;
    20ae:	81 2c       	mov	r8, r1
    20b0:	03 c0       	rjmp	.+6      	; 0x20b8 <_Z13task_wateringPv+0x934>
        }
        if(hh > tmp_hh){
            return false;
    20b2:	81 2c       	mov	r8, r1
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <_Z13task_wateringPv+0x934>
        } else if (hh < tmp_hh ) {
            return true;
        }

        if(mm > tmp_mm){
            return false;
    20b6:	81 2c       	mov	r8, r1
    20b8:	88 20       	and	r8, r8
    20ba:	09 f4       	brne	.+2      	; 0x20be <_Z13task_wateringPv+0x93a>
    20bc:	26 c2       	rjmp	.+1100   	; 0x250a <_Z13task_wateringPv+0xd86>
		});
		if(ready){
			last_water = water_process(current,duration);
		}
		ready = false;
		water_every.apply([&current,&last_water,&ready,&duration,&m_delay](water_every_array_t & m_every){
    20be:	a6 96       	adiw	r28, 0x26	; 38
    20c0:	ee ad       	ldd	r30, Y+62	; 0x3e
    20c2:	ff ad       	ldd	r31, Y+63	; 0x3f
    20c4:	a6 97       	sbiw	r28, 0x26	; 38
			for (uint_least8_t i=0;i<m_every.size();++i){
				if(m_every[i].exist_flag){
					if(m_every[i].is_ready(current.hh,current.mm,current.ss)){
						if(last_water + m_delay  <= current){
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	a2 81       	ldd	r26, Z+2	; 0x02
    20cc:	b3 81       	ldd	r27, Z+3	; 0x03
    20ce:	8c 01       	movw	r16, r24
    20d0:	9d 01       	movw	r18, r26
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	ba 01       	movw	r22, r20
    20d8:	c2 57       	subi	r28, 0x72	; 114
    20da:	df 4f       	sbci	r29, 0xFF	; 255
    20dc:	88 83       	st	Y, r24
    20de:	ce 58       	subi	r28, 0x8E	; 142
    20e0:	d0 40       	sbci	r29, 0x00	; 0
    20e2:	c1 57       	subi	r28, 0x71	; 113
    20e4:	df 4f       	sbci	r29, 0xFF	; 255
    20e6:	18 83       	st	Y, r17
    20e8:	cf 58       	subi	r28, 0x8F	; 143
    20ea:	d0 40       	sbci	r29, 0x00	; 0
    20ec:	c0 57       	subi	r28, 0x70	; 112
    20ee:	df 4f       	sbci	r29, 0xFF	; 255
    20f0:	28 83       	st	Y, r18
    20f2:	c0 59       	subi	r28, 0x90	; 144
    20f4:	d0 40       	sbci	r29, 0x00	; 0
    20f6:	cf 56       	subi	r28, 0x6F	; 111
    20f8:	df 4f       	sbci	r29, 0xFF	; 255
    20fa:	38 83       	st	Y, r19
    20fc:	c1 59       	subi	r28, 0x91	; 145
    20fe:	d0 40       	sbci	r29, 0x00	; 0
    2100:	ce 56       	subi	r28, 0x6E	; 110
    2102:	df 4f       	sbci	r29, 0xFF	; 255
    2104:	48 83       	st	Y, r20
    2106:	c2 59       	subi	r28, 0x92	; 146
    2108:	d0 40       	sbci	r29, 0x00	; 0
    210a:	cd 56       	subi	r28, 0x6D	; 109
    210c:	df 4f       	sbci	r29, 0xFF	; 255
    210e:	58 83       	st	Y, r21
    2110:	c3 59       	subi	r28, 0x93	; 147
    2112:	d0 40       	sbci	r29, 0x00	; 0
    2114:	cc 56       	subi	r28, 0x6C	; 108
    2116:	df 4f       	sbci	r29, 0xFF	; 255
    2118:	68 83       	st	Y, r22
    211a:	c4 59       	subi	r28, 0x94	; 148
    211c:	d0 40       	sbci	r29, 0x00	; 0
    211e:	cb 56       	subi	r28, 0x6B	; 107
    2120:	df 4f       	sbci	r29, 0xFF	; 255
    2122:	78 83       	st	Y, r23
    2124:	c5 59       	subi	r28, 0x95	; 149
    2126:	d0 40       	sbci	r29, 0x00	; 0
		});
		if(ready){
			last_water = water_process(current,duration);
		}
		ready = false;
		water_every.apply([&current,&last_water,&ready,&duration,&m_delay](water_every_array_t & m_every){
    2128:	a0 96       	adiw	r28, 0x20	; 32
    212a:	ee ad       	ldd	r30, Y+62	; 0x3e
    212c:	ff ad       	ldd	r31, Y+63	; 0x3f
    212e:	a0 97       	sbiw	r28, 0x20	; 32
		
		days += msecs;
		return *this;
	}
	inline hh_mm_ss_dd operator + (uint_least64_t msecs)const{
		hh_mm_ss_dd ret = *this;
    2130:	87 e0       	ldi	r24, 0x07	; 7
    2132:	de 01       	movw	r26, r28
    2134:	a9 58       	subi	r26, 0x89	; 137
    2136:	bf 4f       	sbci	r27, 0xFF	; 255
    2138:	01 90       	ld	r0, Z+
    213a:	0d 92       	st	X+, r0
    213c:	8a 95       	dec	r24
    213e:	e1 f7       	brne	.-8      	; 0x2138 <_Z13task_wateringPv+0x9b4>
	inline bool operator <=(hh_mm_ss_dd const & other) const{
		return other >= *this;
	}
	
	inline hh_mm_ss_dd & operator += (uint_least64_t msecs){
		msecs += ss;
    2140:	ea 96       	adiw	r28, 0x3a	; 58
    2142:	2f ad       	ldd	r18, Y+63	; 0x3f
    2144:	ea 97       	sbiw	r28, 0x3a	; 58
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	c2 57       	subi	r28, 0x72	; 114
    2156:	df 4f       	sbci	r29, 0xFF	; 255
    2158:	a8 80       	ld	r10, Y
    215a:	ce 58       	subi	r28, 0x8E	; 142
    215c:	d0 40       	sbci	r29, 0x00	; 0
    215e:	c1 57       	subi	r28, 0x71	; 113
    2160:	df 4f       	sbci	r29, 0xFF	; 255
    2162:	b8 80       	ld	r11, Y
    2164:	cf 58       	subi	r28, 0x8F	; 143
    2166:	d0 40       	sbci	r29, 0x00	; 0
    2168:	c0 57       	subi	r28, 0x70	; 112
    216a:	df 4f       	sbci	r29, 0xFF	; 255
    216c:	c8 80       	ld	r12, Y
    216e:	c0 59       	subi	r28, 0x90	; 144
    2170:	d0 40       	sbci	r29, 0x00	; 0
    2172:	cf 56       	subi	r28, 0x6F	; 111
    2174:	df 4f       	sbci	r29, 0xFF	; 255
    2176:	d8 80       	ld	r13, Y
    2178:	c1 59       	subi	r28, 0x91	; 145
    217a:	d0 40       	sbci	r29, 0x00	; 0
    217c:	e1 2c       	mov	r14, r1
    217e:	f1 2c       	mov	r15, r1
    2180:	00 e0       	ldi	r16, 0x00	; 0
    2182:	10 e0       	ldi	r17, 0x00	; 0
    2184:	0e 94 b8 22 	call	0x4570	; 0x4570 <__adddi3>
    2188:	c2 57       	subi	r28, 0x72	; 114
    218a:	df 4f       	sbci	r29, 0xFF	; 255
    218c:	28 83       	st	Y, r18
    218e:	ce 58       	subi	r28, 0x8E	; 142
    2190:	d0 40       	sbci	r29, 0x00	; 0
    2192:	ca 56       	subi	r28, 0x6A	; 106
    2194:	df 4f       	sbci	r29, 0xFF	; 255
    2196:	38 83       	st	Y, r19
    2198:	c6 59       	subi	r28, 0x96	; 150
    219a:	d0 40       	sbci	r29, 0x00	; 0
    219c:	c9 56       	subi	r28, 0x69	; 105
    219e:	df 4f       	sbci	r29, 0xFF	; 255
    21a0:	48 83       	st	Y, r20
    21a2:	c7 59       	subi	r28, 0x97	; 151
    21a4:	d0 40       	sbci	r29, 0x00	; 0
    21a6:	c8 56       	subi	r28, 0x68	; 104
    21a8:	df 4f       	sbci	r29, 0xFF	; 255
    21aa:	58 83       	st	Y, r21
    21ac:	c8 59       	subi	r28, 0x98	; 152
    21ae:	d0 40       	sbci	r29, 0x00	; 0
    21b0:	c7 56       	subi	r28, 0x67	; 103
    21b2:	df 4f       	sbci	r29, 0xFF	; 255
    21b4:	68 83       	st	Y, r22
    21b6:	c9 59       	subi	r28, 0x99	; 153
    21b8:	d0 40       	sbci	r29, 0x00	; 0
    21ba:	c6 56       	subi	r28, 0x66	; 102
    21bc:	df 4f       	sbci	r29, 0xFF	; 255
    21be:	78 83       	st	Y, r23
    21c0:	ca 59       	subi	r28, 0x9A	; 154
    21c2:	d0 40       	sbci	r29, 0x00	; 0
    21c4:	c5 56       	subi	r28, 0x65	; 101
    21c6:	df 4f       	sbci	r29, 0xFF	; 255
    21c8:	88 83       	st	Y, r24
    21ca:	cb 59       	subi	r28, 0x9B	; 155
    21cc:	d0 40       	sbci	r29, 0x00	; 0
    21ce:	c3 56       	subi	r28, 0x63	; 99
    21d0:	df 4f       	sbci	r29, 0xFF	; 255
    21d2:	98 83       	st	Y, r25
    21d4:	cd 59       	subi	r28, 0x9D	; 157
    21d6:	d0 40       	sbci	r29, 0x00	; 0
		ss = msecs % 60;
    21d8:	0f 2e       	mov	r0, r31
    21da:	fc e3       	ldi	r31, 0x3C	; 60
    21dc:	af 2e       	mov	r10, r31
    21de:	f0 2d       	mov	r31, r0
    21e0:	b1 2c       	mov	r11, r1
    21e2:	c1 2c       	mov	r12, r1
    21e4:	d1 2c       	mov	r13, r1
    21e6:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__umoddi3>
    21ea:	ea 96       	adiw	r28, 0x3a	; 58
    21ec:	2f af       	std	Y+63, r18	; 0x3f
    21ee:	ea 97       	sbiw	r28, 0x3a	; 58
		msecs/=60;
    21f0:	c2 57       	subi	r28, 0x72	; 114
    21f2:	df 4f       	sbci	r29, 0xFF	; 255
    21f4:	28 81       	ld	r18, Y
    21f6:	ce 58       	subi	r28, 0x8E	; 142
    21f8:	d0 40       	sbci	r29, 0x00	; 0
    21fa:	ca 56       	subi	r28, 0x6A	; 106
    21fc:	df 4f       	sbci	r29, 0xFF	; 255
    21fe:	38 81       	ld	r19, Y
    2200:	c6 59       	subi	r28, 0x96	; 150
    2202:	d0 40       	sbci	r29, 0x00	; 0
    2204:	c9 56       	subi	r28, 0x69	; 105
    2206:	df 4f       	sbci	r29, 0xFF	; 255
    2208:	48 81       	ld	r20, Y
    220a:	c7 59       	subi	r28, 0x97	; 151
    220c:	d0 40       	sbci	r29, 0x00	; 0
    220e:	c8 56       	subi	r28, 0x68	; 104
    2210:	df 4f       	sbci	r29, 0xFF	; 255
    2212:	58 81       	ld	r21, Y
    2214:	c8 59       	subi	r28, 0x98	; 152
    2216:	d0 40       	sbci	r29, 0x00	; 0
    2218:	c7 56       	subi	r28, 0x67	; 103
    221a:	df 4f       	sbci	r29, 0xFF	; 255
    221c:	68 81       	ld	r22, Y
    221e:	c9 59       	subi	r28, 0x99	; 153
    2220:	d0 40       	sbci	r29, 0x00	; 0
    2222:	c6 56       	subi	r28, 0x66	; 102
    2224:	df 4f       	sbci	r29, 0xFF	; 255
    2226:	78 81       	ld	r23, Y
    2228:	ca 59       	subi	r28, 0x9A	; 154
    222a:	d0 40       	sbci	r29, 0x00	; 0
    222c:	c5 56       	subi	r28, 0x65	; 101
    222e:	df 4f       	sbci	r29, 0xFF	; 255
    2230:	88 81       	ld	r24, Y
    2232:	cb 59       	subi	r28, 0x9B	; 155
    2234:	d0 40       	sbci	r29, 0x00	; 0
    2236:	c3 56       	subi	r28, 0x63	; 99
    2238:	df 4f       	sbci	r29, 0xFF	; 255
    223a:	98 81       	ld	r25, Y
    223c:	cd 59       	subi	r28, 0x9D	; 157
    223e:	d0 40       	sbci	r29, 0x00	; 0
    2240:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__udivdi3>
    2244:	a2 2e       	mov	r10, r18
    2246:	b3 2e       	mov	r11, r19
    2248:	c4 2e       	mov	r12, r20
    224a:	d5 2e       	mov	r13, r21
    224c:	e6 2e       	mov	r14, r22
    224e:	f7 2e       	mov	r15, r23
    2250:	08 2f       	mov	r16, r24
    2252:	19 2f       	mov	r17, r25
		
		msecs += mm;
    2254:	e9 96       	adiw	r28, 0x39	; 57
    2256:	2f ad       	ldd	r18, Y+63	; 0x3f
    2258:	e9 97       	sbiw	r28, 0x39	; 57
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e0       	ldi	r20, 0x00	; 0
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	0e 94 b8 22 	call	0x4570	; 0x4570 <__adddi3>
    226c:	c2 57       	subi	r28, 0x72	; 114
    226e:	df 4f       	sbci	r29, 0xFF	; 255
    2270:	28 83       	st	Y, r18
    2272:	ce 58       	subi	r28, 0x8E	; 142
    2274:	d0 40       	sbci	r29, 0x00	; 0
    2276:	ca 56       	subi	r28, 0x6A	; 106
    2278:	df 4f       	sbci	r29, 0xFF	; 255
    227a:	38 83       	st	Y, r19
    227c:	c6 59       	subi	r28, 0x96	; 150
    227e:	d0 40       	sbci	r29, 0x00	; 0
    2280:	c9 56       	subi	r28, 0x69	; 105
    2282:	df 4f       	sbci	r29, 0xFF	; 255
    2284:	48 83       	st	Y, r20
    2286:	c7 59       	subi	r28, 0x97	; 151
    2288:	d0 40       	sbci	r29, 0x00	; 0
    228a:	c8 56       	subi	r28, 0x68	; 104
    228c:	df 4f       	sbci	r29, 0xFF	; 255
    228e:	58 83       	st	Y, r21
    2290:	c8 59       	subi	r28, 0x98	; 152
    2292:	d0 40       	sbci	r29, 0x00	; 0
    2294:	c7 56       	subi	r28, 0x67	; 103
    2296:	df 4f       	sbci	r29, 0xFF	; 255
    2298:	68 83       	st	Y, r22
    229a:	c9 59       	subi	r28, 0x99	; 153
    229c:	d0 40       	sbci	r29, 0x00	; 0
    229e:	c6 56       	subi	r28, 0x66	; 102
    22a0:	df 4f       	sbci	r29, 0xFF	; 255
    22a2:	78 83       	st	Y, r23
    22a4:	ca 59       	subi	r28, 0x9A	; 154
    22a6:	d0 40       	sbci	r29, 0x00	; 0
    22a8:	c5 56       	subi	r28, 0x65	; 101
    22aa:	df 4f       	sbci	r29, 0xFF	; 255
    22ac:	88 83       	st	Y, r24
    22ae:	cb 59       	subi	r28, 0x9B	; 155
    22b0:	d0 40       	sbci	r29, 0x00	; 0
    22b2:	c3 56       	subi	r28, 0x63	; 99
    22b4:	df 4f       	sbci	r29, 0xFF	; 255
    22b6:	98 83       	st	Y, r25
    22b8:	cd 59       	subi	r28, 0x9D	; 157
    22ba:	d0 40       	sbci	r29, 0x00	; 0
		mm = msecs % 60;
    22bc:	0f 2e       	mov	r0, r31
    22be:	fc e3       	ldi	r31, 0x3C	; 60
    22c0:	af 2e       	mov	r10, r31
    22c2:	f0 2d       	mov	r31, r0
    22c4:	b1 2c       	mov	r11, r1
    22c6:	c1 2c       	mov	r12, r1
    22c8:	d1 2c       	mov	r13, r1
    22ca:	e1 2c       	mov	r14, r1
    22cc:	f1 2c       	mov	r15, r1
    22ce:	00 e0       	ldi	r16, 0x00	; 0
    22d0:	10 e0       	ldi	r17, 0x00	; 0
    22d2:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__umoddi3>
    22d6:	e9 96       	adiw	r28, 0x39	; 57
    22d8:	2f af       	std	Y+63, r18	; 0x3f
    22da:	e9 97       	sbiw	r28, 0x39	; 57
		msecs/=60;
    22dc:	c2 57       	subi	r28, 0x72	; 114
    22de:	df 4f       	sbci	r29, 0xFF	; 255
    22e0:	28 81       	ld	r18, Y
    22e2:	ce 58       	subi	r28, 0x8E	; 142
    22e4:	d0 40       	sbci	r29, 0x00	; 0
    22e6:	ca 56       	subi	r28, 0x6A	; 106
    22e8:	df 4f       	sbci	r29, 0xFF	; 255
    22ea:	38 81       	ld	r19, Y
    22ec:	c6 59       	subi	r28, 0x96	; 150
    22ee:	d0 40       	sbci	r29, 0x00	; 0
    22f0:	c9 56       	subi	r28, 0x69	; 105
    22f2:	df 4f       	sbci	r29, 0xFF	; 255
    22f4:	48 81       	ld	r20, Y
    22f6:	c7 59       	subi	r28, 0x97	; 151
    22f8:	d0 40       	sbci	r29, 0x00	; 0
    22fa:	c8 56       	subi	r28, 0x68	; 104
    22fc:	df 4f       	sbci	r29, 0xFF	; 255
    22fe:	58 81       	ld	r21, Y
    2300:	c8 59       	subi	r28, 0x98	; 152
    2302:	d0 40       	sbci	r29, 0x00	; 0
    2304:	c7 56       	subi	r28, 0x67	; 103
    2306:	df 4f       	sbci	r29, 0xFF	; 255
    2308:	68 81       	ld	r22, Y
    230a:	c9 59       	subi	r28, 0x99	; 153
    230c:	d0 40       	sbci	r29, 0x00	; 0
    230e:	c6 56       	subi	r28, 0x66	; 102
    2310:	df 4f       	sbci	r29, 0xFF	; 255
    2312:	78 81       	ld	r23, Y
    2314:	ca 59       	subi	r28, 0x9A	; 154
    2316:	d0 40       	sbci	r29, 0x00	; 0
    2318:	c5 56       	subi	r28, 0x65	; 101
    231a:	df 4f       	sbci	r29, 0xFF	; 255
    231c:	88 81       	ld	r24, Y
    231e:	cb 59       	subi	r28, 0x9B	; 155
    2320:	d0 40       	sbci	r29, 0x00	; 0
    2322:	c3 56       	subi	r28, 0x63	; 99
    2324:	df 4f       	sbci	r29, 0xFF	; 255
    2326:	98 81       	ld	r25, Y
    2328:	cd 59       	subi	r28, 0x9D	; 157
    232a:	d0 40       	sbci	r29, 0x00	; 0
    232c:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__udivdi3>
    2330:	a2 2e       	mov	r10, r18
    2332:	b3 2e       	mov	r11, r19
    2334:	c4 2e       	mov	r12, r20
    2336:	d5 2e       	mov	r13, r21
    2338:	e6 2e       	mov	r14, r22
    233a:	f7 2e       	mov	r15, r23
    233c:	08 2f       	mov	r16, r24
    233e:	19 2f       	mov	r17, r25
		
		msecs += hh;
    2340:	e8 96       	adiw	r28, 0x38	; 56
    2342:	2f ad       	ldd	r18, Y+63	; 0x3f
    2344:	e8 97       	sbiw	r28, 0x38	; 56
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	50 e0       	ldi	r21, 0x00	; 0
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 b8 22 	call	0x4570	; 0x4570 <__adddi3>
    2358:	c2 57       	subi	r28, 0x72	; 114
    235a:	df 4f       	sbci	r29, 0xFF	; 255
    235c:	28 83       	st	Y, r18
    235e:	ce 58       	subi	r28, 0x8E	; 142
    2360:	d0 40       	sbci	r29, 0x00	; 0
    2362:	ca 56       	subi	r28, 0x6A	; 106
    2364:	df 4f       	sbci	r29, 0xFF	; 255
    2366:	38 83       	st	Y, r19
    2368:	c6 59       	subi	r28, 0x96	; 150
    236a:	d0 40       	sbci	r29, 0x00	; 0
    236c:	c9 56       	subi	r28, 0x69	; 105
    236e:	df 4f       	sbci	r29, 0xFF	; 255
    2370:	48 83       	st	Y, r20
    2372:	c7 59       	subi	r28, 0x97	; 151
    2374:	d0 40       	sbci	r29, 0x00	; 0
    2376:	c8 56       	subi	r28, 0x68	; 104
    2378:	df 4f       	sbci	r29, 0xFF	; 255
    237a:	58 83       	st	Y, r21
    237c:	c8 59       	subi	r28, 0x98	; 152
    237e:	d0 40       	sbci	r29, 0x00	; 0
    2380:	c7 56       	subi	r28, 0x67	; 103
    2382:	df 4f       	sbci	r29, 0xFF	; 255
    2384:	68 83       	st	Y, r22
    2386:	c9 59       	subi	r28, 0x99	; 153
    2388:	d0 40       	sbci	r29, 0x00	; 0
    238a:	c6 56       	subi	r28, 0x66	; 102
    238c:	df 4f       	sbci	r29, 0xFF	; 255
    238e:	78 83       	st	Y, r23
    2390:	ca 59       	subi	r28, 0x9A	; 154
    2392:	d0 40       	sbci	r29, 0x00	; 0
    2394:	c5 56       	subi	r28, 0x65	; 101
    2396:	df 4f       	sbci	r29, 0xFF	; 255
    2398:	88 83       	st	Y, r24
    239a:	cb 59       	subi	r28, 0x9B	; 155
    239c:	d0 40       	sbci	r29, 0x00	; 0
    239e:	c3 56       	subi	r28, 0x63	; 99
    23a0:	df 4f       	sbci	r29, 0xFF	; 255
    23a2:	98 83       	st	Y, r25
    23a4:	cd 59       	subi	r28, 0x9D	; 157
    23a6:	d0 40       	sbci	r29, 0x00	; 0
		hh = msecs % 24;
    23a8:	0f 2e       	mov	r0, r31
    23aa:	f8 e1       	ldi	r31, 0x18	; 24
    23ac:	af 2e       	mov	r10, r31
    23ae:	f0 2d       	mov	r31, r0
    23b0:	b1 2c       	mov	r11, r1
    23b2:	c1 2c       	mov	r12, r1
    23b4:	d1 2c       	mov	r13, r1
    23b6:	e1 2c       	mov	r14, r1
    23b8:	f1 2c       	mov	r15, r1
    23ba:	00 e0       	ldi	r16, 0x00	; 0
    23bc:	10 e0       	ldi	r17, 0x00	; 0
    23be:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__umoddi3>
    23c2:	e8 96       	adiw	r28, 0x38	; 56
    23c4:	2f af       	std	Y+63, r18	; 0x3f
    23c6:	e8 97       	sbiw	r28, 0x38	; 56
		msecs/=24;
    23c8:	c2 57       	subi	r28, 0x72	; 114
    23ca:	df 4f       	sbci	r29, 0xFF	; 255
    23cc:	28 81       	ld	r18, Y
    23ce:	ce 58       	subi	r28, 0x8E	; 142
    23d0:	d0 40       	sbci	r29, 0x00	; 0
    23d2:	ca 56       	subi	r28, 0x6A	; 106
    23d4:	df 4f       	sbci	r29, 0xFF	; 255
    23d6:	38 81       	ld	r19, Y
    23d8:	c6 59       	subi	r28, 0x96	; 150
    23da:	d0 40       	sbci	r29, 0x00	; 0
    23dc:	c9 56       	subi	r28, 0x69	; 105
    23de:	df 4f       	sbci	r29, 0xFF	; 255
    23e0:	48 81       	ld	r20, Y
    23e2:	c7 59       	subi	r28, 0x97	; 151
    23e4:	d0 40       	sbci	r29, 0x00	; 0
    23e6:	c8 56       	subi	r28, 0x68	; 104
    23e8:	df 4f       	sbci	r29, 0xFF	; 255
    23ea:	58 81       	ld	r21, Y
    23ec:	c8 59       	subi	r28, 0x98	; 152
    23ee:	d0 40       	sbci	r29, 0x00	; 0
    23f0:	c7 56       	subi	r28, 0x67	; 103
    23f2:	df 4f       	sbci	r29, 0xFF	; 255
    23f4:	68 81       	ld	r22, Y
    23f6:	c9 59       	subi	r28, 0x99	; 153
    23f8:	d0 40       	sbci	r29, 0x00	; 0
    23fa:	c6 56       	subi	r28, 0x66	; 102
    23fc:	df 4f       	sbci	r29, 0xFF	; 255
    23fe:	78 81       	ld	r23, Y
    2400:	ca 59       	subi	r28, 0x9A	; 154
    2402:	d0 40       	sbci	r29, 0x00	; 0
    2404:	c5 56       	subi	r28, 0x65	; 101
    2406:	df 4f       	sbci	r29, 0xFF	; 255
    2408:	88 81       	ld	r24, Y
    240a:	cb 59       	subi	r28, 0x9B	; 155
    240c:	d0 40       	sbci	r29, 0x00	; 0
    240e:	c3 56       	subi	r28, 0x63	; 99
    2410:	df 4f       	sbci	r29, 0xFF	; 255
    2412:	98 81       	ld	r25, Y
    2414:	cd 59       	subi	r28, 0x9D	; 157
    2416:	d0 40       	sbci	r29, 0x00	; 0
    2418:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__udivdi3>
    241c:	02 2f       	mov	r16, r18
    241e:	13 2f       	mov	r17, r19
    2420:	24 2f       	mov	r18, r20
    2422:	35 2f       	mov	r19, r21
		
		days += msecs;
    2424:	ee 96       	adiw	r28, 0x3e	; 62
    2426:	8c ad       	ldd	r24, Y+60	; 0x3c
    2428:	9d ad       	ldd	r25, Y+61	; 0x3d
    242a:	ae ad       	ldd	r26, Y+62	; 0x3e
    242c:	bf ad       	ldd	r27, Y+63	; 0x3f
    242e:	ee 97       	sbiw	r28, 0x3e	; 62
    2430:	08 0f       	add	r16, r24
    2432:	19 1f       	adc	r17, r25
    2434:	2a 1f       	adc	r18, r26
    2436:	3b 1f       	adc	r19, r27
    2438:	ee 96       	adiw	r28, 0x3e	; 62
    243a:	0c af       	std	Y+60, r16	; 0x3c
    243c:	1d af       	std	Y+61, r17	; 0x3d
    243e:	2e af       	std	Y+62, r18	; 0x3e
    2440:	3f af       	std	Y+63, r19	; 0x3f
    2442:	ee 97       	sbiw	r28, 0x3e	; 62
		return *this;
	}
	inline hh_mm_ss_dd operator + (uint_least64_t msecs)const{
		hh_mm_ss_dd ret = *this;
		ret+=msecs;
		return ret;
    2444:	87 e0       	ldi	r24, 0x07	; 7
    2446:	fe 01       	movw	r30, r28
    2448:	e9 58       	subi	r30, 0x89	; 137
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	de 01       	movw	r26, r28
    244e:	11 96       	adiw	r26, 0x01	; 1
    2450:	01 90       	ld	r0, Z+
    2452:	0d 92       	st	X+, r0
    2454:	8a 95       	dec	r24
    2456:	e1 f7       	brne	.-8      	; 0x2450 <_Z13task_wateringPv+0xccc>
    2458:	87 e0       	ldi	r24, 0x07	; 7
    245a:	fe 01       	movw	r30, r28
    245c:	31 96       	adiw	r30, 0x01	; 1
    245e:	de 01       	movw	r26, r28
    2460:	18 96       	adiw	r26, 0x08	; 8
    2462:	01 90       	ld	r0, Z+
    2464:	0d 92       	st	X+, r0
    2466:	8a 95       	dec	r24
    2468:	e1 f7       	brne	.-8      	; 0x2462 <_Z13task_wateringPv+0xcde>
	}
	inline bool operator <(hh_mm_ss_dd const & other) const{
		return other > *this;
	}
	inline bool operator >=(hh_mm_ss_dd const & other) const{
		if(days > other.days){
    246a:	f2 01       	movw	r30, r4
    246c:	43 81       	ldd	r20, Z+3	; 0x03
    246e:	54 81       	ldd	r21, Z+4	; 0x04
    2470:	65 81       	ldd	r22, Z+5	; 0x05
    2472:	76 81       	ldd	r23, Z+6	; 0x06
    2474:	8b 85       	ldd	r24, Y+11	; 0x0b
    2476:	9c 85       	ldd	r25, Y+12	; 0x0c
    2478:	ad 85       	ldd	r26, Y+13	; 0x0d
    247a:	be 85       	ldd	r27, Y+14	; 0x0e
    247c:	84 17       	cp	r24, r20
    247e:	95 07       	cpc	r25, r21
    2480:	a6 07       	cpc	r26, r22
    2482:	b7 07       	cpc	r27, r23
    2484:	f0 f0       	brcs	.+60     	; 0x24c2 <_Z13task_wateringPv+0xd3e>
			return true;
		} else if (days < other.days) {
    2486:	48 17       	cp	r20, r24
    2488:	59 07       	cpc	r21, r25
    248a:	6a 07       	cpc	r22, r26
    248c:	7b 07       	cpc	r23, r27
    248e:	b0 f0       	brcs	.+44     	; 0x24bc <_Z13task_wateringPv+0xd38>
			return false;
		}
		
		if(hh > other.hh){
    2490:	88 85       	ldd	r24, Y+8	; 0x08
    2492:	c4 56       	subi	r28, 0x64	; 100
    2494:	df 4f       	sbci	r29, 0xFF	; 255
    2496:	f8 81       	ld	r31, Y
    2498:	cc 59       	subi	r28, 0x9C	; 156
    249a:	d0 40       	sbci	r29, 0x00	; 0
    249c:	8f 17       	cp	r24, r31
    249e:	88 f0       	brcs	.+34     	; 0x24c2 <_Z13task_wateringPv+0xd3e>
			return true;
		} else if (hh < other.hh) {
    24a0:	f8 17       	cp	r31, r24
    24a2:	70 f0       	brcs	.+28     	; 0x24c0 <_Z13task_wateringPv+0xd3c>
			return false;
		}
		
		if(mm > other.mm){
    24a4:	89 85       	ldd	r24, Y+9	; 0x09
    24a6:	c2 56       	subi	r28, 0x62	; 98
    24a8:	df 4f       	sbci	r29, 0xFF	; 255
    24aa:	08 81       	ld	r16, Y
    24ac:	ce 59       	subi	r28, 0x9E	; 158
    24ae:	d0 40       	sbci	r29, 0x00	; 0
    24b0:	80 17       	cp	r24, r16
    24b2:	38 f0       	brcs	.+14     	; 0x24c2 <_Z13task_wateringPv+0xd3e>
			return true;
		} else if (mm < other.mm) {
    24b4:	08 17       	cp	r16, r24
    24b6:	28 f4       	brcc	.+10     	; 0x24c2 <_Z13task_wateringPv+0xd3e>
			return false;
    24b8:	81 2c       	mov	r8, r1
    24ba:	03 c0       	rjmp	.+6      	; 0x24c2 <_Z13task_wateringPv+0xd3e>
	}
	inline bool operator >=(hh_mm_ss_dd const & other) const{
		if(days > other.days){
			return true;
		} else if (days < other.days) {
			return false;
    24bc:	81 2c       	mov	r8, r1
    24be:	01 c0       	rjmp	.+2      	; 0x24c2 <_Z13task_wateringPv+0xd3e>
		}
		
		if(hh > other.hh){
			return true;
		} else if (hh < other.hh) {
			return false;
    24c0:	81 2c       	mov	r8, r1
			for (uint_least8_t i=0;i<m_every.size();++i){
				if(m_every[i].exist_flag){
					if(m_every[i].is_ready(current.hh,current.mm,current.ss)){
						if(last_water + m_delay  <= current){
    24c2:	88 20       	and	r8, r8
    24c4:	11 f1       	breq	.+68     	; 0x250a <_Z13task_wateringPv+0xd86>
		});
		if(ready){
			last_water = water_process(current,duration);
		}
		ready = false;
		water_every.apply([&current,&last_water,&ready,&duration,&m_delay](water_every_array_t & m_every){
    24c6:	a2 96       	adiw	r28, 0x22	; 34
    24c8:	ee ad       	ldd	r30, Y+62	; 0x3e
    24ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    24cc:	a2 97       	sbiw	r28, 0x22	; 34
			for (uint_least8_t i=0;i<m_every.size();++i){
				if(m_every[i].exist_flag){
					if(m_every[i].is_ready(current.hh,current.mm,current.ss)){
						if(last_water + m_delay  <= current){
							ready = true;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	80 83       	st	Z, r24
		});
		if(ready){
			last_water = water_process(current,duration);
		}
		ready = false;
		water_every.apply([&current,&last_water,&ready,&duration,&m_delay](water_every_array_t & m_every){
    24d2:	a4 96       	adiw	r28, 0x24	; 36
    24d4:	ae ad       	ldd	r26, Y+62	; 0x3e
    24d6:	bf ad       	ldd	r27, Y+63	; 0x3f
    24d8:	a4 97       	sbiw	r28, 0x24	; 36
			for (uint_least8_t i=0;i<m_every.size();++i){
				if(m_every[i].exist_flag){
					if(m_every[i].is_ready(current.hh,current.mm,current.ss)){
						if(last_water + m_delay  <= current){
							ready = true;
							duration = m_every[i].duration;
    24da:	f3 01       	movw	r30, r6
    24dc:	ee 0f       	add	r30, r30
    24de:	ff 1f       	adc	r31, r31
    24e0:	c3 01       	movw	r24, r6
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	e8 0f       	add	r30, r24
    24f0:	f9 1f       	adc	r31, r25
    24f2:	e2 0d       	add	r30, r2
    24f4:	f3 1d       	adc	r31, r3
    24f6:	46 81       	ldd	r20, Z+6	; 0x06
    24f8:	57 81       	ldd	r21, Z+7	; 0x07
    24fa:	60 85       	ldd	r22, Z+8	; 0x08
    24fc:	71 85       	ldd	r23, Z+9	; 0x09
    24fe:	4d 93       	st	X+, r20
    2500:	5d 93       	st	X+, r21
    2502:	6d 93       	st	X+, r22
    2504:	7c 93       	st	X, r23
    2506:	13 97       	sbiw	r26, 0x03	; 3
            return true;
        }
        return tmp_ss >= ss;
    }
    void after_water(){
        tmp_delayed_days = 0;
    2508:	12 82       	std	Z+2, r1	; 0x02
		if(ready){
			last_water = water_process(current,duration);
		}
		ready = false;
		water_every.apply([&current,&last_water,&ready,&duration,&m_delay](water_every_array_t & m_every){
			for (uint_least8_t i=0;i<m_every.size();++i){
    250a:	93 94       	inc	r9
    250c:	4d cd       	rjmp	.-1382   	; 0x1fa8 <_Z13task_wateringPv+0x824>
	SemaphoreHandle_t xMutex;
	void lock(){
		xSemaphoreTake(xMutex, portMAX_DELAY);
	};
	void unlock(){
		xSemaphoreGive(xMutex);
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	60 e0       	ldi	r22, 0x00	; 0
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <water_every+0x2>
    251c:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <water_every+0x3>
    2520:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
						}
					}
				}
			}
		});
		if(ready){
    2524:	c3 57       	subi	r28, 0x73	; 115
    2526:	df 4f       	sbci	r29, 0xFF	; 255
    2528:	88 81       	ld	r24, Y
    252a:	cd 58       	subi	r28, 0x8D	; 141
    252c:	d0 40       	sbci	r29, 0x00	; 0
    252e:	88 23       	and	r24, r24
    2530:	09 f4       	brne	.+2      	; 0x2534 <_Z13task_wateringPv+0xdb0>
    2532:	94 c9       	rjmp	.-3288   	; 0x185c <_Z13task_wateringPv+0xd8>
			last_water = water_process(current,duration);
    2534:	cb 57       	subi	r28, 0x7B	; 123
    2536:	df 4f       	sbci	r29, 0xFF	; 255
    2538:	48 81       	ld	r20, Y
    253a:	59 81       	ldd	r21, Y+1	; 0x01
    253c:	6a 81       	ldd	r22, Y+2	; 0x02
    253e:	7b 81       	ldd	r23, Y+3	; 0x03
    2540:	c5 58       	subi	r28, 0x85	; 133
    2542:	d0 40       	sbci	r29, 0x00	; 0
    2544:	ce 01       	movw	r24, r28
    2546:	82 58       	subi	r24, 0x82	; 130
    2548:	9f 4f       	sbci	r25, 0xFF	; 255
    254a:	0e 94 35 0a 	call	0x146a	; 0x146a <_Z13water_processRK11hh_mm_ss_ddm>
    254e:	e1 96       	adiw	r28, 0x31	; 49
    2550:	2f af       	std	Y+63, r18	; 0x3f
    2552:	e1 97       	sbiw	r28, 0x31	; 49
    2554:	e2 96       	adiw	r28, 0x32	; 50
    2556:	3f af       	std	Y+63, r19	; 0x3f
    2558:	e2 97       	sbiw	r28, 0x32	; 50
    255a:	e3 96       	adiw	r28, 0x33	; 51
    255c:	4f af       	std	Y+63, r20	; 0x3f
    255e:	e3 97       	sbiw	r28, 0x33	; 51
    2560:	e4 96       	adiw	r28, 0x34	; 52
    2562:	5f af       	std	Y+63, r21	; 0x3f
    2564:	e4 97       	sbiw	r28, 0x34	; 52
    2566:	e5 96       	adiw	r28, 0x35	; 53
    2568:	6f af       	std	Y+63, r22	; 0x3f
    256a:	e5 97       	sbiw	r28, 0x35	; 53
    256c:	e6 96       	adiw	r28, 0x36	; 54
    256e:	7f af       	std	Y+63, r23	; 0x3f
    2570:	e6 97       	sbiw	r28, 0x36	; 54
    2572:	e7 96       	adiw	r28, 0x37	; 55
    2574:	8f af       	std	Y+63, r24	; 0x3f
    2576:	e7 97       	sbiw	r28, 0x37	; 55
}

void task_watering(void *){
	hh_mm_ss_dd last_water = clocks.get([](Clocks const & clk){return clk.current();});
	
	while(1){
    2578:	71 c9       	rjmp	.-3358   	; 0x185c <_Z13task_wateringPv+0xd8>

0000257a <_Z11task_windowPv>:
#include "global.h"

void task_window(void *){
	while(1){
		vTaskDelay(1000);
    257a:	88 ee       	ldi	r24, 0xE8	; 232
    257c:	93 e0       	ldi	r25, 0x03	; 3
    257e:	0e 94 79 18 	call	0x30f2	; 0x30f2 <vTaskDelay>
    2582:	fb cf       	rjmp	.-10     	; 0x257a <_Z11task_windowPv>

00002584 <__divsf3>:
    2584:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__divsf3x>
    2588:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__fp_round>
    258c:	0e 94 44 13 	call	0x2688	; 0x2688 <__fp_pscB>
    2590:	58 f0       	brcs	.+22     	; 0x25a8 <__divsf3+0x24>
    2592:	0e 94 3d 13 	call	0x267a	; 0x267a <__fp_pscA>
    2596:	40 f0       	brcs	.+16     	; 0x25a8 <__divsf3+0x24>
    2598:	29 f4       	brne	.+10     	; 0x25a4 <__divsf3+0x20>
    259a:	5f 3f       	cpi	r21, 0xFF	; 255
    259c:	29 f0       	breq	.+10     	; 0x25a8 <__divsf3+0x24>
    259e:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_inf>
    25a2:	51 11       	cpse	r21, r1
    25a4:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__fp_szero>
    25a8:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_nan>

000025ac <__divsf3x>:
    25ac:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__fp_split3>
    25b0:	68 f3       	brcs	.-38     	; 0x258c <__divsf3+0x8>

000025b2 <__divsf3_pse>:
    25b2:	99 23       	and	r25, r25
    25b4:	b1 f3       	breq	.-20     	; 0x25a2 <__divsf3+0x1e>
    25b6:	55 23       	and	r21, r21
    25b8:	91 f3       	breq	.-28     	; 0x259e <__divsf3+0x1a>
    25ba:	95 1b       	sub	r25, r21
    25bc:	55 0b       	sbc	r21, r21
    25be:	bb 27       	eor	r27, r27
    25c0:	aa 27       	eor	r26, r26
    25c2:	62 17       	cp	r22, r18
    25c4:	73 07       	cpc	r23, r19
    25c6:	84 07       	cpc	r24, r20
    25c8:	38 f0       	brcs	.+14     	; 0x25d8 <__divsf3_pse+0x26>
    25ca:	9f 5f       	subi	r25, 0xFF	; 255
    25cc:	5f 4f       	sbci	r21, 0xFF	; 255
    25ce:	22 0f       	add	r18, r18
    25d0:	33 1f       	adc	r19, r19
    25d2:	44 1f       	adc	r20, r20
    25d4:	aa 1f       	adc	r26, r26
    25d6:	a9 f3       	breq	.-22     	; 0x25c2 <__divsf3_pse+0x10>
    25d8:	35 d0       	rcall	.+106    	; 0x2644 <__divsf3_pse+0x92>
    25da:	0e 2e       	mov	r0, r30
    25dc:	3a f0       	brmi	.+14     	; 0x25ec <__divsf3_pse+0x3a>
    25de:	e0 e8       	ldi	r30, 0x80	; 128
    25e0:	32 d0       	rcall	.+100    	; 0x2646 <__divsf3_pse+0x94>
    25e2:	91 50       	subi	r25, 0x01	; 1
    25e4:	50 40       	sbci	r21, 0x00	; 0
    25e6:	e6 95       	lsr	r30
    25e8:	00 1c       	adc	r0, r0
    25ea:	ca f7       	brpl	.-14     	; 0x25de <__divsf3_pse+0x2c>
    25ec:	2b d0       	rcall	.+86     	; 0x2644 <__divsf3_pse+0x92>
    25ee:	fe 2f       	mov	r31, r30
    25f0:	29 d0       	rcall	.+82     	; 0x2644 <__divsf3_pse+0x92>
    25f2:	66 0f       	add	r22, r22
    25f4:	77 1f       	adc	r23, r23
    25f6:	88 1f       	adc	r24, r24
    25f8:	bb 1f       	adc	r27, r27
    25fa:	26 17       	cp	r18, r22
    25fc:	37 07       	cpc	r19, r23
    25fe:	48 07       	cpc	r20, r24
    2600:	ab 07       	cpc	r26, r27
    2602:	b0 e8       	ldi	r27, 0x80	; 128
    2604:	09 f0       	breq	.+2      	; 0x2608 <__divsf3_pse+0x56>
    2606:	bb 0b       	sbc	r27, r27
    2608:	80 2d       	mov	r24, r0
    260a:	bf 01       	movw	r22, r30
    260c:	ff 27       	eor	r31, r31
    260e:	93 58       	subi	r25, 0x83	; 131
    2610:	5f 4f       	sbci	r21, 0xFF	; 255
    2612:	3a f0       	brmi	.+14     	; 0x2622 <__divsf3_pse+0x70>
    2614:	9e 3f       	cpi	r25, 0xFE	; 254
    2616:	51 05       	cpc	r21, r1
    2618:	78 f0       	brcs	.+30     	; 0x2638 <__divsf3_pse+0x86>
    261a:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_inf>
    261e:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__fp_szero>
    2622:	5f 3f       	cpi	r21, 0xFF	; 255
    2624:	e4 f3       	brlt	.-8      	; 0x261e <__divsf3_pse+0x6c>
    2626:	98 3e       	cpi	r25, 0xE8	; 232
    2628:	d4 f3       	brlt	.-12     	; 0x261e <__divsf3_pse+0x6c>
    262a:	86 95       	lsr	r24
    262c:	77 95       	ror	r23
    262e:	67 95       	ror	r22
    2630:	b7 95       	ror	r27
    2632:	f7 95       	ror	r31
    2634:	9f 5f       	subi	r25, 0xFF	; 255
    2636:	c9 f7       	brne	.-14     	; 0x262a <__divsf3_pse+0x78>
    2638:	88 0f       	add	r24, r24
    263a:	91 1d       	adc	r25, r1
    263c:	96 95       	lsr	r25
    263e:	87 95       	ror	r24
    2640:	97 f9       	bld	r25, 7
    2642:	08 95       	ret
    2644:	e1 e0       	ldi	r30, 0x01	; 1
    2646:	66 0f       	add	r22, r22
    2648:	77 1f       	adc	r23, r23
    264a:	88 1f       	adc	r24, r24
    264c:	bb 1f       	adc	r27, r27
    264e:	62 17       	cp	r22, r18
    2650:	73 07       	cpc	r23, r19
    2652:	84 07       	cpc	r24, r20
    2654:	ba 07       	cpc	r27, r26
    2656:	20 f0       	brcs	.+8      	; 0x2660 <__divsf3_pse+0xae>
    2658:	62 1b       	sub	r22, r18
    265a:	73 0b       	sbc	r23, r19
    265c:	84 0b       	sbc	r24, r20
    265e:	ba 0b       	sbc	r27, r26
    2660:	ee 1f       	adc	r30, r30
    2662:	88 f7       	brcc	.-30     	; 0x2646 <__divsf3_pse+0x94>
    2664:	e0 95       	com	r30
    2666:	08 95       	ret

00002668 <__fp_inf>:
    2668:	97 f9       	bld	r25, 7
    266a:	9f 67       	ori	r25, 0x7F	; 127
    266c:	80 e8       	ldi	r24, 0x80	; 128
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	08 95       	ret

00002674 <__fp_nan>:
    2674:	9f ef       	ldi	r25, 0xFF	; 255
    2676:	80 ec       	ldi	r24, 0xC0	; 192
    2678:	08 95       	ret

0000267a <__fp_pscA>:
    267a:	00 24       	eor	r0, r0
    267c:	0a 94       	dec	r0
    267e:	16 16       	cp	r1, r22
    2680:	17 06       	cpc	r1, r23
    2682:	18 06       	cpc	r1, r24
    2684:	09 06       	cpc	r0, r25
    2686:	08 95       	ret

00002688 <__fp_pscB>:
    2688:	00 24       	eor	r0, r0
    268a:	0a 94       	dec	r0
    268c:	12 16       	cp	r1, r18
    268e:	13 06       	cpc	r1, r19
    2690:	14 06       	cpc	r1, r20
    2692:	05 06       	cpc	r0, r21
    2694:	08 95       	ret

00002696 <__fp_round>:
    2696:	09 2e       	mov	r0, r25
    2698:	03 94       	inc	r0
    269a:	00 0c       	add	r0, r0
    269c:	11 f4       	brne	.+4      	; 0x26a2 <__fp_round+0xc>
    269e:	88 23       	and	r24, r24
    26a0:	52 f0       	brmi	.+20     	; 0x26b6 <__fp_round+0x20>
    26a2:	bb 0f       	add	r27, r27
    26a4:	40 f4       	brcc	.+16     	; 0x26b6 <__fp_round+0x20>
    26a6:	bf 2b       	or	r27, r31
    26a8:	11 f4       	brne	.+4      	; 0x26ae <__fp_round+0x18>
    26aa:	60 ff       	sbrs	r22, 0
    26ac:	04 c0       	rjmp	.+8      	; 0x26b6 <__fp_round+0x20>
    26ae:	6f 5f       	subi	r22, 0xFF	; 255
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	8f 4f       	sbci	r24, 0xFF	; 255
    26b4:	9f 4f       	sbci	r25, 0xFF	; 255
    26b6:	08 95       	ret

000026b8 <__fp_split3>:
    26b8:	57 fd       	sbrc	r21, 7
    26ba:	90 58       	subi	r25, 0x80	; 128
    26bc:	44 0f       	add	r20, r20
    26be:	55 1f       	adc	r21, r21
    26c0:	59 f0       	breq	.+22     	; 0x26d8 <__fp_splitA+0x10>
    26c2:	5f 3f       	cpi	r21, 0xFF	; 255
    26c4:	71 f0       	breq	.+28     	; 0x26e2 <__fp_splitA+0x1a>
    26c6:	47 95       	ror	r20

000026c8 <__fp_splitA>:
    26c8:	88 0f       	add	r24, r24
    26ca:	97 fb       	bst	r25, 7
    26cc:	99 1f       	adc	r25, r25
    26ce:	61 f0       	breq	.+24     	; 0x26e8 <__fp_splitA+0x20>
    26d0:	9f 3f       	cpi	r25, 0xFF	; 255
    26d2:	79 f0       	breq	.+30     	; 0x26f2 <__fp_splitA+0x2a>
    26d4:	87 95       	ror	r24
    26d6:	08 95       	ret
    26d8:	12 16       	cp	r1, r18
    26da:	13 06       	cpc	r1, r19
    26dc:	14 06       	cpc	r1, r20
    26de:	55 1f       	adc	r21, r21
    26e0:	f2 cf       	rjmp	.-28     	; 0x26c6 <__fp_split3+0xe>
    26e2:	46 95       	lsr	r20
    26e4:	f1 df       	rcall	.-30     	; 0x26c8 <__fp_splitA>
    26e6:	08 c0       	rjmp	.+16     	; 0x26f8 <__fp_splitA+0x30>
    26e8:	16 16       	cp	r1, r22
    26ea:	17 06       	cpc	r1, r23
    26ec:	18 06       	cpc	r1, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	f1 cf       	rjmp	.-30     	; 0x26d4 <__fp_splitA+0xc>
    26f2:	86 95       	lsr	r24
    26f4:	71 05       	cpc	r23, r1
    26f6:	61 05       	cpc	r22, r1
    26f8:	08 94       	sec
    26fa:	08 95       	ret

000026fc <__fp_zero>:
    26fc:	e8 94       	clt

000026fe <__fp_szero>:
    26fe:	bb 27       	eor	r27, r27
    2700:	66 27       	eor	r22, r22
    2702:	77 27       	eor	r23, r23
    2704:	cb 01       	movw	r24, r22
    2706:	97 f9       	bld	r25, 7
    2708:	08 95       	ret

0000270a <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	ec 01       	movw	r28, r24
    2714:	04 2f       	mov	r16, r20
    2716:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2718:	4c 8d       	ldd	r20, Y+28	; 0x1c
    271a:	44 23       	and	r20, r20
    271c:	b9 f1       	breq	.+110    	; 0x278c <prvCopyDataToQueue+0x82>
    271e:	01 11       	cpse	r16, r1
    2720:	16 c0       	rjmp	.+44     	; 0x274e <prvCopyDataToQueue+0x44>
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	8c 81       	ldd	r24, Y+4	; 0x04
    2726:	9d 81       	ldd	r25, Y+5	; 0x05
    2728:	0e 94 31 24 	call	0x4862	; 0x4862 <memcpy>
    272c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    272e:	8c 81       	ldd	r24, Y+4	; 0x04
    2730:	9d 81       	ldd	r25, Y+5	; 0x05
    2732:	82 0f       	add	r24, r18
    2734:	91 1d       	adc	r25, r1
    2736:	9d 83       	std	Y+5, r25	; 0x05
    2738:	8c 83       	std	Y+4, r24	; 0x04
    273a:	2a 81       	ldd	r18, Y+2	; 0x02
    273c:	3b 81       	ldd	r19, Y+3	; 0x03
    273e:	82 17       	cp	r24, r18
    2740:	93 07       	cpc	r25, r19
    2742:	20 f1       	brcs	.+72     	; 0x278c <prvCopyDataToQueue+0x82>
    2744:	88 81       	ld	r24, Y
    2746:	99 81       	ldd	r25, Y+1	; 0x01
    2748:	9d 83       	std	Y+5, r25	; 0x05
    274a:	8c 83       	std	Y+4, r24	; 0x04
    274c:	1f c0       	rjmp	.+62     	; 0x278c <prvCopyDataToQueue+0x82>
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	8e 81       	ldd	r24, Y+6	; 0x06
    2752:	9f 81       	ldd	r25, Y+7	; 0x07
    2754:	0e 94 31 24 	call	0x4862	; 0x4862 <memcpy>
    2758:	8c 8d       	ldd	r24, Y+28	; 0x1c
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	91 95       	neg	r25
    275e:	81 95       	neg	r24
    2760:	91 09       	sbc	r25, r1
    2762:	2e 81       	ldd	r18, Y+6	; 0x06
    2764:	3f 81       	ldd	r19, Y+7	; 0x07
    2766:	28 0f       	add	r18, r24
    2768:	39 1f       	adc	r19, r25
    276a:	3f 83       	std	Y+7, r19	; 0x07
    276c:	2e 83       	std	Y+6, r18	; 0x06
    276e:	48 81       	ld	r20, Y
    2770:	59 81       	ldd	r21, Y+1	; 0x01
    2772:	24 17       	cp	r18, r20
    2774:	35 07       	cpc	r19, r21
    2776:	30 f4       	brcc	.+12     	; 0x2784 <prvCopyDataToQueue+0x7a>
    2778:	2a 81       	ldd	r18, Y+2	; 0x02
    277a:	3b 81       	ldd	r19, Y+3	; 0x03
    277c:	82 0f       	add	r24, r18
    277e:	93 1f       	adc	r25, r19
    2780:	9f 83       	std	Y+7, r25	; 0x07
    2782:	8e 83       	std	Y+6, r24	; 0x06
    2784:	02 30       	cpi	r16, 0x02	; 2
    2786:	11 f4       	brne	.+4      	; 0x278c <prvCopyDataToQueue+0x82>
    2788:	11 11       	cpse	r17, r1
    278a:	11 50       	subi	r17, 0x01	; 1
    278c:	1f 5f       	subi	r17, 0xFF	; 255
    278e:	1a 8f       	std	Y+26, r17	; 0x1a
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	08 95       	ret

0000279c <prvCopyDataFromQueue>:
    279c:	fc 01       	movw	r30, r24
    279e:	44 8d       	ldd	r20, Z+28	; 0x1c
    27a0:	44 23       	and	r20, r20
    27a2:	a9 f0       	breq	.+42     	; 0x27ce <prvCopyDataFromQueue+0x32>
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	26 81       	ldd	r18, Z+6	; 0x06
    27a8:	37 81       	ldd	r19, Z+7	; 0x07
    27aa:	24 0f       	add	r18, r20
    27ac:	35 1f       	adc	r19, r21
    27ae:	37 83       	std	Z+7, r19	; 0x07
    27b0:	26 83       	std	Z+6, r18	; 0x06
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	28 17       	cp	r18, r24
    27b8:	39 07       	cpc	r19, r25
    27ba:	20 f0       	brcs	.+8      	; 0x27c4 <prvCopyDataFromQueue+0x28>
    27bc:	80 81       	ld	r24, Z
    27be:	91 81       	ldd	r25, Z+1	; 0x01
    27c0:	97 83       	std	Z+7, r25	; 0x07
    27c2:	86 83       	std	Z+6, r24	; 0x06
    27c4:	cb 01       	movw	r24, r22
    27c6:	66 81       	ldd	r22, Z+6	; 0x06
    27c8:	77 81       	ldd	r23, Z+7	; 0x07
    27ca:	0e 94 31 24 	call	0x4862	; 0x4862 <memcpy>
    27ce:	08 95       	ret

000027d0 <prvUnlockQueue>:
    27d0:	ef 92       	push	r14
    27d2:	ff 92       	push	r15
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	cf 93       	push	r28
    27da:	8c 01       	movw	r16, r24
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	0f 92       	push	r0
    27e2:	fc 01       	movw	r30, r24
    27e4:	c6 8d       	ldd	r28, Z+30	; 0x1e
    27e6:	1c 16       	cp	r1, r28
    27e8:	ac f4       	brge	.+42     	; 0x2814 <prvUnlockQueue+0x44>
    27ea:	81 89       	ldd	r24, Z+17	; 0x11
    27ec:	81 11       	cpse	r24, r1
    27ee:	06 c0       	rjmp	.+12     	; 0x27fc <prvUnlockQueue+0x2c>
    27f0:	11 c0       	rjmp	.+34     	; 0x2814 <prvUnlockQueue+0x44>
    27f2:	f8 01       	movw	r30, r16
    27f4:	81 89       	ldd	r24, Z+17	; 0x11
    27f6:	81 11       	cpse	r24, r1
    27f8:	05 c0       	rjmp	.+10     	; 0x2804 <prvUnlockQueue+0x34>
    27fa:	0c c0       	rjmp	.+24     	; 0x2814 <prvUnlockQueue+0x44>
    27fc:	78 01       	movw	r14, r16
    27fe:	f1 e1       	ldi	r31, 0x11	; 17
    2800:	ef 0e       	add	r14, r31
    2802:	f1 1c       	adc	r15, r1
    2804:	c7 01       	movw	r24, r14
    2806:	0e 94 42 19 	call	0x3284	; 0x3284 <xTaskRemoveFromEventList>
    280a:	81 11       	cpse	r24, r1
    280c:	0e 94 ce 19 	call	0x339c	; 0x339c <vTaskMissedYield>
    2810:	c1 50       	subi	r28, 0x01	; 1
    2812:	79 f7       	brne	.-34     	; 0x27f2 <prvUnlockQueue+0x22>
    2814:	8f ef       	ldi	r24, 0xFF	; 255
    2816:	f8 01       	movw	r30, r16
    2818:	86 8f       	std	Z+30, r24	; 0x1e
    281a:	0f 90       	pop	r0
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	0f 92       	push	r0
    2824:	c5 8d       	ldd	r28, Z+29	; 0x1d
    2826:	1c 16       	cp	r1, r28
    2828:	ac f4       	brge	.+42     	; 0x2854 <prvUnlockQueue+0x84>
    282a:	80 85       	ldd	r24, Z+8	; 0x08
    282c:	81 11       	cpse	r24, r1
    282e:	06 c0       	rjmp	.+12     	; 0x283c <prvUnlockQueue+0x6c>
    2830:	11 c0       	rjmp	.+34     	; 0x2854 <prvUnlockQueue+0x84>
    2832:	f8 01       	movw	r30, r16
    2834:	80 85       	ldd	r24, Z+8	; 0x08
    2836:	81 11       	cpse	r24, r1
    2838:	05 c0       	rjmp	.+10     	; 0x2844 <prvUnlockQueue+0x74>
    283a:	0c c0       	rjmp	.+24     	; 0x2854 <prvUnlockQueue+0x84>
    283c:	78 01       	movw	r14, r16
    283e:	f8 e0       	ldi	r31, 0x08	; 8
    2840:	ef 0e       	add	r14, r31
    2842:	f1 1c       	adc	r15, r1
    2844:	c7 01       	movw	r24, r14
    2846:	0e 94 42 19 	call	0x3284	; 0x3284 <xTaskRemoveFromEventList>
    284a:	81 11       	cpse	r24, r1
    284c:	0e 94 ce 19 	call	0x339c	; 0x339c <vTaskMissedYield>
    2850:	c1 50       	subi	r28, 0x01	; 1
    2852:	79 f7       	brne	.-34     	; 0x2832 <prvUnlockQueue+0x62>
    2854:	8f ef       	ldi	r24, 0xFF	; 255
    2856:	f8 01       	movw	r30, r16
    2858:	85 8f       	std	Z+29, r24	; 0x1d
    285a:	0f 90       	pop	r0
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	08 95       	ret

0000286a <xQueueGenericSend>:
    286a:	9f 92       	push	r9
    286c:	af 92       	push	r10
    286e:	bf 92       	push	r11
    2870:	cf 92       	push	r12
    2872:	df 92       	push	r13
    2874:	ef 92       	push	r14
    2876:	ff 92       	push	r15
    2878:	0f 93       	push	r16
    287a:	1f 93       	push	r17
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	00 d0       	rcall	.+0      	; 0x2882 <xQueueGenericSend+0x18>
    2882:	00 d0       	rcall	.+0      	; 0x2884 <xQueueGenericSend+0x1a>
    2884:	1f 92       	push	r1
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	8c 01       	movw	r16, r24
    288c:	6b 01       	movw	r12, r22
    288e:	5d 83       	std	Y+5, r21	; 0x05
    2890:	4c 83       	std	Y+4, r20	; 0x04
    2892:	a2 2e       	mov	r10, r18
    2894:	b1 2c       	mov	r11, r1
    2896:	99 24       	eor	r9, r9
    2898:	93 94       	inc	r9
    289a:	7c 01       	movw	r14, r24
    289c:	88 e0       	ldi	r24, 0x08	; 8
    289e:	e8 0e       	add	r14, r24
    28a0:	f1 1c       	adc	r15, r1
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	0f 92       	push	r0
    28a8:	f8 01       	movw	r30, r16
    28aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    28ac:	83 8d       	ldd	r24, Z+27	; 0x1b
    28ae:	98 17       	cp	r25, r24
    28b0:	18 f0       	brcs	.+6      	; 0x28b8 <xQueueGenericSend+0x4e>
    28b2:	f2 e0       	ldi	r31, 0x02	; 2
    28b4:	af 12       	cpse	r10, r31
    28b6:	19 c0       	rjmp	.+50     	; 0x28ea <xQueueGenericSend+0x80>
    28b8:	4a 2d       	mov	r20, r10
    28ba:	b6 01       	movw	r22, r12
    28bc:	c8 01       	movw	r24, r16
    28be:	0e 94 85 13 	call	0x270a	; 0x270a <prvCopyDataToQueue>
    28c2:	f8 01       	movw	r30, r16
    28c4:	91 89       	ldd	r25, Z+17	; 0x11
    28c6:	99 23       	and	r25, r25
    28c8:	49 f0       	breq	.+18     	; 0x28dc <xQueueGenericSend+0x72>
    28ca:	c8 01       	movw	r24, r16
    28cc:	41 96       	adiw	r24, 0x11	; 17
    28ce:	0e 94 42 19 	call	0x3284	; 0x3284 <xTaskRemoveFromEventList>
    28d2:	88 23       	and	r24, r24
    28d4:	31 f0       	breq	.+12     	; 0x28e2 <xQueueGenericSend+0x78>
    28d6:	0e 94 3a 1b 	call	0x3674	; 0x3674 <vPortYield>
    28da:	03 c0       	rjmp	.+6      	; 0x28e2 <xQueueGenericSend+0x78>
    28dc:	81 11       	cpse	r24, r1
    28de:	0e 94 3a 1b 	call	0x3674	; 0x3674 <vPortYield>
    28e2:	0f 90       	pop	r0
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	50 c0       	rjmp	.+160    	; 0x298a <xQueueGenericSend+0x120>
    28ea:	8c 81       	ldd	r24, Y+4	; 0x04
    28ec:	9d 81       	ldd	r25, Y+5	; 0x05
    28ee:	89 2b       	or	r24, r25
    28f0:	21 f4       	brne	.+8      	; 0x28fa <xQueueGenericSend+0x90>
    28f2:	0f 90       	pop	r0
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	48 c0       	rjmp	.+144    	; 0x298a <xQueueGenericSend+0x120>
    28fa:	b1 10       	cpse	r11, r1
    28fc:	05 c0       	rjmp	.+10     	; 0x2908 <xQueueGenericSend+0x9e>
    28fe:	ce 01       	movw	r24, r28
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	0e 94 8a 19 	call	0x3314	; 0x3314 <vTaskSetTimeOutState>
    2906:	b9 2c       	mov	r11, r9
    2908:	0f 90       	pop	r0
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <vTaskSuspendAll>
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	0f 92       	push	r0
    2916:	f8 01       	movw	r30, r16
    2918:	85 8d       	ldd	r24, Z+29	; 0x1d
    291a:	8f 3f       	cpi	r24, 0xFF	; 255
    291c:	09 f4       	brne	.+2      	; 0x2920 <xQueueGenericSend+0xb6>
    291e:	15 8e       	std	Z+29, r1	; 0x1d
    2920:	f8 01       	movw	r30, r16
    2922:	86 8d       	ldd	r24, Z+30	; 0x1e
    2924:	8f 3f       	cpi	r24, 0xFF	; 255
    2926:	09 f4       	brne	.+2      	; 0x292a <xQueueGenericSend+0xc0>
    2928:	16 8e       	std	Z+30, r1	; 0x1e
    292a:	0f 90       	pop	r0
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	be 01       	movw	r22, r28
    2930:	6c 5f       	subi	r22, 0xFC	; 252
    2932:	7f 4f       	sbci	r23, 0xFF	; 255
    2934:	ce 01       	movw	r24, r28
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	0e 94 95 19 	call	0x332a	; 0x332a <xTaskCheckForTimeOut>
    293c:	81 11       	cpse	r24, r1
    293e:	1f c0       	rjmp	.+62     	; 0x297e <xQueueGenericSend+0x114>
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	0f 92       	push	r0
    2946:	f8 01       	movw	r30, r16
    2948:	92 8d       	ldd	r25, Z+26	; 0x1a
    294a:	0f 90       	pop	r0
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2950:	98 13       	cpse	r25, r24
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <xQueueGenericSend+0x108>
    2954:	6c 81       	ldd	r22, Y+4	; 0x04
    2956:	7d 81       	ldd	r23, Y+5	; 0x05
    2958:	c7 01       	movw	r24, r14
    295a:	0e 94 30 19 	call	0x3260	; 0x3260 <vTaskPlaceOnEventList>
    295e:	c8 01       	movw	r24, r16
    2960:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <prvUnlockQueue>
    2964:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <xTaskResumeAll>
    2968:	81 11       	cpse	r24, r1
    296a:	9b cf       	rjmp	.-202    	; 0x28a2 <xQueueGenericSend+0x38>
    296c:	0e 94 3a 1b 	call	0x3674	; 0x3674 <vPortYield>
    2970:	98 cf       	rjmp	.-208    	; 0x28a2 <xQueueGenericSend+0x38>
    2972:	c8 01       	movw	r24, r16
    2974:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <prvUnlockQueue>
    2978:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <xTaskResumeAll>
    297c:	92 cf       	rjmp	.-220    	; 0x28a2 <xQueueGenericSend+0x38>
    297e:	c8 01       	movw	r24, r16
    2980:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <prvUnlockQueue>
    2984:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <xTaskResumeAll>
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	ff 90       	pop	r15
    299e:	ef 90       	pop	r14
    29a0:	df 90       	pop	r13
    29a2:	cf 90       	pop	r12
    29a4:	bf 90       	pop	r11
    29a6:	af 90       	pop	r10
    29a8:	9f 90       	pop	r9
    29aa:	08 95       	ret

000029ac <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    29ac:	8f 92       	push	r8
    29ae:	9f 92       	push	r9
    29b0:	af 92       	push	r10
    29b2:	bf 92       	push	r11
    29b4:	cf 92       	push	r12
    29b6:	df 92       	push	r13
    29b8:	ef 92       	push	r14
    29ba:	ff 92       	push	r15
    29bc:	0f 93       	push	r16
    29be:	1f 93       	push	r17
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <xQueueGenericReceive+0x1a>
    29c6:	00 d0       	rcall	.+0      	; 0x29c8 <xQueueGenericReceive+0x1c>
    29c8:	1f 92       	push	r1
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	8c 01       	movw	r16, r24
    29d0:	5b 01       	movw	r10, r22
    29d2:	5d 83       	std	Y+5, r21	; 0x05
    29d4:	4c 83       	std	Y+4, r20	; 0x04
    29d6:	82 2e       	mov	r8, r18
BaseType_t xEntryTimeSet = pdFALSE;
    29d8:	e1 2c       	mov	r14, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    29da:	99 24       	eor	r9, r9
    29dc:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    29de:	6c 01       	movw	r12, r24
    29e0:	81 e1       	ldi	r24, 0x11	; 17
    29e2:	c8 0e       	add	r12, r24
    29e4:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    29ec:	f8 01       	movw	r30, r16
    29ee:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    29f0:	ff 20       	and	r15, r15
    29f2:	41 f1       	breq	.+80     	; 0x2a44 <xQueueGenericReceive+0x98>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    29f4:	c6 80       	ldd	r12, Z+6	; 0x06
    29f6:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    29f8:	b5 01       	movw	r22, r10
    29fa:	c8 01       	movw	r24, r16
    29fc:	0e 94 ce 13 	call	0x279c	; 0x279c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2a00:	81 10       	cpse	r8, r1
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    2a04:	fa 94       	dec	r15
    2a06:	f8 01       	movw	r30, r16
    2a08:	f2 8e       	std	Z+26, r15	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2a0a:	80 85       	ldd	r24, Z+8	; 0x08
    2a0c:	88 23       	and	r24, r24
    2a0e:	b1 f0       	breq	.+44     	; 0x2a3c <xQueueGenericReceive+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2a10:	c8 01       	movw	r24, r16
    2a12:	08 96       	adiw	r24, 0x08	; 8
    2a14:	0e 94 42 19 	call	0x3284	; 0x3284 <xTaskRemoveFromEventList>
    2a18:	88 23       	and	r24, r24
    2a1a:	81 f0       	breq	.+32     	; 0x2a3c <xQueueGenericReceive+0x90>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2a1c:	0e 94 3a 1b 	call	0x3674	; 0x3674 <vPortYield>
    2a20:	0d c0       	rjmp	.+26     	; 0x2a3c <xQueueGenericReceive+0x90>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2a22:	f8 01       	movw	r30, r16
    2a24:	d7 82       	std	Z+7, r13	; 0x07
    2a26:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2a28:	81 89       	ldd	r24, Z+17	; 0x11
    2a2a:	88 23       	and	r24, r24
    2a2c:	39 f0       	breq	.+14     	; 0x2a3c <xQueueGenericReceive+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2a2e:	c8 01       	movw	r24, r16
    2a30:	41 96       	adiw	r24, 0x11	; 17
    2a32:	0e 94 42 19 	call	0x3284	; 0x3284 <xTaskRemoveFromEventList>
    2a36:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2a38:	0e 94 3a 1b 	call	0x3674	; 0x3674 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    2a3c:	0f 90       	pop	r0
    2a3e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	57 c0       	rjmp	.+174    	; 0x2af2 <xQueueGenericReceive+0x146>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2a44:	8c 81       	ldd	r24, Y+4	; 0x04
    2a46:	9d 81       	ldd	r25, Y+5	; 0x05
    2a48:	89 2b       	or	r24, r25
    2a4a:	21 f4       	brne	.+8      	; 0x2a54 <xQueueGenericReceive+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2a4c:	0f 90       	pop	r0
    2a4e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	4f c0       	rjmp	.+158    	; 0x2af2 <xQueueGenericReceive+0x146>
				}
				else if( xEntryTimeSet == pdFALSE )
    2a54:	e1 10       	cpse	r14, r1
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <xQueueGenericReceive+0xb6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2a58:	ce 01       	movw	r24, r28
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	0e 94 8a 19 	call	0x3314	; 0x3314 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2a60:	e9 2c       	mov	r14, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2a62:	0f 90       	pop	r0
    2a64:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2a66:	0e 94 39 17 	call	0x2e72	; 0x2e72 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	0f 92       	push	r0
    2a70:	f8 01       	movw	r30, r16
    2a72:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a74:	8f 3f       	cpi	r24, 0xFF	; 255
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <xQueueGenericReceive+0xce>
    2a78:	15 8e       	std	Z+29, r1	; 0x1d
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a7e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <xQueueGenericReceive+0xd8>
    2a82:	16 8e       	std	Z+30, r1	; 0x1e
    2a84:	0f 90       	pop	r0
    2a86:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2a88:	be 01       	movw	r22, r28
    2a8a:	6c 5f       	subi	r22, 0xFC	; 252
    2a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8e:	ce 01       	movw	r24, r28
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	0e 94 95 19 	call	0x332a	; 0x332a <xTaskCheckForTimeOut>
    2a96:	81 11       	cpse	r24, r1
    2a98:	1e c0       	rjmp	.+60     	; 0x2ad6 <xQueueGenericReceive+0x12a>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2aa4:	0f 90       	pop	r0
    2aa6:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2aa8:	81 11       	cpse	r24, r1
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <xQueueGenericReceive+0x11e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2aac:	6c 81       	ldd	r22, Y+4	; 0x04
    2aae:	7d 81       	ldd	r23, Y+5	; 0x05
    2ab0:	c6 01       	movw	r24, r12
    2ab2:	0e 94 30 19 	call	0x3260	; 0x3260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2abc:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <xTaskResumeAll>
    2ac0:	81 11       	cpse	r24, r1
    2ac2:	91 cf       	rjmp	.-222    	; 0x29e6 <xQueueGenericReceive+0x3a>
				{
					portYIELD_WITHIN_API();
    2ac4:	0e 94 3a 1b 	call	0x3674	; 0x3674 <vPortYield>
    2ac8:	8e cf       	rjmp	.-228    	; 0x29e6 <xQueueGenericReceive+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2aca:	c8 01       	movw	r24, r16
    2acc:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2ad0:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <xTaskResumeAll>
    2ad4:	88 cf       	rjmp	.-240    	; 0x29e6 <xQueueGenericReceive+0x3a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2ad6:	c8 01       	movw	r24, r16
    2ad8:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2adc:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2aea:	0f 90       	pop	r0
    2aec:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2aee:	81 11       	cpse	r24, r1
    2af0:	7a cf       	rjmp	.-268    	; 0x29e6 <xQueueGenericReceive+0x3a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	1f 91       	pop	r17
    2b02:	0f 91       	pop	r16
    2b04:	ff 90       	pop	r15
    2b06:	ef 90       	pop	r14
    2b08:	df 90       	pop	r13
    2b0a:	cf 90       	pop	r12
    2b0c:	bf 90       	pop	r11
    2b0e:	af 90       	pop	r10
    2b10:	9f 90       	pop	r9
    2b12:	8f 90       	pop	r8
    2b14:	08 95       	ret

00002b16 <prvResetNextTaskUnblockTime>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    2b16:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <pxDelayedTaskList>
    2b1a:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <pxDelayedTaskList+0x1>
    2b1e:	80 81       	ld	r24, Z
    2b20:	81 11       	cpse	r24, r1
    2b22:	07 c0       	rjmp	.+14     	; 0x2b32 <prvResetNextTaskUnblockTime+0x1c>
    2b24:	8f ef       	ldi	r24, 0xFF	; 255
    2b26:	9f ef       	ldi	r25, 0xFF	; 255
    2b28:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <xNextTaskUnblockTime+0x1>
    2b2c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <xNextTaskUnblockTime>
    2b30:	08 95       	ret
    2b32:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <pxDelayedTaskList>
    2b36:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <pxDelayedTaskList+0x1>
    2b3a:	05 80       	ldd	r0, Z+5	; 0x05
    2b3c:	f6 81       	ldd	r31, Z+6	; 0x06
    2b3e:	e0 2d       	mov	r30, r0
    2b40:	06 80       	ldd	r0, Z+6	; 0x06
    2b42:	f7 81       	ldd	r31, Z+7	; 0x07
    2b44:	e0 2d       	mov	r30, r0
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <xNextTaskUnblockTime+0x1>
    2b4e:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <xNextTaskUnblockTime>
    2b52:	08 95       	ret

00002b54 <prvAddCurrentTaskToDelayedList>:
    2b54:	ff 92       	push	r15
    2b56:	0f 93       	push	r16
    2b58:	1f 93       	push	r17
    2b5a:	cf 93       	push	r28
    2b5c:	df 93       	push	r29
    2b5e:	ec 01       	movw	r28, r24
    2b60:	f6 2e       	mov	r15, r22
    2b62:	00 91 33 02 	lds	r16, 0x0233	; 0x800233 <xTickCount>
    2b66:	10 91 34 02 	lds	r17, 0x0234	; 0x800234 <xTickCount+0x1>
    2b6a:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <pxCurrentTCB>
    2b6e:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    2b72:	02 96       	adiw	r24, 0x02	; 2
    2b74:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <uxListRemove>
    2b78:	cf 3f       	cpi	r28, 0xFF	; 255
    2b7a:	8f ef       	ldi	r24, 0xFF	; 255
    2b7c:	d8 07       	cpc	r29, r24
    2b7e:	69 f4       	brne	.+26     	; 0x2b9a <prvAddCurrentTaskToDelayedList+0x46>
    2b80:	ff 20       	and	r15, r15
    2b82:	59 f0       	breq	.+22     	; 0x2b9a <prvAddCurrentTaskToDelayedList+0x46>
    2b84:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <pxCurrentTCB>
    2b88:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    2b8c:	6e 5f       	subi	r22, 0xFE	; 254
    2b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b90:	86 e3       	ldi	r24, 0x36	; 54
    2b92:	92 e0       	ldi	r25, 0x02	; 2
    2b94:	0e 94 1a 1a 	call	0x3434	; 0x3434 <vListInsertEnd>
    2b98:	2f c0       	rjmp	.+94     	; 0x2bf8 <prvAddCurrentTaskToDelayedList+0xa4>
    2b9a:	c0 0f       	add	r28, r16
    2b9c:	d1 1f       	adc	r29, r17
    2b9e:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <pxCurrentTCB>
    2ba2:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    2ba6:	d3 83       	std	Z+3, r29	; 0x03
    2ba8:	c2 83       	std	Z+2, r28	; 0x02
    2baa:	c0 17       	cp	r28, r16
    2bac:	d1 07       	cpc	r29, r17
    2bae:	68 f4       	brcc	.+26     	; 0x2bca <prvAddCurrentTaskToDelayedList+0x76>
    2bb0:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <pxCurrentTCB>
    2bb4:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    2bb8:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <pxOverflowDelayedTaskList>
    2bbc:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <pxOverflowDelayedTaskList+0x1>
    2bc0:	6e 5f       	subi	r22, 0xFE	; 254
    2bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc4:	0e 94 3b 1a 	call	0x3476	; 0x3476 <vListInsert>
    2bc8:	17 c0       	rjmp	.+46     	; 0x2bf8 <prvAddCurrentTaskToDelayedList+0xa4>
    2bca:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <pxCurrentTCB>
    2bce:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    2bd2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <pxDelayedTaskList>
    2bd6:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <pxDelayedTaskList+0x1>
    2bda:	6e 5f       	subi	r22, 0xFE	; 254
    2bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bde:	0e 94 3b 1a 	call	0x3476	; 0x3476 <vListInsert>
    2be2:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <xNextTaskUnblockTime>
    2be6:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <xNextTaskUnblockTime+0x1>
    2bea:	c8 17       	cp	r28, r24
    2bec:	d9 07       	cpc	r29, r25
    2bee:	20 f4       	brcc	.+8      	; 0x2bf8 <prvAddCurrentTaskToDelayedList+0xa4>
    2bf0:	d0 93 2c 02 	sts	0x022C, r29	; 0x80022c <xNextTaskUnblockTime+0x1>
    2bf4:	c0 93 2b 02 	sts	0x022B, r28	; 0x80022b <xNextTaskUnblockTime>
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	1f 91       	pop	r17
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	08 95       	ret

00002c04 <xTaskCreate>:
    2c04:	4f 92       	push	r4
    2c06:	5f 92       	push	r5
    2c08:	6f 92       	push	r6
    2c0a:	7f 92       	push	r7
    2c0c:	8f 92       	push	r8
    2c0e:	9f 92       	push	r9
    2c10:	af 92       	push	r10
    2c12:	bf 92       	push	r11
    2c14:	cf 92       	push	r12
    2c16:	df 92       	push	r13
    2c18:	ef 92       	push	r14
    2c1a:	ff 92       	push	r15
    2c1c:	0f 93       	push	r16
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	4c 01       	movw	r8, r24
    2c24:	6b 01       	movw	r12, r22
    2c26:	5a 01       	movw	r10, r20
    2c28:	29 01       	movw	r4, r18
    2c2a:	ca 01       	movw	r24, r20
    2c2c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <pvPortMalloc>
    2c30:	3c 01       	movw	r6, r24
    2c32:	89 2b       	or	r24, r25
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <xTaskCreate+0x34>
    2c36:	e2 c0       	rjmp	.+452    	; 0x2dfc <xTaskCreate+0x1f8>
    2c38:	86 e2       	ldi	r24, 0x26	; 38
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <pvPortMalloc>
    2c40:	ec 01       	movw	r28, r24
    2c42:	89 2b       	or	r24, r25
    2c44:	71 f0       	breq	.+28     	; 0x2c62 <xTaskCreate+0x5e>
    2c46:	78 8e       	std	Y+24, r7	; 0x18
    2c48:	6f 8a       	std	Y+23, r6	; 0x17
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	a8 1a       	sub	r10, r24
    2c4e:	b1 08       	sbc	r11, r1
    2c50:	a6 0c       	add	r10, r6
    2c52:	b7 1c       	adc	r11, r7
    2c54:	d6 01       	movw	r26, r12
    2c56:	8c 91       	ld	r24, X
    2c58:	89 8f       	std	Y+25, r24	; 0x19
    2c5a:	8c 91       	ld	r24, X
    2c5c:	81 11       	cpse	r24, r1
    2c5e:	05 c0       	rjmp	.+10     	; 0x2c6a <xTaskCreate+0x66>
    2c60:	18 c0       	rjmp	.+48     	; 0x2c92 <xTaskCreate+0x8e>
    2c62:	c3 01       	movw	r24, r6
    2c64:	0e 94 07 1a 	call	0x340e	; 0x340e <vPortFree>
    2c68:	c9 c0       	rjmp	.+402    	; 0x2dfc <xTaskCreate+0x1f8>
    2c6a:	ae 01       	movw	r20, r28
    2c6c:	46 5e       	subi	r20, 0xE6	; 230
    2c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c70:	f6 01       	movw	r30, r12
    2c72:	31 96       	adiw	r30, 0x01	; 1
    2c74:	b8 e0       	ldi	r27, 0x08	; 8
    2c76:	cb 0e       	add	r12, r27
    2c78:	d1 1c       	adc	r13, r1
    2c7a:	cf 01       	movw	r24, r30
    2c7c:	21 91       	ld	r18, Z+
    2c7e:	da 01       	movw	r26, r20
    2c80:	2d 93       	st	X+, r18
    2c82:	ad 01       	movw	r20, r26
    2c84:	dc 01       	movw	r26, r24
    2c86:	8c 91       	ld	r24, X
    2c88:	88 23       	and	r24, r24
    2c8a:	19 f0       	breq	.+6      	; 0x2c92 <xTaskCreate+0x8e>
    2c8c:	ec 15       	cp	r30, r12
    2c8e:	fd 05       	cpc	r31, r13
    2c90:	a1 f7       	brne	.-24     	; 0x2c7a <xTaskCreate+0x76>
    2c92:	18 a2       	std	Y+32, r1	; 0x20
    2c94:	04 30       	cpi	r16, 0x04	; 4
    2c96:	08 f0       	brcs	.+2      	; 0x2c9a <xTaskCreate+0x96>
    2c98:	03 e0       	ldi	r16, 0x03	; 3
    2c9a:	0e 8b       	std	Y+22, r16	; 0x16
    2c9c:	6e 01       	movw	r12, r28
    2c9e:	b2 e0       	ldi	r27, 0x02	; 2
    2ca0:	cb 0e       	add	r12, r27
    2ca2:	d1 1c       	adc	r13, r1
    2ca4:	c6 01       	movw	r24, r12
    2ca6:	0e 94 16 1a 	call	0x342c	; 0x342c <vListInitialiseItem>
    2caa:	ce 01       	movw	r24, r28
    2cac:	0c 96       	adiw	r24, 0x0c	; 12
    2cae:	0e 94 16 1a 	call	0x342c	; 0x342c <vListInitialiseItem>
    2cb2:	d9 87       	std	Y+9, r29	; 0x09
    2cb4:	c8 87       	std	Y+8, r28	; 0x08
    2cb6:	84 e0       	ldi	r24, 0x04	; 4
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	80 1b       	sub	r24, r16
    2cbc:	91 09       	sbc	r25, r1
    2cbe:	9d 87       	std	Y+13, r25	; 0x0d
    2cc0:	8c 87       	std	Y+12, r24	; 0x0c
    2cc2:	db 8b       	std	Y+19, r29	; 0x13
    2cc4:	ca 8b       	std	Y+18, r28	; 0x12
    2cc6:	19 a2       	std	Y+33, r1	; 0x21
    2cc8:	1a a2       	std	Y+34, r1	; 0x22
    2cca:	1b a2       	std	Y+35, r1	; 0x23
    2ccc:	1c a2       	std	Y+36, r1	; 0x24
    2cce:	1d a2       	std	Y+37, r1	; 0x25
    2cd0:	a2 01       	movw	r20, r4
    2cd2:	b4 01       	movw	r22, r8
    2cd4:	c5 01       	movw	r24, r10
    2cd6:	0e 94 92 1a 	call	0x3524	; 0x3524 <pxPortInitialiseStack>
    2cda:	99 83       	std	Y+1, r25	; 0x01
    2cdc:	88 83       	st	Y, r24
    2cde:	e1 14       	cp	r14, r1
    2ce0:	f1 04       	cpc	r15, r1
    2ce2:	19 f0       	breq	.+6      	; 0x2cea <xTaskCreate+0xe6>
    2ce4:	f7 01       	movw	r30, r14
    2ce6:	d1 83       	std	Z+1, r29	; 0x01
    2ce8:	c0 83       	st	Z, r28
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	0f 92       	push	r0
    2cf0:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <uxCurrentNumberOfTasks>
    2cf4:	8f 5f       	subi	r24, 0xFF	; 255
    2cf6:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <uxCurrentNumberOfTasks>
    2cfa:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <pxCurrentTCB>
    2cfe:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    2d02:	89 2b       	or	r24, r25
    2d04:	d1 f5       	brne	.+116    	; 0x2d7a <xTaskCreate+0x176>
    2d06:	d0 93 8d 02 	sts	0x028D, r29	; 0x80028d <pxCurrentTCB+0x1>
    2d0a:	c0 93 8c 02 	sts	0x028C, r28	; 0x80028c <pxCurrentTCB>
    2d0e:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <uxCurrentNumberOfTasks>
    2d12:	81 30       	cpi	r24, 0x01	; 1
    2d14:	09 f0       	breq	.+2      	; 0x2d18 <xTaskCreate+0x114>
    2d16:	41 c0       	rjmp	.+130    	; 0x2d9a <xTaskCreate+0x196>
    2d18:	88 e6       	ldi	r24, 0x68	; 104
    2d1a:	92 e0       	ldi	r25, 0x02	; 2
    2d1c:	0e 94 08 1a 	call	0x3410	; 0x3410 <vListInitialise>
    2d20:	81 e7       	ldi	r24, 0x71	; 113
    2d22:	92 e0       	ldi	r25, 0x02	; 2
    2d24:	0e 94 08 1a 	call	0x3410	; 0x3410 <vListInitialise>
    2d28:	8a e7       	ldi	r24, 0x7A	; 122
    2d2a:	92 e0       	ldi	r25, 0x02	; 2
    2d2c:	0e 94 08 1a 	call	0x3410	; 0x3410 <vListInitialise>
    2d30:	83 e8       	ldi	r24, 0x83	; 131
    2d32:	92 e0       	ldi	r25, 0x02	; 2
    2d34:	0e 94 08 1a 	call	0x3410	; 0x3410 <vListInitialise>
    2d38:	8f e5       	ldi	r24, 0x5F	; 95
    2d3a:	92 e0       	ldi	r25, 0x02	; 2
    2d3c:	0e 94 08 1a 	call	0x3410	; 0x3410 <vListInitialise>
    2d40:	86 e5       	ldi	r24, 0x56	; 86
    2d42:	92 e0       	ldi	r25, 0x02	; 2
    2d44:	0e 94 08 1a 	call	0x3410	; 0x3410 <vListInitialise>
    2d48:	89 e4       	ldi	r24, 0x49	; 73
    2d4a:	92 e0       	ldi	r25, 0x02	; 2
    2d4c:	0e 94 08 1a 	call	0x3410	; 0x3410 <vListInitialise>
    2d50:	80 e4       	ldi	r24, 0x40	; 64
    2d52:	92 e0       	ldi	r25, 0x02	; 2
    2d54:	0e 94 08 1a 	call	0x3410	; 0x3410 <vListInitialise>
    2d58:	86 e3       	ldi	r24, 0x36	; 54
    2d5a:	92 e0       	ldi	r25, 0x02	; 2
    2d5c:	0e 94 08 1a 	call	0x3410	; 0x3410 <vListInitialise>
    2d60:	8f e5       	ldi	r24, 0x5F	; 95
    2d62:	92 e0       	ldi	r25, 0x02	; 2
    2d64:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <pxDelayedTaskList+0x1>
    2d68:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <pxDelayedTaskList>
    2d6c:	86 e5       	ldi	r24, 0x56	; 86
    2d6e:	92 e0       	ldi	r25, 0x02	; 2
    2d70:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <pxOverflowDelayedTaskList+0x1>
    2d74:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <pxOverflowDelayedTaskList>
    2d78:	10 c0       	rjmp	.+32     	; 0x2d9a <xTaskCreate+0x196>
    2d7a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <xSchedulerRunning>
    2d7e:	81 11       	cpse	r24, r1
    2d80:	0c c0       	rjmp	.+24     	; 0x2d9a <xTaskCreate+0x196>
    2d82:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <pxCurrentTCB>
    2d86:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    2d8a:	96 89       	ldd	r25, Z+22	; 0x16
    2d8c:	8e 89       	ldd	r24, Y+22	; 0x16
    2d8e:	89 17       	cp	r24, r25
    2d90:	20 f0       	brcs	.+8      	; 0x2d9a <xTaskCreate+0x196>
    2d92:	d0 93 8d 02 	sts	0x028D, r29	; 0x80028d <pxCurrentTCB+0x1>
    2d96:	c0 93 8c 02 	sts	0x028C, r28	; 0x80028c <pxCurrentTCB>
    2d9a:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <uxTaskNumber>
    2d9e:	8f 5f       	subi	r24, 0xFF	; 255
    2da0:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <uxTaskNumber>
    2da4:	8e 89       	ldd	r24, Y+22	; 0x16
    2da6:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <uxTopReadyPriority>
    2daa:	98 17       	cp	r25, r24
    2dac:	10 f4       	brcc	.+4      	; 0x2db2 <xTaskCreate+0x1ae>
    2dae:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <uxTopReadyPriority>
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9c 01       	movw	r18, r24
    2db6:	22 0f       	add	r18, r18
    2db8:	33 1f       	adc	r19, r19
    2dba:	22 0f       	add	r18, r18
    2dbc:	33 1f       	adc	r19, r19
    2dbe:	22 0f       	add	r18, r18
    2dc0:	33 1f       	adc	r19, r19
    2dc2:	82 0f       	add	r24, r18
    2dc4:	93 1f       	adc	r25, r19
    2dc6:	b6 01       	movw	r22, r12
    2dc8:	88 59       	subi	r24, 0x98	; 152
    2dca:	9d 4f       	sbci	r25, 0xFD	; 253
    2dcc:	0e 94 1a 1a 	call	0x3434	; 0x3434 <vListInsertEnd>
    2dd0:	0f 90       	pop	r0
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <xSchedulerRunning>
    2dd8:	88 23       	and	r24, r24
    2dda:	61 f0       	breq	.+24     	; 0x2df4 <xTaskCreate+0x1f0>
    2ddc:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <pxCurrentTCB>
    2de0:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    2de4:	96 89       	ldd	r25, Z+22	; 0x16
    2de6:	8e 89       	ldd	r24, Y+22	; 0x16
    2de8:	98 17       	cp	r25, r24
    2dea:	30 f4       	brcc	.+12     	; 0x2df8 <xTaskCreate+0x1f4>
    2dec:	0e 94 3a 1b 	call	0x3674	; 0x3674 <vPortYield>
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	05 c0       	rjmp	.+10     	; 0x2dfe <xTaskCreate+0x1fa>
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	03 c0       	rjmp	.+6      	; 0x2dfe <xTaskCreate+0x1fa>
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	01 c0       	rjmp	.+2      	; 0x2dfe <xTaskCreate+0x1fa>
    2dfc:	8f ef       	ldi	r24, 0xFF	; 255
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	0f 91       	pop	r16
    2e04:	ff 90       	pop	r15
    2e06:	ef 90       	pop	r14
    2e08:	df 90       	pop	r13
    2e0a:	cf 90       	pop	r12
    2e0c:	bf 90       	pop	r11
    2e0e:	af 90       	pop	r10
    2e10:	9f 90       	pop	r9
    2e12:	8f 90       	pop	r8
    2e14:	7f 90       	pop	r7
    2e16:	6f 90       	pop	r6
    2e18:	5f 90       	pop	r5
    2e1a:	4f 90       	pop	r4
    2e1c:	08 95       	ret

00002e1e <vTaskStartScheduler>:
    2e1e:	ef 92       	push	r14
    2e20:	ff 92       	push	r15
    2e22:	0f 93       	push	r16
    2e24:	0f 2e       	mov	r0, r31
    2e26:	f9 e2       	ldi	r31, 0x29	; 41
    2e28:	ef 2e       	mov	r14, r31
    2e2a:	f2 e0       	ldi	r31, 0x02	; 2
    2e2c:	ff 2e       	mov	r15, r31
    2e2e:	f0 2d       	mov	r31, r0
    2e30:	00 e0       	ldi	r16, 0x00	; 0
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	45 e5       	ldi	r20, 0x55	; 85
    2e38:	50 e0       	ldi	r21, 0x00	; 0
    2e3a:	65 ea       	ldi	r22, 0xA5	; 165
    2e3c:	71 e0       	ldi	r23, 0x01	; 1
    2e3e:	8d e8       	ldi	r24, 0x8D	; 141
    2e40:	98 e1       	ldi	r25, 0x18	; 24
    2e42:	0e 94 02 16 	call	0x2c04	; 0x2c04 <xTaskCreate>
    2e46:	81 30       	cpi	r24, 0x01	; 1
    2e48:	81 f4       	brne	.+32     	; 0x2e6a <vTaskStartScheduler+0x4c>
    2e4a:	f8 94       	cli
    2e4c:	8f ef       	ldi	r24, 0xFF	; 255
    2e4e:	9f ef       	ldi	r25, 0xFF	; 255
    2e50:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <xNextTaskUnblockTime+0x1>
    2e54:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <xNextTaskUnblockTime>
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <xSchedulerRunning>
    2e5e:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <xTickCount+0x1>
    2e62:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <xTickCount>
    2e66:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <xPortStartScheduler>
    2e6a:	0f 91       	pop	r16
    2e6c:	ff 90       	pop	r15
    2e6e:	ef 90       	pop	r14
    2e70:	08 95       	ret

00002e72 <vTaskSuspendAll>:
    2e72:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <uxSchedulerSuspended>
    2e76:	8f 5f       	subi	r24, 0xFF	; 255
    2e78:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <uxSchedulerSuspended>
    2e7c:	08 95       	ret

00002e7e <xTaskIncrementTick>:
    2e7e:	cf 92       	push	r12
    2e80:	df 92       	push	r13
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <uxSchedulerSuspended>
    2e92:	81 11       	cpse	r24, r1
    2e94:	99 c0       	rjmp	.+306    	; 0x2fc8 <xTaskIncrementTick+0x14a>
    2e96:	e0 90 33 02 	lds	r14, 0x0233	; 0x800233 <xTickCount>
    2e9a:	f0 90 34 02 	lds	r15, 0x0234	; 0x800234 <xTickCount+0x1>
    2e9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ea0:	e8 1a       	sub	r14, r24
    2ea2:	f8 0a       	sbc	r15, r24
    2ea4:	f0 92 34 02 	sts	0x0234, r15	; 0x800234 <xTickCount+0x1>
    2ea8:	e0 92 33 02 	sts	0x0233, r14	; 0x800233 <xTickCount>
    2eac:	e1 14       	cp	r14, r1
    2eae:	f1 04       	cpc	r15, r1
    2eb0:	b9 f4       	brne	.+46     	; 0x2ee0 <xTaskIncrementTick+0x62>
    2eb2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <pxDelayedTaskList>
    2eb6:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <pxDelayedTaskList+0x1>
    2eba:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <pxOverflowDelayedTaskList>
    2ebe:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <pxOverflowDelayedTaskList+0x1>
    2ec2:	30 93 55 02 	sts	0x0255, r19	; 0x800255 <pxDelayedTaskList+0x1>
    2ec6:	20 93 54 02 	sts	0x0254, r18	; 0x800254 <pxDelayedTaskList>
    2eca:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <pxOverflowDelayedTaskList+0x1>
    2ece:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <pxOverflowDelayedTaskList>
    2ed2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <xNumOfOverflows>
    2ed6:	8f 5f       	subi	r24, 0xFF	; 255
    2ed8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <xNumOfOverflows>
    2edc:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <prvResetNextTaskUnblockTime>
    2ee0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <xNextTaskUnblockTime>
    2ee4:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <xNextTaskUnblockTime+0x1>
    2ee8:	e8 16       	cp	r14, r24
    2eea:	f9 06       	cpc	r15, r25
    2eec:	10 f4       	brcc	.+4      	; 0x2ef2 <xTaskIncrementTick+0x74>
    2eee:	d1 2c       	mov	r13, r1
    2ef0:	53 c0       	rjmp	.+166    	; 0x2f98 <xTaskIncrementTick+0x11a>
    2ef2:	d1 2c       	mov	r13, r1
    2ef4:	cc 24       	eor	r12, r12
    2ef6:	c3 94       	inc	r12
    2ef8:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <pxDelayedTaskList>
    2efc:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <pxDelayedTaskList+0x1>
    2f00:	80 81       	ld	r24, Z
    2f02:	81 11       	cpse	r24, r1
    2f04:	07 c0       	rjmp	.+14     	; 0x2f14 <xTaskIncrementTick+0x96>
    2f06:	8f ef       	ldi	r24, 0xFF	; 255
    2f08:	9f ef       	ldi	r25, 0xFF	; 255
    2f0a:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <xNextTaskUnblockTime+0x1>
    2f0e:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <xNextTaskUnblockTime>
    2f12:	42 c0       	rjmp	.+132    	; 0x2f98 <xTaskIncrementTick+0x11a>
    2f14:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <pxDelayedTaskList>
    2f18:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <pxDelayedTaskList+0x1>
    2f1c:	05 80       	ldd	r0, Z+5	; 0x05
    2f1e:	f6 81       	ldd	r31, Z+6	; 0x06
    2f20:	e0 2d       	mov	r30, r0
    2f22:	c6 81       	ldd	r28, Z+6	; 0x06
    2f24:	d7 81       	ldd	r29, Z+7	; 0x07
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2a:	e8 16       	cp	r14, r24
    2f2c:	f9 06       	cpc	r15, r25
    2f2e:	28 f4       	brcc	.+10     	; 0x2f3a <xTaskIncrementTick+0xbc>
    2f30:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <xNextTaskUnblockTime+0x1>
    2f34:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <xNextTaskUnblockTime>
    2f38:	2f c0       	rjmp	.+94     	; 0x2f98 <xTaskIncrementTick+0x11a>
    2f3a:	8e 01       	movw	r16, r28
    2f3c:	0e 5f       	subi	r16, 0xFE	; 254
    2f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f40:	c8 01       	movw	r24, r16
    2f42:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <uxListRemove>
    2f46:	8c 89       	ldd	r24, Y+20	; 0x14
    2f48:	9d 89       	ldd	r25, Y+21	; 0x15
    2f4a:	89 2b       	or	r24, r25
    2f4c:	21 f0       	breq	.+8      	; 0x2f56 <xTaskIncrementTick+0xd8>
    2f4e:	ce 01       	movw	r24, r28
    2f50:	0c 96       	adiw	r24, 0x0c	; 12
    2f52:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <uxListRemove>
    2f56:	8e 89       	ldd	r24, Y+22	; 0x16
    2f58:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <uxTopReadyPriority>
    2f5c:	98 17       	cp	r25, r24
    2f5e:	10 f4       	brcc	.+4      	; 0x2f64 <xTaskIncrementTick+0xe6>
    2f60:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <uxTopReadyPriority>
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	9c 01       	movw	r18, r24
    2f68:	22 0f       	add	r18, r18
    2f6a:	33 1f       	adc	r19, r19
    2f6c:	22 0f       	add	r18, r18
    2f6e:	33 1f       	adc	r19, r19
    2f70:	22 0f       	add	r18, r18
    2f72:	33 1f       	adc	r19, r19
    2f74:	82 0f       	add	r24, r18
    2f76:	93 1f       	adc	r25, r19
    2f78:	b8 01       	movw	r22, r16
    2f7a:	88 59       	subi	r24, 0x98	; 152
    2f7c:	9d 4f       	sbci	r25, 0xFD	; 253
    2f7e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <vListInsertEnd>
    2f82:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <pxCurrentTCB>
    2f86:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    2f8a:	9e 89       	ldd	r25, Y+22	; 0x16
    2f8c:	86 89       	ldd	r24, Z+22	; 0x16
    2f8e:	98 17       	cp	r25, r24
    2f90:	08 f4       	brcc	.+2      	; 0x2f94 <xTaskIncrementTick+0x116>
    2f92:	b2 cf       	rjmp	.-156    	; 0x2ef8 <xTaskIncrementTick+0x7a>
    2f94:	dc 2c       	mov	r13, r12
    2f96:	b0 cf       	rjmp	.-160    	; 0x2ef8 <xTaskIncrementTick+0x7a>
    2f98:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <pxCurrentTCB>
    2f9c:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    2fa0:	86 89       	ldd	r24, Z+22	; 0x16
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	ee 0f       	add	r30, r30
    2fa8:	ff 1f       	adc	r31, r31
    2faa:	ee 0f       	add	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	ee 0f       	add	r30, r30
    2fb0:	ff 1f       	adc	r31, r31
    2fb2:	8e 0f       	add	r24, r30
    2fb4:	9f 1f       	adc	r25, r31
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	e8 59       	subi	r30, 0x98	; 152
    2fba:	fd 4f       	sbci	r31, 0xFD	; 253
    2fbc:	80 81       	ld	r24, Z
    2fbe:	82 30       	cpi	r24, 0x02	; 2
    2fc0:	48 f0       	brcs	.+18     	; 0x2fd4 <xTaskIncrementTick+0x156>
    2fc2:	dd 24       	eor	r13, r13
    2fc4:	d3 94       	inc	r13
    2fc6:	06 c0       	rjmp	.+12     	; 0x2fd4 <xTaskIncrementTick+0x156>
    2fc8:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <uxPendedTicks>
    2fcc:	8f 5f       	subi	r24, 0xFF	; 255
    2fce:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <uxPendedTicks>
    2fd2:	d1 2c       	mov	r13, r1
    2fd4:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <xYieldPending>
    2fd8:	88 23       	and	r24, r24
    2fda:	11 f0       	breq	.+4      	; 0x2fe0 <xTaskIncrementTick+0x162>
    2fdc:	dd 24       	eor	r13, r13
    2fde:	d3 94       	inc	r13
    2fe0:	8d 2d       	mov	r24, r13
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	1f 91       	pop	r17
    2fe8:	0f 91       	pop	r16
    2fea:	ff 90       	pop	r15
    2fec:	ef 90       	pop	r14
    2fee:	df 90       	pop	r13
    2ff0:	cf 90       	pop	r12
    2ff2:	08 95       	ret

00002ff4 <xTaskResumeAll>:
    2ff4:	df 92       	push	r13
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	0f 92       	push	r0
    3008:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <uxSchedulerSuspended>
    300c:	81 50       	subi	r24, 0x01	; 1
    300e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <uxSchedulerSuspended>
    3012:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <uxSchedulerSuspended>
    3016:	81 11       	cpse	r24, r1
    3018:	5f c0       	rjmp	.+190    	; 0x30d8 <xTaskResumeAll+0xe4>
    301a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <uxCurrentNumberOfTasks>
    301e:	81 11       	cpse	r24, r1
    3020:	33 c0       	rjmp	.+102    	; 0x3088 <xTaskResumeAll+0x94>
    3022:	5d c0       	rjmp	.+186    	; 0x30de <xTaskResumeAll+0xea>
    3024:	d7 01       	movw	r26, r14
    3026:	15 96       	adiw	r26, 0x05	; 5
    3028:	ed 91       	ld	r30, X+
    302a:	fc 91       	ld	r31, X
    302c:	16 97       	sbiw	r26, 0x06	; 6
    302e:	c6 81       	ldd	r28, Z+6	; 0x06
    3030:	d7 81       	ldd	r29, Z+7	; 0x07
    3032:	ce 01       	movw	r24, r28
    3034:	0c 96       	adiw	r24, 0x0c	; 12
    3036:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <uxListRemove>
    303a:	8e 01       	movw	r16, r28
    303c:	0e 5f       	subi	r16, 0xFE	; 254
    303e:	1f 4f       	sbci	r17, 0xFF	; 255
    3040:	c8 01       	movw	r24, r16
    3042:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <uxListRemove>
    3046:	8e 89       	ldd	r24, Y+22	; 0x16
    3048:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <uxTopReadyPriority>
    304c:	98 17       	cp	r25, r24
    304e:	10 f4       	brcc	.+4      	; 0x3054 <xTaskResumeAll+0x60>
    3050:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <uxTopReadyPriority>
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	9c 01       	movw	r18, r24
    3058:	22 0f       	add	r18, r18
    305a:	33 1f       	adc	r19, r19
    305c:	22 0f       	add	r18, r18
    305e:	33 1f       	adc	r19, r19
    3060:	22 0f       	add	r18, r18
    3062:	33 1f       	adc	r19, r19
    3064:	82 0f       	add	r24, r18
    3066:	93 1f       	adc	r25, r19
    3068:	b8 01       	movw	r22, r16
    306a:	88 59       	subi	r24, 0x98	; 152
    306c:	9d 4f       	sbci	r25, 0xFD	; 253
    306e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <vListInsertEnd>
    3072:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <pxCurrentTCB>
    3076:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    307a:	9e 89       	ldd	r25, Y+22	; 0x16
    307c:	86 89       	ldd	r24, Z+22	; 0x16
    307e:	98 17       	cp	r25, r24
    3080:	68 f0       	brcs	.+26     	; 0x309c <xTaskResumeAll+0xa8>
    3082:	d0 92 2f 02 	sts	0x022F, r13	; 0x80022f <xYieldPending>
    3086:	0a c0       	rjmp	.+20     	; 0x309c <xTaskResumeAll+0xa8>
    3088:	c0 e0       	ldi	r28, 0x00	; 0
    308a:	d0 e0       	ldi	r29, 0x00	; 0
    308c:	0f 2e       	mov	r0, r31
    308e:	f9 e4       	ldi	r31, 0x49	; 73
    3090:	ef 2e       	mov	r14, r31
    3092:	f2 e0       	ldi	r31, 0x02	; 2
    3094:	ff 2e       	mov	r15, r31
    3096:	f0 2d       	mov	r31, r0
    3098:	dd 24       	eor	r13, r13
    309a:	d3 94       	inc	r13
    309c:	f7 01       	movw	r30, r14
    309e:	80 81       	ld	r24, Z
    30a0:	81 11       	cpse	r24, r1
    30a2:	c0 cf       	rjmp	.-128    	; 0x3024 <xTaskResumeAll+0x30>
    30a4:	cd 2b       	or	r28, r29
    30a6:	11 f0       	breq	.+4      	; 0x30ac <xTaskResumeAll+0xb8>
    30a8:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <prvResetNextTaskUnblockTime>
    30ac:	c0 91 30 02 	lds	r28, 0x0230	; 0x800230 <uxPendedTicks>
    30b0:	cc 23       	and	r28, r28
    30b2:	51 f0       	breq	.+20     	; 0x30c8 <xTaskResumeAll+0xd4>
    30b4:	d1 e0       	ldi	r29, 0x01	; 1
    30b6:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <xTaskIncrementTick>
    30ba:	81 11       	cpse	r24, r1
    30bc:	d0 93 2f 02 	sts	0x022F, r29	; 0x80022f <xYieldPending>
    30c0:	c1 50       	subi	r28, 0x01	; 1
    30c2:	c9 f7       	brne	.-14     	; 0x30b6 <xTaskResumeAll+0xc2>
    30c4:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <uxPendedTicks>
    30c8:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <xYieldPending>
    30cc:	88 23       	and	r24, r24
    30ce:	31 f0       	breq	.+12     	; 0x30dc <xTaskResumeAll+0xe8>
    30d0:	0e 94 3a 1b 	call	0x3674	; 0x3674 <vPortYield>
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	03 c0       	rjmp	.+6      	; 0x30de <xTaskResumeAll+0xea>
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	01 c0       	rjmp	.+2      	; 0x30de <xTaskResumeAll+0xea>
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	0f 90       	pop	r0
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
    30ea:	ff 90       	pop	r15
    30ec:	ef 90       	pop	r14
    30ee:	df 90       	pop	r13
    30f0:	08 95       	ret

000030f2 <vTaskDelay>:
    30f2:	cf 93       	push	r28
    30f4:	df 93       	push	r29
    30f6:	ec 01       	movw	r28, r24
    30f8:	89 2b       	or	r24, r25
    30fa:	51 f0       	breq	.+20     	; 0x3110 <vTaskDelay+0x1e>
    30fc:	0e 94 39 17 	call	0x2e72	; 0x2e72 <vTaskSuspendAll>
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	ce 01       	movw	r24, r28
    3104:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <prvAddCurrentTaskToDelayedList>
    3108:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <xTaskResumeAll>
    310c:	81 11       	cpse	r24, r1
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <vTaskDelay+0x22>
    3110:	0e 94 3a 1b 	call	0x3674	; 0x3674 <vPortYield>
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	08 95       	ret

0000311a <prvIdleTask>:
    311a:	00 e4       	ldi	r16, 0x40	; 64
    311c:	12 e0       	ldi	r17, 0x02	; 2
    311e:	0f 2e       	mov	r0, r31
    3120:	f8 e6       	ldi	r31, 0x68	; 104
    3122:	ef 2e       	mov	r14, r31
    3124:	f2 e0       	ldi	r31, 0x02	; 2
    3126:	ff 2e       	mov	r15, r31
    3128:	f0 2d       	mov	r31, r0
    312a:	29 c0       	rjmp	.+82     	; 0x317e <prvIdleTask+0x64>
    312c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <vTaskSuspendAll>
    3130:	d8 01       	movw	r26, r16
    3132:	cc 91       	ld	r28, X
    3134:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <xTaskResumeAll>
    3138:	cc 23       	and	r28, r28
    313a:	09 f1       	breq	.+66     	; 0x317e <prvIdleTask+0x64>
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	0f 92       	push	r0
    3142:	d8 01       	movw	r26, r16
    3144:	15 96       	adiw	r26, 0x05	; 5
    3146:	ed 91       	ld	r30, X+
    3148:	fc 91       	ld	r31, X
    314a:	16 97       	sbiw	r26, 0x06	; 6
    314c:	c6 81       	ldd	r28, Z+6	; 0x06
    314e:	d7 81       	ldd	r29, Z+7	; 0x07
    3150:	ce 01       	movw	r24, r28
    3152:	02 96       	adiw	r24, 0x02	; 2
    3154:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <uxListRemove>
    3158:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <uxCurrentNumberOfTasks>
    315c:	81 50       	subi	r24, 0x01	; 1
    315e:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <uxCurrentNumberOfTasks>
    3162:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <uxDeletedTasksWaitingCleanUp>
    3166:	81 50       	subi	r24, 0x01	; 1
    3168:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <uxDeletedTasksWaitingCleanUp>
    316c:	0f 90       	pop	r0
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	8f 89       	ldd	r24, Y+23	; 0x17
    3172:	98 8d       	ldd	r25, Y+24	; 0x18
    3174:	0e 94 07 1a 	call	0x340e	; 0x340e <vPortFree>
    3178:	ce 01       	movw	r24, r28
    317a:	0e 94 07 1a 	call	0x340e	; 0x340e <vPortFree>
    317e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <uxDeletedTasksWaitingCleanUp>
    3182:	81 11       	cpse	r24, r1
    3184:	d3 cf       	rjmp	.-90     	; 0x312c <prvIdleTask+0x12>
    3186:	f7 01       	movw	r30, r14
    3188:	80 81       	ld	r24, Z
    318a:	82 30       	cpi	r24, 0x02	; 2
    318c:	c0 f3       	brcs	.-16     	; 0x317e <prvIdleTask+0x64>
    318e:	0e 94 3a 1b 	call	0x3674	; 0x3674 <vPortYield>
    3192:	f5 cf       	rjmp	.-22     	; 0x317e <prvIdleTask+0x64>

00003194 <vTaskSwitchContext>:
    3194:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <uxSchedulerSuspended>
    3198:	88 23       	and	r24, r24
    319a:	21 f0       	breq	.+8      	; 0x31a4 <vTaskSwitchContext+0x10>
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <xYieldPending>
    31a2:	08 95       	ret
    31a4:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <xYieldPending>
    31a8:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <uxTopReadyPriority>
    31ac:	82 2f       	mov	r24, r18
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	fc 01       	movw	r30, r24
    31b2:	ee 0f       	add	r30, r30
    31b4:	ff 1f       	adc	r31, r31
    31b6:	ee 0f       	add	r30, r30
    31b8:	ff 1f       	adc	r31, r31
    31ba:	ee 0f       	add	r30, r30
    31bc:	ff 1f       	adc	r31, r31
    31be:	e8 0f       	add	r30, r24
    31c0:	f9 1f       	adc	r31, r25
    31c2:	e8 59       	subi	r30, 0x98	; 152
    31c4:	fd 4f       	sbci	r31, 0xFD	; 253
    31c6:	30 81       	ld	r19, Z
    31c8:	31 11       	cpse	r19, r1
    31ca:	11 c0       	rjmp	.+34     	; 0x31ee <vTaskSwitchContext+0x5a>
    31cc:	21 50       	subi	r18, 0x01	; 1
    31ce:	82 2f       	mov	r24, r18
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	fc 01       	movw	r30, r24
    31d4:	ee 0f       	add	r30, r30
    31d6:	ff 1f       	adc	r31, r31
    31d8:	ee 0f       	add	r30, r30
    31da:	ff 1f       	adc	r31, r31
    31dc:	ee 0f       	add	r30, r30
    31de:	ff 1f       	adc	r31, r31
    31e0:	e8 0f       	add	r30, r24
    31e2:	f9 1f       	adc	r31, r25
    31e4:	e8 59       	subi	r30, 0x98	; 152
    31e6:	fd 4f       	sbci	r31, 0xFD	; 253
    31e8:	30 81       	ld	r19, Z
    31ea:	33 23       	and	r19, r19
    31ec:	79 f3       	breq	.-34     	; 0x31cc <vTaskSwitchContext+0x38>
    31ee:	ac 01       	movw	r20, r24
    31f0:	44 0f       	add	r20, r20
    31f2:	55 1f       	adc	r21, r21
    31f4:	44 0f       	add	r20, r20
    31f6:	55 1f       	adc	r21, r21
    31f8:	44 0f       	add	r20, r20
    31fa:	55 1f       	adc	r21, r21
    31fc:	48 0f       	add	r20, r24
    31fe:	59 1f       	adc	r21, r25
    3200:	da 01       	movw	r26, r20
    3202:	a8 59       	subi	r26, 0x98	; 152
    3204:	bd 4f       	sbci	r27, 0xFD	; 253
    3206:	11 96       	adiw	r26, 0x01	; 1
    3208:	ed 91       	ld	r30, X+
    320a:	fc 91       	ld	r31, X
    320c:	12 97       	sbiw	r26, 0x02	; 2
    320e:	02 80       	ldd	r0, Z+2	; 0x02
    3210:	f3 81       	ldd	r31, Z+3	; 0x03
    3212:	e0 2d       	mov	r30, r0
    3214:	12 96       	adiw	r26, 0x02	; 2
    3216:	fc 93       	st	X, r31
    3218:	ee 93       	st	-X, r30
    321a:	11 97       	sbiw	r26, 0x01	; 1
    321c:	45 59       	subi	r20, 0x95	; 149
    321e:	5d 4f       	sbci	r21, 0xFD	; 253
    3220:	e4 17       	cp	r30, r20
    3222:	f5 07       	cpc	r31, r21
    3224:	29 f4       	brne	.+10     	; 0x3230 <vTaskSwitchContext+0x9c>
    3226:	42 81       	ldd	r20, Z+2	; 0x02
    3228:	53 81       	ldd	r21, Z+3	; 0x03
    322a:	fd 01       	movw	r30, r26
    322c:	52 83       	std	Z+2, r21	; 0x02
    322e:	41 83       	std	Z+1, r20	; 0x01
    3230:	fc 01       	movw	r30, r24
    3232:	ee 0f       	add	r30, r30
    3234:	ff 1f       	adc	r31, r31
    3236:	ee 0f       	add	r30, r30
    3238:	ff 1f       	adc	r31, r31
    323a:	ee 0f       	add	r30, r30
    323c:	ff 1f       	adc	r31, r31
    323e:	8e 0f       	add	r24, r30
    3240:	9f 1f       	adc	r25, r31
    3242:	fc 01       	movw	r30, r24
    3244:	e8 59       	subi	r30, 0x98	; 152
    3246:	fd 4f       	sbci	r31, 0xFD	; 253
    3248:	01 80       	ldd	r0, Z+1	; 0x01
    324a:	f2 81       	ldd	r31, Z+2	; 0x02
    324c:	e0 2d       	mov	r30, r0
    324e:	86 81       	ldd	r24, Z+6	; 0x06
    3250:	97 81       	ldd	r25, Z+7	; 0x07
    3252:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <pxCurrentTCB+0x1>
    3256:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <pxCurrentTCB>
    325a:	20 93 32 02 	sts	0x0232, r18	; 0x800232 <uxTopReadyPriority>
    325e:	08 95       	ret

00003260 <vTaskPlaceOnEventList>:
    3260:	cf 93       	push	r28
    3262:	df 93       	push	r29
    3264:	eb 01       	movw	r28, r22
    3266:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <pxCurrentTCB>
    326a:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    326e:	64 5f       	subi	r22, 0xF4	; 244
    3270:	7f 4f       	sbci	r23, 0xFF	; 255
    3272:	0e 94 3b 1a 	call	0x3476	; 0x3476 <vListInsert>
    3276:	61 e0       	ldi	r22, 0x01	; 1
    3278:	ce 01       	movw	r24, r28
    327a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <prvAddCurrentTaskToDelayedList>
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	08 95       	ret

00003284 <xTaskRemoveFromEventList>:
    3284:	0f 93       	push	r16
    3286:	1f 93       	push	r17
    3288:	cf 93       	push	r28
    328a:	df 93       	push	r29
    328c:	dc 01       	movw	r26, r24
    328e:	15 96       	adiw	r26, 0x05	; 5
    3290:	ed 91       	ld	r30, X+
    3292:	fc 91       	ld	r31, X
    3294:	16 97       	sbiw	r26, 0x06	; 6
    3296:	c6 81       	ldd	r28, Z+6	; 0x06
    3298:	d7 81       	ldd	r29, Z+7	; 0x07
    329a:	8e 01       	movw	r16, r28
    329c:	04 5f       	subi	r16, 0xF4	; 244
    329e:	1f 4f       	sbci	r17, 0xFF	; 255
    32a0:	c8 01       	movw	r24, r16
    32a2:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <uxListRemove>
    32a6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <uxSchedulerSuspended>
    32aa:	81 11       	cpse	r24, r1
    32ac:	1c c0       	rjmp	.+56     	; 0x32e6 <xTaskRemoveFromEventList+0x62>
    32ae:	0a 50       	subi	r16, 0x0A	; 10
    32b0:	11 09       	sbc	r17, r1
    32b2:	c8 01       	movw	r24, r16
    32b4:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <uxListRemove>
    32b8:	8e 89       	ldd	r24, Y+22	; 0x16
    32ba:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <uxTopReadyPriority>
    32be:	98 17       	cp	r25, r24
    32c0:	10 f4       	brcc	.+4      	; 0x32c6 <xTaskRemoveFromEventList+0x42>
    32c2:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <uxTopReadyPriority>
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	9c 01       	movw	r18, r24
    32ca:	22 0f       	add	r18, r18
    32cc:	33 1f       	adc	r19, r19
    32ce:	22 0f       	add	r18, r18
    32d0:	33 1f       	adc	r19, r19
    32d2:	22 0f       	add	r18, r18
    32d4:	33 1f       	adc	r19, r19
    32d6:	82 0f       	add	r24, r18
    32d8:	93 1f       	adc	r25, r19
    32da:	b8 01       	movw	r22, r16
    32dc:	88 59       	subi	r24, 0x98	; 152
    32de:	9d 4f       	sbci	r25, 0xFD	; 253
    32e0:	0e 94 1a 1a 	call	0x3434	; 0x3434 <vListInsertEnd>
    32e4:	05 c0       	rjmp	.+10     	; 0x32f0 <xTaskRemoveFromEventList+0x6c>
    32e6:	b8 01       	movw	r22, r16
    32e8:	89 e4       	ldi	r24, 0x49	; 73
    32ea:	92 e0       	ldi	r25, 0x02	; 2
    32ec:	0e 94 1a 1a 	call	0x3434	; 0x3434 <vListInsertEnd>
    32f0:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <pxCurrentTCB>
    32f4:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    32f8:	9e 89       	ldd	r25, Y+22	; 0x16
    32fa:	86 89       	ldd	r24, Z+22	; 0x16
    32fc:	89 17       	cp	r24, r25
    32fe:	20 f4       	brcc	.+8      	; 0x3308 <xTaskRemoveFromEventList+0x84>
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <xYieldPending>
    3306:	01 c0       	rjmp	.+2      	; 0x330a <xTaskRemoveFromEventList+0x86>
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	08 95       	ret

00003314 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3314:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <xNumOfOverflows>
    3318:	fc 01       	movw	r30, r24
    331a:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    331c:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <xTickCount>
    3320:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <xTickCount+0x1>
    3324:	32 83       	std	Z+2, r19	; 0x02
    3326:	21 83       	std	Z+1, r18	; 0x01
    3328:	08 95       	ret

0000332a <xTaskCheckForTimeOut>:
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    332a:	0f b6       	in	r0, 0x3f	; 63
    332c:	f8 94       	cli
    332e:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3330:	40 91 33 02 	lds	r20, 0x0233	; 0x800233 <xTickCount>
    3334:	50 91 34 02 	lds	r21, 0x0234	; 0x800234 <xTickCount+0x1>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    3338:	db 01       	movw	r26, r22
    333a:	2d 91       	ld	r18, X+
    333c:	3c 91       	ld	r19, X
    333e:	2f 3f       	cpi	r18, 0xFF	; 255
    3340:	bf ef       	ldi	r27, 0xFF	; 255
    3342:	3b 07       	cpc	r19, r27
    3344:	19 f1       	breq	.+70     	; 0x338c <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3346:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <xNumOfOverflows>
    334a:	dc 01       	movw	r26, r24
    334c:	fc 91       	ld	r31, X
    334e:	fe 17       	cp	r31, r30
    3350:	39 f0       	breq	.+14     	; 0x3360 <xTaskCheckForTimeOut+0x36>
    3352:	11 96       	adiw	r26, 0x01	; 1
    3354:	ed 91       	ld	r30, X+
    3356:	fc 91       	ld	r31, X
    3358:	12 97       	sbiw	r26, 0x02	; 2
    335a:	4e 17       	cp	r20, r30
    335c:	5f 07       	cpc	r21, r31
    335e:	c0 f4       	brcc	.+48     	; 0x3390 <xTaskCheckForTimeOut+0x66>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    3360:	dc 01       	movw	r26, r24
    3362:	11 96       	adiw	r26, 0x01	; 1
    3364:	ed 91       	ld	r30, X+
    3366:	fc 91       	ld	r31, X
    3368:	12 97       	sbiw	r26, 0x02	; 2
    336a:	da 01       	movw	r26, r20
    336c:	ae 1b       	sub	r26, r30
    336e:	bf 0b       	sbc	r27, r31
    3370:	a2 17       	cp	r26, r18
    3372:	b3 07       	cpc	r27, r19
    3374:	78 f4       	brcc	.+30     	; 0x3394 <xTaskCheckForTimeOut+0x6a>
    3376:	db 01       	movw	r26, r22
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    3378:	e4 1b       	sub	r30, r20
    337a:	f5 0b       	sbc	r31, r21
    337c:	2e 0f       	add	r18, r30
    337e:	3f 1f       	adc	r19, r31
    3380:	2d 93       	st	X+, r18
    3382:	3c 93       	st	X, r19
			vTaskSetTimeOutState( pxTimeOut );
    3384:	0e 94 8a 19 	call	0x3314	; 0x3314 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	05 c0       	rjmp	.+10     	; 0x3396 <xTaskCheckForTimeOut+0x6c>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	03 c0       	rjmp	.+6      	; 0x3396 <xTaskCheckForTimeOut+0x6c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	01 c0       	rjmp	.+2      	; 0x3396 <xTaskCheckForTimeOut+0x6c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3394:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    3396:	0f 90       	pop	r0
    3398:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    339a:	08 95       	ret

0000339c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <xYieldPending>
    33a2:	08 95       	ret

000033a4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    33aa:	0e 94 39 17 	call	0x2e72	; 0x2e72 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    33ae:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <pucAlignedHeap.2068>
    33b2:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <pucAlignedHeap.2068+0x1>
    33b6:	89 2b       	or	r24, r25
    33b8:	31 f4       	brne	.+12     	; 0x33c6 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    33ba:	83 e9       	ldi	r24, 0x93	; 147
    33bc:	92 e0       	ldi	r25, 0x02	; 2
    33be:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <pucAlignedHeap.2068+0x1>
    33c2:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <pucAlignedHeap.2068>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    33c6:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <xNextFreeByte>
    33ca:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <xNextFreeByte+0x1>
    33ce:	c9 01       	movw	r24, r18
    33d0:	8c 0f       	add	r24, r28
    33d2:	9d 1f       	adc	r25, r29
    33d4:	8b 3d       	cpi	r24, 0xDB	; 219
    33d6:	45 e0       	ldi	r20, 0x05	; 5
    33d8:	94 07       	cpc	r25, r20
    33da:	70 f4       	brcc	.+28     	; 0x33f8 <pvPortMalloc+0x54>
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	70 f4       	brcc	.+28     	; 0x33fe <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    33e2:	c0 91 8e 02 	lds	r28, 0x028E	; 0x80028e <pucAlignedHeap.2068>
    33e6:	d0 91 8f 02 	lds	r29, 0x028F	; 0x80028f <pucAlignedHeap.2068+0x1>
    33ea:	c2 0f       	add	r28, r18
    33ec:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    33ee:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <xNextFreeByte+0x1>
    33f2:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <xNextFreeByte>
    33f6:	05 c0       	rjmp	.+10     	; 0x3402 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    33f8:	c0 e0       	ldi	r28, 0x00	; 0
    33fa:	d0 e0       	ldi	r29, 0x00	; 0
    33fc:	02 c0       	rjmp	.+4      	; 0x3402 <pvPortMalloc+0x5e>
    33fe:	c0 e0       	ldi	r28, 0x00	; 0
    3400:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    3402:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    3406:	ce 01       	movw	r24, r28
    3408:	df 91       	pop	r29
    340a:	cf 91       	pop	r28
    340c:	08 95       	ret

0000340e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    340e:	08 95       	ret

00003410 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    3410:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3412:	03 96       	adiw	r24, 0x03	; 3
    3414:	92 83       	std	Z+2, r25	; 0x02
    3416:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3418:	2f ef       	ldi	r18, 0xFF	; 255
    341a:	3f ef       	ldi	r19, 0xFF	; 255
    341c:	34 83       	std	Z+4, r19	; 0x04
    341e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3420:	96 83       	std	Z+6, r25	; 0x06
    3422:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3424:	90 87       	std	Z+8, r25	; 0x08
    3426:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    3428:	10 82       	st	Z, r1
    342a:	08 95       	ret

0000342c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    342c:	fc 01       	movw	r30, r24
    342e:	11 86       	std	Z+9, r1	; 0x09
    3430:	10 86       	std	Z+8, r1	; 0x08
    3432:	08 95       	ret

00003434 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	9c 01       	movw	r18, r24
    343a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    343c:	dc 01       	movw	r26, r24
    343e:	11 96       	adiw	r26, 0x01	; 1
    3440:	cd 91       	ld	r28, X+
    3442:	dc 91       	ld	r29, X
    3444:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    3446:	d3 83       	std	Z+3, r29	; 0x03
    3448:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    344a:	8c 81       	ldd	r24, Y+4	; 0x04
    344c:	9d 81       	ldd	r25, Y+5	; 0x05
    344e:	95 83       	std	Z+5, r25	; 0x05
    3450:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3452:	8c 81       	ldd	r24, Y+4	; 0x04
    3454:	9d 81       	ldd	r25, Y+5	; 0x05
    3456:	dc 01       	movw	r26, r24
    3458:	13 96       	adiw	r26, 0x03	; 3
    345a:	7c 93       	st	X, r23
    345c:	6e 93       	st	-X, r22
    345e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    3460:	7d 83       	std	Y+5, r23	; 0x05
    3462:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3464:	31 87       	std	Z+9, r19	; 0x09
    3466:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    3468:	f9 01       	movw	r30, r18
    346a:	80 81       	ld	r24, Z
    346c:	8f 5f       	subi	r24, 0xFF	; 255
    346e:	80 83       	st	Z, r24
}
    3470:	df 91       	pop	r29
    3472:	cf 91       	pop	r28
    3474:	08 95       	ret

00003476 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3476:	cf 93       	push	r28
    3478:	df 93       	push	r29
    347a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    347c:	48 81       	ld	r20, Y
    347e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3480:	4f 3f       	cpi	r20, 0xFF	; 255
    3482:	2f ef       	ldi	r18, 0xFF	; 255
    3484:	52 07       	cpc	r21, r18
    3486:	21 f4       	brne	.+8      	; 0x3490 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3488:	fc 01       	movw	r30, r24
    348a:	a7 81       	ldd	r26, Z+7	; 0x07
    348c:	b0 85       	ldd	r27, Z+8	; 0x08
    348e:	0d c0       	rjmp	.+26     	; 0x34aa <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3490:	dc 01       	movw	r26, r24
    3492:	13 96       	adiw	r26, 0x03	; 3
    3494:	01 c0       	rjmp	.+2      	; 0x3498 <vListInsert+0x22>
    3496:	df 01       	movw	r26, r30
    3498:	12 96       	adiw	r26, 0x02	; 2
    349a:	ed 91       	ld	r30, X+
    349c:	fc 91       	ld	r31, X
    349e:	13 97       	sbiw	r26, 0x03	; 3
    34a0:	20 81       	ld	r18, Z
    34a2:	31 81       	ldd	r19, Z+1	; 0x01
    34a4:	42 17       	cp	r20, r18
    34a6:	53 07       	cpc	r21, r19
    34a8:	b0 f7       	brcc	.-20     	; 0x3496 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    34aa:	12 96       	adiw	r26, 0x02	; 2
    34ac:	ed 91       	ld	r30, X+
    34ae:	fc 91       	ld	r31, X
    34b0:	13 97       	sbiw	r26, 0x03	; 3
    34b2:	fb 83       	std	Y+3, r31	; 0x03
    34b4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    34b6:	d5 83       	std	Z+5, r29	; 0x05
    34b8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    34ba:	bd 83       	std	Y+5, r27	; 0x05
    34bc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    34be:	13 96       	adiw	r26, 0x03	; 3
    34c0:	dc 93       	st	X, r29
    34c2:	ce 93       	st	-X, r28
    34c4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    34c6:	99 87       	std	Y+9, r25	; 0x09
    34c8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    34ca:	fc 01       	movw	r30, r24
    34cc:	20 81       	ld	r18, Z
    34ce:	2f 5f       	subi	r18, 0xFF	; 255
    34d0:	20 83       	st	Z, r18
}
    34d2:	df 91       	pop	r29
    34d4:	cf 91       	pop	r28
    34d6:	08 95       	ret

000034d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    34de:	a0 85       	ldd	r26, Z+8	; 0x08
    34e0:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    34e2:	c2 81       	ldd	r28, Z+2	; 0x02
    34e4:	d3 81       	ldd	r29, Z+3	; 0x03
    34e6:	84 81       	ldd	r24, Z+4	; 0x04
    34e8:	95 81       	ldd	r25, Z+5	; 0x05
    34ea:	9d 83       	std	Y+5, r25	; 0x05
    34ec:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    34ee:	c4 81       	ldd	r28, Z+4	; 0x04
    34f0:	d5 81       	ldd	r29, Z+5	; 0x05
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	9b 83       	std	Y+3, r25	; 0x03
    34f8:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    34fa:	11 96       	adiw	r26, 0x01	; 1
    34fc:	8d 91       	ld	r24, X+
    34fe:	9c 91       	ld	r25, X
    3500:	12 97       	sbiw	r26, 0x02	; 2
    3502:	e8 17       	cp	r30, r24
    3504:	f9 07       	cpc	r31, r25
    3506:	31 f4       	brne	.+12     	; 0x3514 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3508:	84 81       	ldd	r24, Z+4	; 0x04
    350a:	95 81       	ldd	r25, Z+5	; 0x05
    350c:	12 96       	adiw	r26, 0x02	; 2
    350e:	9c 93       	st	X, r25
    3510:	8e 93       	st	-X, r24
    3512:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3514:	11 86       	std	Z+9, r1	; 0x09
    3516:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    3518:	8c 91       	ld	r24, X
    351a:	81 50       	subi	r24, 0x01	; 1
    351c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	08 95       	ret

00003524 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    3524:	31 e1       	ldi	r19, 0x11	; 17
    3526:	fc 01       	movw	r30, r24
    3528:	30 83       	st	Z, r19
    352a:	31 97       	sbiw	r30, 0x01	; 1
    352c:	22 e2       	ldi	r18, 0x22	; 34
    352e:	20 83       	st	Z, r18
    3530:	31 97       	sbiw	r30, 0x01	; 1
    3532:	a3 e3       	ldi	r26, 0x33	; 51
    3534:	a0 83       	st	Z, r26
    3536:	31 97       	sbiw	r30, 0x01	; 1
    3538:	60 83       	st	Z, r22
    353a:	31 97       	sbiw	r30, 0x01	; 1
    353c:	70 83       	st	Z, r23
    353e:	31 97       	sbiw	r30, 0x01	; 1
    3540:	10 82       	st	Z, r1
    3542:	31 97       	sbiw	r30, 0x01	; 1
    3544:	60 e8       	ldi	r22, 0x80	; 128
    3546:	60 83       	st	Z, r22
    3548:	31 97       	sbiw	r30, 0x01	; 1
    354a:	10 82       	st	Z, r1
    354c:	31 97       	sbiw	r30, 0x01	; 1
    354e:	62 e0       	ldi	r22, 0x02	; 2
    3550:	60 83       	st	Z, r22
    3552:	31 97       	sbiw	r30, 0x01	; 1
    3554:	63 e0       	ldi	r22, 0x03	; 3
    3556:	60 83       	st	Z, r22
    3558:	31 97       	sbiw	r30, 0x01	; 1
    355a:	64 e0       	ldi	r22, 0x04	; 4
    355c:	60 83       	st	Z, r22
    355e:	31 97       	sbiw	r30, 0x01	; 1
    3560:	65 e0       	ldi	r22, 0x05	; 5
    3562:	60 83       	st	Z, r22
    3564:	31 97       	sbiw	r30, 0x01	; 1
    3566:	66 e0       	ldi	r22, 0x06	; 6
    3568:	60 83       	st	Z, r22
    356a:	31 97       	sbiw	r30, 0x01	; 1
    356c:	67 e0       	ldi	r22, 0x07	; 7
    356e:	60 83       	st	Z, r22
    3570:	31 97       	sbiw	r30, 0x01	; 1
    3572:	68 e0       	ldi	r22, 0x08	; 8
    3574:	60 83       	st	Z, r22
    3576:	31 97       	sbiw	r30, 0x01	; 1
    3578:	69 e0       	ldi	r22, 0x09	; 9
    357a:	60 83       	st	Z, r22
    357c:	31 97       	sbiw	r30, 0x01	; 1
    357e:	60 e1       	ldi	r22, 0x10	; 16
    3580:	60 83       	st	Z, r22
    3582:	31 97       	sbiw	r30, 0x01	; 1
    3584:	30 83       	st	Z, r19
    3586:	31 97       	sbiw	r30, 0x01	; 1
    3588:	32 e1       	ldi	r19, 0x12	; 18
    358a:	30 83       	st	Z, r19
    358c:	31 97       	sbiw	r30, 0x01	; 1
    358e:	33 e1       	ldi	r19, 0x13	; 19
    3590:	30 83       	st	Z, r19
    3592:	31 97       	sbiw	r30, 0x01	; 1
    3594:	34 e1       	ldi	r19, 0x14	; 20
    3596:	30 83       	st	Z, r19
    3598:	31 97       	sbiw	r30, 0x01	; 1
    359a:	35 e1       	ldi	r19, 0x15	; 21
    359c:	30 83       	st	Z, r19
    359e:	31 97       	sbiw	r30, 0x01	; 1
    35a0:	36 e1       	ldi	r19, 0x16	; 22
    35a2:	30 83       	st	Z, r19
    35a4:	31 97       	sbiw	r30, 0x01	; 1
    35a6:	37 e1       	ldi	r19, 0x17	; 23
    35a8:	30 83       	st	Z, r19
    35aa:	31 97       	sbiw	r30, 0x01	; 1
    35ac:	38 e1       	ldi	r19, 0x18	; 24
    35ae:	30 83       	st	Z, r19
    35b0:	31 97       	sbiw	r30, 0x01	; 1
    35b2:	39 e1       	ldi	r19, 0x19	; 25
    35b4:	30 83       	st	Z, r19
    35b6:	31 97       	sbiw	r30, 0x01	; 1
    35b8:	30 e2       	ldi	r19, 0x20	; 32
    35ba:	30 83       	st	Z, r19
    35bc:	31 97       	sbiw	r30, 0x01	; 1
    35be:	31 e2       	ldi	r19, 0x21	; 33
    35c0:	30 83       	st	Z, r19
    35c2:	31 97       	sbiw	r30, 0x01	; 1
    35c4:	20 83       	st	Z, r18
    35c6:	31 97       	sbiw	r30, 0x01	; 1
    35c8:	23 e2       	ldi	r18, 0x23	; 35
    35ca:	20 83       	st	Z, r18
    35cc:	31 97       	sbiw	r30, 0x01	; 1
    35ce:	40 83       	st	Z, r20
    35d0:	31 97       	sbiw	r30, 0x01	; 1
    35d2:	50 83       	st	Z, r21
    35d4:	31 97       	sbiw	r30, 0x01	; 1
    35d6:	26 e2       	ldi	r18, 0x26	; 38
    35d8:	20 83       	st	Z, r18
    35da:	31 97       	sbiw	r30, 0x01	; 1
    35dc:	27 e2       	ldi	r18, 0x27	; 39
    35de:	20 83       	st	Z, r18
    35e0:	31 97       	sbiw	r30, 0x01	; 1
    35e2:	28 e2       	ldi	r18, 0x28	; 40
    35e4:	20 83       	st	Z, r18
    35e6:	31 97       	sbiw	r30, 0x01	; 1
    35e8:	29 e2       	ldi	r18, 0x29	; 41
    35ea:	20 83       	st	Z, r18
    35ec:	31 97       	sbiw	r30, 0x01	; 1
    35ee:	20 e3       	ldi	r18, 0x30	; 48
    35f0:	20 83       	st	Z, r18
    35f2:	31 97       	sbiw	r30, 0x01	; 1
    35f4:	21 e3       	ldi	r18, 0x31	; 49
    35f6:	20 83       	st	Z, r18
    35f8:	86 97       	sbiw	r24, 0x26	; 38
    35fa:	08 95       	ret

000035fc <xPortStartScheduler>:
    35fc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3600:	89 ef       	ldi	r24, 0xF9	; 249
    3602:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    3606:	e1 e8       	ldi	r30, 0x81	; 129
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 81       	ld	r24, Z
    360c:	8b 60       	ori	r24, 0x0B	; 11
    360e:	80 83       	st	Z, r24
    3610:	ef e6       	ldi	r30, 0x6F	; 111
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	80 81       	ld	r24, Z
    3616:	82 60       	ori	r24, 0x02	; 2
    3618:	80 83       	st	Z, r24
    361a:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <pxCurrentTCB>
    361e:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    3622:	cd 91       	ld	r28, X+
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	dd 91       	ld	r29, X+
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	ff 91       	pop	r31
    362c:	ef 91       	pop	r30
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	bf 91       	pop	r27
    3634:	af 91       	pop	r26
    3636:	9f 91       	pop	r25
    3638:	8f 91       	pop	r24
    363a:	7f 91       	pop	r23
    363c:	6f 91       	pop	r22
    363e:	5f 91       	pop	r21
    3640:	4f 91       	pop	r20
    3642:	3f 91       	pop	r19
    3644:	2f 91       	pop	r18
    3646:	1f 91       	pop	r17
    3648:	0f 91       	pop	r16
    364a:	ff 90       	pop	r15
    364c:	ef 90       	pop	r14
    364e:	df 90       	pop	r13
    3650:	cf 90       	pop	r12
    3652:	bf 90       	pop	r11
    3654:	af 90       	pop	r10
    3656:	9f 90       	pop	r9
    3658:	8f 90       	pop	r8
    365a:	7f 90       	pop	r7
    365c:	6f 90       	pop	r6
    365e:	5f 90       	pop	r5
    3660:	4f 90       	pop	r4
    3662:	3f 90       	pop	r3
    3664:	2f 90       	pop	r2
    3666:	1f 90       	pop	r1
    3668:	0f 90       	pop	r0
    366a:	0f be       	out	0x3f, r0	; 63
    366c:	0f 90       	pop	r0
    366e:	08 95       	ret
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	08 95       	ret

00003674 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    3674:	0f 92       	push	r0
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	f8 94       	cli
    367a:	0f 92       	push	r0
    367c:	1f 92       	push	r1
    367e:	11 24       	eor	r1, r1
    3680:	2f 92       	push	r2
    3682:	3f 92       	push	r3
    3684:	4f 92       	push	r4
    3686:	5f 92       	push	r5
    3688:	6f 92       	push	r6
    368a:	7f 92       	push	r7
    368c:	8f 92       	push	r8
    368e:	9f 92       	push	r9
    3690:	af 92       	push	r10
    3692:	bf 92       	push	r11
    3694:	cf 92       	push	r12
    3696:	df 92       	push	r13
    3698:	ef 92       	push	r14
    369a:	ff 92       	push	r15
    369c:	0f 93       	push	r16
    369e:	1f 93       	push	r17
    36a0:	2f 93       	push	r18
    36a2:	3f 93       	push	r19
    36a4:	4f 93       	push	r20
    36a6:	5f 93       	push	r21
    36a8:	6f 93       	push	r22
    36aa:	7f 93       	push	r23
    36ac:	8f 93       	push	r24
    36ae:	9f 93       	push	r25
    36b0:	af 93       	push	r26
    36b2:	bf 93       	push	r27
    36b4:	cf 93       	push	r28
    36b6:	df 93       	push	r29
    36b8:	ef 93       	push	r30
    36ba:	ff 93       	push	r31
    36bc:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <pxCurrentTCB>
    36c0:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    36c4:	0d b6       	in	r0, 0x3d	; 61
    36c6:	0d 92       	st	X+, r0
    36c8:	0e b6       	in	r0, 0x3e	; 62
    36ca:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    36cc:	0e 94 ca 18 	call	0x3194	; 0x3194 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    36d0:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <pxCurrentTCB>
    36d4:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    36d8:	cd 91       	ld	r28, X+
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	dd 91       	ld	r29, X+
    36de:	de bf       	out	0x3e, r29	; 62
    36e0:	ff 91       	pop	r31
    36e2:	ef 91       	pop	r30
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	bf 91       	pop	r27
    36ea:	af 91       	pop	r26
    36ec:	9f 91       	pop	r25
    36ee:	8f 91       	pop	r24
    36f0:	7f 91       	pop	r23
    36f2:	6f 91       	pop	r22
    36f4:	5f 91       	pop	r21
    36f6:	4f 91       	pop	r20
    36f8:	3f 91       	pop	r19
    36fa:	2f 91       	pop	r18
    36fc:	1f 91       	pop	r17
    36fe:	0f 91       	pop	r16
    3700:	ff 90       	pop	r15
    3702:	ef 90       	pop	r14
    3704:	df 90       	pop	r13
    3706:	cf 90       	pop	r12
    3708:	bf 90       	pop	r11
    370a:	af 90       	pop	r10
    370c:	9f 90       	pop	r9
    370e:	8f 90       	pop	r8
    3710:	7f 90       	pop	r7
    3712:	6f 90       	pop	r6
    3714:	5f 90       	pop	r5
    3716:	4f 90       	pop	r4
    3718:	3f 90       	pop	r3
    371a:	2f 90       	pop	r2
    371c:	1f 90       	pop	r1
    371e:	0f 90       	pop	r0
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3724:	08 95       	ret

00003726 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    3726:	0f 92       	push	r0
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	0f 92       	push	r0
    372e:	1f 92       	push	r1
    3730:	11 24       	eor	r1, r1
    3732:	2f 92       	push	r2
    3734:	3f 92       	push	r3
    3736:	4f 92       	push	r4
    3738:	5f 92       	push	r5
    373a:	6f 92       	push	r6
    373c:	7f 92       	push	r7
    373e:	8f 92       	push	r8
    3740:	9f 92       	push	r9
    3742:	af 92       	push	r10
    3744:	bf 92       	push	r11
    3746:	cf 92       	push	r12
    3748:	df 92       	push	r13
    374a:	ef 92       	push	r14
    374c:	ff 92       	push	r15
    374e:	0f 93       	push	r16
    3750:	1f 93       	push	r17
    3752:	2f 93       	push	r18
    3754:	3f 93       	push	r19
    3756:	4f 93       	push	r20
    3758:	5f 93       	push	r21
    375a:	6f 93       	push	r22
    375c:	7f 93       	push	r23
    375e:	8f 93       	push	r24
    3760:	9f 93       	push	r25
    3762:	af 93       	push	r26
    3764:	bf 93       	push	r27
    3766:	cf 93       	push	r28
    3768:	df 93       	push	r29
    376a:	ef 93       	push	r30
    376c:	ff 93       	push	r31
    376e:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <pxCurrentTCB>
    3772:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    3776:	0d b6       	in	r0, 0x3d	; 61
    3778:	0d 92       	st	X+, r0
    377a:	0e b6       	in	r0, 0x3e	; 62
    377c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    377e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <xTaskIncrementTick>
    3782:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    3784:	0e 94 ca 18 	call	0x3194	; 0x3194 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    3788:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <pxCurrentTCB>
    378c:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <pxCurrentTCB+0x1>
    3790:	cd 91       	ld	r28, X+
    3792:	cd bf       	out	0x3d, r28	; 61
    3794:	dd 91       	ld	r29, X+
    3796:	de bf       	out	0x3e, r29	; 62
    3798:	ff 91       	pop	r31
    379a:	ef 91       	pop	r30
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	bf 91       	pop	r27
    37a2:	af 91       	pop	r26
    37a4:	9f 91       	pop	r25
    37a6:	8f 91       	pop	r24
    37a8:	7f 91       	pop	r23
    37aa:	6f 91       	pop	r22
    37ac:	5f 91       	pop	r21
    37ae:	4f 91       	pop	r20
    37b0:	3f 91       	pop	r19
    37b2:	2f 91       	pop	r18
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	ff 90       	pop	r15
    37ba:	ef 90       	pop	r14
    37bc:	df 90       	pop	r13
    37be:	cf 90       	pop	r12
    37c0:	bf 90       	pop	r11
    37c2:	af 90       	pop	r10
    37c4:	9f 90       	pop	r9
    37c6:	8f 90       	pop	r8
    37c8:	7f 90       	pop	r7
    37ca:	6f 90       	pop	r6
    37cc:	5f 90       	pop	r5
    37ce:	4f 90       	pop	r4
    37d0:	3f 90       	pop	r3
    37d2:	2f 90       	pop	r2
    37d4:	1f 90       	pop	r1
    37d6:	0f 90       	pop	r0
    37d8:	0f be       	out	0x3f, r0	; 63
    37da:	0f 90       	pop	r0

	asm volatile ( "ret" );
    37dc:	08 95       	ret

000037de <__vector_11>:
	
	
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    37de:	0e 94 93 1b 	call	0x3726	; 0x3726 <vPortYieldFromTick>
		asm volatile ( "reti" );
    37e2:	18 95       	reti

000037e4 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    37e4:	fc 01       	movw	r30, r24
    37e6:	21 8d       	ldd	r18, Z+25	; 0x19
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	20 5f       	subi	r18, 0xF0	; 240
    37ec:	3f 4f       	sbci	r19, 0xFF	; 255
    37ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    37f0:	a9 01       	movw	r20, r18
    37f2:	48 1b       	sub	r20, r24
    37f4:	51 09       	sbc	r21, r1
    37f6:	ca 01       	movw	r24, r20
    37f8:	8f 70       	andi	r24, 0x0F	; 15
    37fa:	99 27       	eor	r25, r25
    37fc:	08 95       	ret

000037fe <_ZN14HardwareSerial4peekEv>:
    37fe:	fc 01       	movw	r30, r24
    3800:	91 8d       	ldd	r25, Z+25	; 0x19
    3802:	82 8d       	ldd	r24, Z+26	; 0x1a
    3804:	98 17       	cp	r25, r24
    3806:	31 f0       	breq	.+12     	; 0x3814 <_ZN14HardwareSerial4peekEv+0x16>
    3808:	82 8d       	ldd	r24, Z+26	; 0x1a
    380a:	e8 0f       	add	r30, r24
    380c:	f1 1d       	adc	r31, r1
    380e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	08 95       	ret
    3814:	8f ef       	ldi	r24, 0xFF	; 255
    3816:	9f ef       	ldi	r25, 0xFF	; 255
    3818:	08 95       	ret

0000381a <_ZN14HardwareSerial4readEv>:
    381a:	fc 01       	movw	r30, r24
    381c:	91 8d       	ldd	r25, Z+25	; 0x19
    381e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3820:	98 17       	cp	r25, r24
    3822:	61 f0       	breq	.+24     	; 0x383c <_ZN14HardwareSerial4readEv+0x22>
    3824:	82 8d       	ldd	r24, Z+26	; 0x1a
    3826:	df 01       	movw	r26, r30
    3828:	a8 0f       	add	r26, r24
    382a:	b1 1d       	adc	r27, r1
    382c:	5d 96       	adiw	r26, 0x1d	; 29
    382e:	8c 91       	ld	r24, X
    3830:	92 8d       	ldd	r25, Z+26	; 0x1a
    3832:	9f 5f       	subi	r25, 0xFF	; 255
    3834:	9f 70       	andi	r25, 0x0F	; 15
    3836:	92 8f       	std	Z+26, r25	; 0x1a
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	08 95       	ret
    383c:	8f ef       	ldi	r24, 0xFF	; 255
    383e:	9f ef       	ldi	r25, 0xFF	; 255
    3840:	08 95       	ret

00003842 <_ZN14HardwareSerial17availableForWriteEv>:
    3842:	fc 01       	movw	r30, r24
    3844:	23 8d       	ldd	r18, Z+27	; 0x1b
    3846:	34 8d       	ldd	r19, Z+28	; 0x1c
    3848:	23 17       	cp	r18, r19
    384a:	38 f0       	brcs	.+14     	; 0x385a <_ZN14HardwareSerial17availableForWriteEv+0x18>
    384c:	8f e0       	ldi	r24, 0x0F	; 15
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	82 1b       	sub	r24, r18
    3852:	91 09       	sbc	r25, r1
    3854:	83 0f       	add	r24, r19
    3856:	91 1d       	adc	r25, r1
    3858:	08 95       	ret
    385a:	83 2f       	mov	r24, r19
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	82 1b       	sub	r24, r18
    3860:	91 09       	sbc	r25, r1
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	08 95       	ret

00003866 <_ZN14HardwareSerial5writeEh>:
    3866:	fc 01       	movw	r30, r24
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	80 8f       	std	Z+24, r24	; 0x18
    386c:	93 8d       	ldd	r25, Z+27	; 0x1b
    386e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3870:	98 13       	cpse	r25, r24
    3872:	07 c0       	rjmp	.+14     	; 0x3882 <_ZN14HardwareSerial5writeEh+0x1c>
    3874:	a0 89       	ldd	r26, Z+16	; 0x10
    3876:	b1 89       	ldd	r27, Z+17	; 0x11
    3878:	8c 91       	ld	r24, X
    387a:	85 fd       	sbrc	r24, 5
    387c:	04 c0       	rjmp	.+8      	; 0x3886 <_ZN14HardwareSerial5writeEh+0x20>
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	03 c0       	rjmp	.+6      	; 0x3888 <_ZN14HardwareSerial5writeEh+0x22>
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <_ZN14HardwareSerial5writeEh+0x22>
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	88 23       	and	r24, r24
    388a:	91 f0       	breq	.+36     	; 0x38b0 <_ZN14HardwareSerial5writeEh+0x4a>
    388c:	9f b7       	in	r25, 0x3f	; 63
    388e:	f8 94       	cli
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	88 23       	and	r24, r24
    3894:	59 f0       	breq	.+22     	; 0x38ac <_ZN14HardwareSerial5writeEh+0x46>
    3896:	a6 89       	ldd	r26, Z+22	; 0x16
    3898:	b7 89       	ldd	r27, Z+23	; 0x17
    389a:	6c 93       	st	X, r22
    389c:	a0 89       	ldd	r26, Z+16	; 0x10
    389e:	b1 89       	ldd	r27, Z+17	; 0x11
    38a0:	8c 91       	ld	r24, X
    38a2:	83 70       	andi	r24, 0x03	; 3
    38a4:	80 64       	ori	r24, 0x40	; 64
    38a6:	8c 93       	st	X, r24
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	f3 cf       	rjmp	.-26     	; 0x3892 <_ZN14HardwareSerial5writeEh+0x2c>
    38ac:	9f bf       	out	0x3f, r25	; 63
    38ae:	53 c0       	rjmp	.+166    	; 0x3956 <_ZN14HardwareSerial5writeEh+0xf0>
    38b0:	83 8d       	ldd	r24, Z+27	; 0x1b
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	01 96       	adiw	r24, 0x01	; 1
    38b6:	8f 70       	andi	r24, 0x0F	; 15
    38b8:	90 78       	andi	r25, 0x80	; 128
    38ba:	99 23       	and	r25, r25
    38bc:	24 f4       	brge	.+8      	; 0x38c6 <_ZN14HardwareSerial5writeEh+0x60>
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	80 6f       	ori	r24, 0xF0	; 240
    38c2:	9f 6f       	ori	r25, 0xFF	; 255
    38c4:	01 96       	adiw	r24, 0x01	; 1
    38c6:	98 2f       	mov	r25, r24
    38c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    38ca:	98 13       	cpse	r25, r24
    38cc:	30 c0       	rjmp	.+96     	; 0x392e <_ZN14HardwareSerial5writeEh+0xc8>
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	07 fc       	sbrc	r0, 7
    38d2:	fa cf       	rjmp	.-12     	; 0x38c8 <_ZN14HardwareSerial5writeEh+0x62>
    38d4:	a0 89       	ldd	r26, Z+16	; 0x10
    38d6:	b1 89       	ldd	r27, Z+17	; 0x11
    38d8:	8c 91       	ld	r24, X
    38da:	85 ff       	sbrs	r24, 5
    38dc:	f5 cf       	rjmp	.-22     	; 0x38c8 <_ZN14HardwareSerial5writeEh+0x62>
    38de:	84 8d       	ldd	r24, Z+28	; 0x1c
    38e0:	df 01       	movw	r26, r30
    38e2:	a8 0f       	add	r26, r24
    38e4:	b1 1d       	adc	r27, r1
    38e6:	9d 96       	adiw	r26, 0x2d	; 45
    38e8:	8c 91       	ld	r24, X
    38ea:	24 8d       	ldd	r18, Z+28	; 0x1c
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	2f 5f       	subi	r18, 0xFF	; 255
    38f0:	3f 4f       	sbci	r19, 0xFF	; 255
    38f2:	2f 70       	andi	r18, 0x0F	; 15
    38f4:	30 78       	andi	r19, 0x80	; 128
    38f6:	33 23       	and	r19, r19
    38f8:	34 f4       	brge	.+12     	; 0x3906 <_ZN14HardwareSerial5writeEh+0xa0>
    38fa:	21 50       	subi	r18, 0x01	; 1
    38fc:	31 09       	sbc	r19, r1
    38fe:	20 6f       	ori	r18, 0xF0	; 240
    3900:	3f 6f       	ori	r19, 0xFF	; 255
    3902:	2f 5f       	subi	r18, 0xFF	; 255
    3904:	3f 4f       	sbci	r19, 0xFF	; 255
    3906:	24 8f       	std	Z+28, r18	; 0x1c
    3908:	a6 89       	ldd	r26, Z+22	; 0x16
    390a:	b7 89       	ldd	r27, Z+23	; 0x17
    390c:	8c 93       	st	X, r24
    390e:	a0 89       	ldd	r26, Z+16	; 0x10
    3910:	b1 89       	ldd	r27, Z+17	; 0x11
    3912:	8c 91       	ld	r24, X
    3914:	83 70       	andi	r24, 0x03	; 3
    3916:	80 64       	ori	r24, 0x40	; 64
    3918:	8c 93       	st	X, r24
    391a:	23 8d       	ldd	r18, Z+27	; 0x1b
    391c:	84 8d       	ldd	r24, Z+28	; 0x1c
    391e:	28 13       	cpse	r18, r24
    3920:	d3 cf       	rjmp	.-90     	; 0x38c8 <_ZN14HardwareSerial5writeEh+0x62>
    3922:	a2 89       	ldd	r26, Z+18	; 0x12
    3924:	b3 89       	ldd	r27, Z+19	; 0x13
    3926:	8c 91       	ld	r24, X
    3928:	8f 7d       	andi	r24, 0xDF	; 223
    392a:	8c 93       	st	X, r24
    392c:	cd cf       	rjmp	.-102    	; 0x38c8 <_ZN14HardwareSerial5writeEh+0x62>
    392e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3930:	df 01       	movw	r26, r30
    3932:	a8 0f       	add	r26, r24
    3934:	b1 1d       	adc	r27, r1
    3936:	9d 96       	adiw	r26, 0x2d	; 45
    3938:	6c 93       	st	X, r22
    393a:	2f b7       	in	r18, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	88 23       	and	r24, r24
    3942:	41 f0       	breq	.+16     	; 0x3954 <_ZN14HardwareSerial5writeEh+0xee>
    3944:	93 8f       	std	Z+27, r25	; 0x1b
    3946:	a2 89       	ldd	r26, Z+18	; 0x12
    3948:	b3 89       	ldd	r27, Z+19	; 0x13
    394a:	8c 91       	ld	r24, X
    394c:	80 62       	ori	r24, 0x20	; 32
    394e:	8c 93       	st	X, r24
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	f6 cf       	rjmp	.-20     	; 0x3940 <_ZN14HardwareSerial5writeEh+0xda>
    3954:	2f bf       	out	0x3f, r18	; 63
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	08 95       	ret

0000395c <_ZN14HardwareSerial5flushEv>:
    395c:	cf 93       	push	r28
    395e:	df 93       	push	r29
    3960:	dc 01       	movw	r26, r24
    3962:	58 96       	adiw	r26, 0x18	; 24
    3964:	8c 91       	ld	r24, X
    3966:	58 97       	sbiw	r26, 0x18	; 24
    3968:	88 23       	and	r24, r24
    396a:	09 f4       	brne	.+2      	; 0x396e <_ZN14HardwareSerial5flushEv+0x12>
    396c:	5f c0       	rjmp	.+190    	; 0x3a2c <_ZN14HardwareSerial5flushEv+0xd0>
    396e:	52 96       	adiw	r26, 0x12	; 18
    3970:	ed 91       	ld	r30, X+
    3972:	fc 91       	ld	r31, X
    3974:	53 97       	sbiw	r26, 0x13	; 19
    3976:	90 81       	ld	r25, Z
    3978:	95 fd       	sbrc	r25, 5
    397a:	09 c0       	rjmp	.+18     	; 0x398e <_ZN14HardwareSerial5flushEv+0x32>
    397c:	50 96       	adiw	r26, 0x10	; 16
    397e:	cd 91       	ld	r28, X+
    3980:	dc 91       	ld	r29, X
    3982:	51 97       	sbiw	r26, 0x11	; 17
    3984:	98 81       	ld	r25, Y
    3986:	96 fd       	sbrc	r25, 6
    3988:	04 c0       	rjmp	.+8      	; 0x3992 <_ZN14HardwareSerial5flushEv+0x36>
    398a:	98 2f       	mov	r25, r24
    398c:	03 c0       	rjmp	.+6      	; 0x3994 <_ZN14HardwareSerial5flushEv+0x38>
    398e:	98 2f       	mov	r25, r24
    3990:	01 c0       	rjmp	.+2      	; 0x3994 <_ZN14HardwareSerial5flushEv+0x38>
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	99 23       	and	r25, r25
    3996:	09 f4       	brne	.+2      	; 0x399a <_ZN14HardwareSerial5flushEv+0x3e>
    3998:	49 c0       	rjmp	.+146    	; 0x3a2c <_ZN14HardwareSerial5flushEv+0xd0>
    399a:	0f b6       	in	r0, 0x3f	; 63
    399c:	07 fc       	sbrc	r0, 7
    399e:	05 c0       	rjmp	.+10     	; 0x39aa <_ZN14HardwareSerial5flushEv+0x4e>
    39a0:	20 81       	ld	r18, Z
    39a2:	25 fd       	sbrc	r18, 5
    39a4:	03 c0       	rjmp	.+6      	; 0x39ac <_ZN14HardwareSerial5flushEv+0x50>
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	01 c0       	rjmp	.+2      	; 0x39ac <_ZN14HardwareSerial5flushEv+0x50>
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	99 23       	and	r25, r25
    39ae:	f9 f2       	breq	.-66     	; 0x396e <_ZN14HardwareSerial5flushEv+0x12>
    39b0:	50 96       	adiw	r26, 0x10	; 16
    39b2:	ed 91       	ld	r30, X+
    39b4:	fc 91       	ld	r31, X
    39b6:	51 97       	sbiw	r26, 0x11	; 17
    39b8:	90 81       	ld	r25, Z
    39ba:	95 ff       	sbrs	r25, 5
    39bc:	d8 cf       	rjmp	.-80     	; 0x396e <_ZN14HardwareSerial5flushEv+0x12>
    39be:	5c 96       	adiw	r26, 0x1c	; 28
    39c0:	9c 91       	ld	r25, X
    39c2:	5c 97       	sbiw	r26, 0x1c	; 28
    39c4:	fd 01       	movw	r30, r26
    39c6:	e9 0f       	add	r30, r25
    39c8:	f1 1d       	adc	r31, r1
    39ca:	95 a5       	ldd	r25, Z+45	; 0x2d
    39cc:	5c 96       	adiw	r26, 0x1c	; 28
    39ce:	2c 91       	ld	r18, X
    39d0:	5c 97       	sbiw	r26, 0x1c	; 28
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	2f 5f       	subi	r18, 0xFF	; 255
    39d6:	3f 4f       	sbci	r19, 0xFF	; 255
    39d8:	2f 70       	andi	r18, 0x0F	; 15
    39da:	30 78       	andi	r19, 0x80	; 128
    39dc:	33 23       	and	r19, r19
    39de:	34 f4       	brge	.+12     	; 0x39ec <_ZN14HardwareSerial5flushEv+0x90>
    39e0:	21 50       	subi	r18, 0x01	; 1
    39e2:	31 09       	sbc	r19, r1
    39e4:	20 6f       	ori	r18, 0xF0	; 240
    39e6:	3f 6f       	ori	r19, 0xFF	; 255
    39e8:	2f 5f       	subi	r18, 0xFF	; 255
    39ea:	3f 4f       	sbci	r19, 0xFF	; 255
    39ec:	5c 96       	adiw	r26, 0x1c	; 28
    39ee:	2c 93       	st	X, r18
    39f0:	5c 97       	sbiw	r26, 0x1c	; 28
    39f2:	56 96       	adiw	r26, 0x16	; 22
    39f4:	ed 91       	ld	r30, X+
    39f6:	fc 91       	ld	r31, X
    39f8:	57 97       	sbiw	r26, 0x17	; 23
    39fa:	90 83       	st	Z, r25
    39fc:	50 96       	adiw	r26, 0x10	; 16
    39fe:	ed 91       	ld	r30, X+
    3a00:	fc 91       	ld	r31, X
    3a02:	51 97       	sbiw	r26, 0x11	; 17
    3a04:	90 81       	ld	r25, Z
    3a06:	93 70       	andi	r25, 0x03	; 3
    3a08:	90 64       	ori	r25, 0x40	; 64
    3a0a:	90 83       	st	Z, r25
    3a0c:	5b 96       	adiw	r26, 0x1b	; 27
    3a0e:	2c 91       	ld	r18, X
    3a10:	5b 97       	sbiw	r26, 0x1b	; 27
    3a12:	5c 96       	adiw	r26, 0x1c	; 28
    3a14:	9c 91       	ld	r25, X
    3a16:	5c 97       	sbiw	r26, 0x1c	; 28
    3a18:	29 13       	cpse	r18, r25
    3a1a:	a9 cf       	rjmp	.-174    	; 0x396e <_ZN14HardwareSerial5flushEv+0x12>
    3a1c:	52 96       	adiw	r26, 0x12	; 18
    3a1e:	ed 91       	ld	r30, X+
    3a20:	fc 91       	ld	r31, X
    3a22:	53 97       	sbiw	r26, 0x13	; 19
    3a24:	90 81       	ld	r25, Z
    3a26:	9f 7d       	andi	r25, 0xDF	; 223
    3a28:	90 83       	st	Z, r25
    3a2a:	a1 cf       	rjmp	.-190    	; 0x396e <_ZN14HardwareSerial5flushEv+0x12>
    3a2c:	df 91       	pop	r29
    3a2e:	cf 91       	pop	r28
    3a30:	08 95       	ret

00003a32 <_ZN14HardwareSerial5beginEmh>:


// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, uint8_t config)
{
    3a32:	bf 92       	push	r11
    3a34:	cf 92       	push	r12
    3a36:	df 92       	push	r13
    3a38:	ef 92       	push	r14
    3a3a:	ff 92       	push	r15
    3a3c:	0f 93       	push	r16
    3a3e:	1f 93       	push	r17
    3a40:	cf 93       	push	r28
    3a42:	df 93       	push	r29
    3a44:	ec 01       	movw	r28, r24
    3a46:	6a 01       	movw	r12, r20
    3a48:	7b 01       	movw	r14, r22
    3a4a:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (_f_cpu / 4 / baud - 1) / 2;
    3a4c:	8c 01       	movw	r16, r24
    3a4e:	03 5c       	subi	r16, 0xC3	; 195
    3a50:	1f 4f       	sbci	r17, 0xFF	; 255
    3a52:	f8 01       	movw	r30, r16
    3a54:	80 81       	ld	r24, Z
    3a56:	91 81       	ldd	r25, Z+1	; 0x01
    3a58:	a2 81       	ldd	r26, Z+2	; 0x02
    3a5a:	b3 81       	ldd	r27, Z+3	; 0x03
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	96 95       	lsr	r25
    3a62:	87 95       	ror	r24
    3a64:	77 95       	ror	r23
    3a66:	67 95       	ror	r22
    3a68:	96 95       	lsr	r25
    3a6a:	87 95       	ror	r24
    3a6c:	77 95       	ror	r23
    3a6e:	67 95       	ror	r22
    3a70:	a7 01       	movw	r20, r14
    3a72:	96 01       	movw	r18, r12
    3a74:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
    3a78:	da 01       	movw	r26, r20
    3a7a:	c9 01       	movw	r24, r18
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	a1 09       	sbc	r26, r1
    3a80:	b1 09       	sbc	r27, r1
    3a82:	b6 95       	lsr	r27
    3a84:	a7 95       	ror	r26
    3a86:	97 95       	ror	r25
    3a88:	87 95       	ror	r24
    3a8a:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    3a8c:	e8 89       	ldd	r30, Y+16	; 0x10
    3a8e:	f9 89       	ldd	r31, Y+17	; 0x11
    3a90:	82 e0       	ldi	r24, 0x02	; 2
    3a92:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((_f_cpu == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3a94:	f8 01       	movw	r30, r16
    3a96:	80 81       	ld	r24, Z
    3a98:	91 81       	ldd	r25, Z+1	; 0x01
    3a9a:	a2 81       	ldd	r26, Z+2	; 0x02
    3a9c:	b3 81       	ldd	r27, Z+3	; 0x03
    3a9e:	81 15       	cp	r24, r1
    3aa0:	94 42       	sbci	r25, 0x24	; 36
    3aa2:	a4 4f       	sbci	r26, 0xF4	; 244
    3aa4:	b1 05       	cpc	r27, r1
    3aa6:	31 f4       	brne	.+12     	; 0x3ab4 <_ZN14HardwareSerial5beginEmh+0x82>
    3aa8:	c1 14       	cp	r12, r1
    3aaa:	41 ee       	ldi	r20, 0xE1	; 225
    3aac:	d4 06       	cpc	r13, r20
    3aae:	e1 04       	cpc	r14, r1
    3ab0:	f1 04       	cpc	r15, r1
    3ab2:	21 f0       	breq	.+8      	; 0x3abc <_ZN14HardwareSerial5beginEmh+0x8a>
    3ab4:	21 15       	cp	r18, r1
    3ab6:	80 e1       	ldi	r24, 0x10	; 16
    3ab8:	38 07       	cpc	r19, r24
    3aba:	08 f1       	brcs	.+66     	; 0x3afe <_ZN14HardwareSerial5beginEmh+0xcc>
  {
    *_ucsra = 0;
    3abc:	e8 89       	ldd	r30, Y+16	; 0x10
    3abe:	f9 89       	ldd	r31, Y+17	; 0x11
    3ac0:	10 82       	st	Z, r1
    baud_setting = (_f_cpu / 8 / baud - 1) / 2;
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	fd 96       	adiw	r30, 0x3d	; 61
    3ac6:	80 81       	ld	r24, Z
    3ac8:	91 81       	ldd	r25, Z+1	; 0x01
    3aca:	a2 81       	ldd	r26, Z+2	; 0x02
    3acc:	b3 81       	ldd	r27, Z+3	; 0x03
    3ace:	bc 01       	movw	r22, r24
    3ad0:	cd 01       	movw	r24, r26
    3ad2:	68 94       	set
    3ad4:	12 f8       	bld	r1, 2
    3ad6:	96 95       	lsr	r25
    3ad8:	87 95       	ror	r24
    3ada:	77 95       	ror	r23
    3adc:	67 95       	ror	r22
    3ade:	16 94       	lsr	r1
    3ae0:	d1 f7       	brne	.-12     	; 0x3ad6 <_ZN14HardwareSerial5beginEmh+0xa4>
    3ae2:	a7 01       	movw	r20, r14
    3ae4:	96 01       	movw	r18, r12
    3ae6:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
    3aea:	da 01       	movw	r26, r20
    3aec:	c9 01       	movw	r24, r18
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	a1 09       	sbc	r26, r1
    3af2:	b1 09       	sbc	r27, r1
    3af4:	b6 95       	lsr	r27
    3af6:	a7 95       	ror	r26
    3af8:	97 95       	ror	r25
    3afa:	87 95       	ror	r24
    3afc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3afe:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b00:	fd 85       	ldd	r31, Y+13	; 0x0d
    3b02:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3b04:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b06:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b08:	20 83       	st	Z, r18

  _written = false;
    3b0a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3b0c:	ec 89       	ldd	r30, Y+20	; 0x14
    3b0e:	fd 89       	ldd	r31, Y+21	; 0x15
    3b10:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    3b12:	ea 89       	ldd	r30, Y+18	; 0x12
    3b14:	fb 89       	ldd	r31, Y+19	; 0x13
    3b16:	80 81       	ld	r24, Z
    3b18:	80 61       	ori	r24, 0x10	; 16
    3b1a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3b1c:	ea 89       	ldd	r30, Y+18	; 0x12
    3b1e:	fb 89       	ldd	r31, Y+19	; 0x13
    3b20:	80 81       	ld	r24, Z
    3b22:	88 60       	ori	r24, 0x08	; 8
    3b24:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3b26:	ea 89       	ldd	r30, Y+18	; 0x12
    3b28:	fb 89       	ldd	r31, Y+19	; 0x13
    3b2a:	80 81       	ld	r24, Z
    3b2c:	80 68       	ori	r24, 0x80	; 128
    3b2e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3b30:	ea 89       	ldd	r30, Y+18	; 0x12
    3b32:	fb 89       	ldd	r31, Y+19	; 0x13
    3b34:	80 81       	ld	r24, Z
    3b36:	8f 7d       	andi	r24, 0xDF	; 223
    3b38:	80 83       	st	Z, r24
}
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	1f 91       	pop	r17
    3b40:	0f 91       	pop	r16
    3b42:	ff 90       	pop	r15
    3b44:	ef 90       	pop	r14
    3b46:	df 90       	pop	r13
    3b48:	cf 90       	pop	r12
    3b4a:	bf 90       	pop	r11
    3b4c:	08 95       	ret

00003b4e <_Z41__static_initialization_and_destruction_0ii>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	d9 f5       	brne	.+118    	; 0x3bc8 <_Z41__static_initialization_and_destruction_0ii+0x7a>
    3b52:	6f 3f       	cpi	r22, 0xFF	; 255
    3b54:	7f 4f       	sbci	r23, 0xFF	; 255
    3b56:	c1 f5       	brne	.+112    	; 0x3bc8 <_Z41__static_initialization_and_destruction_0ii+0x7a>
    3b58:	ee e6       	ldi	r30, 0x6E	; 110
    3b5a:	f8 e0       	ldi	r31, 0x08	; 8
    3b5c:	13 82       	std	Z+3, r1	; 0x03
    3b5e:	12 82       	std	Z+2, r1	; 0x02
    3b60:	88 ee       	ldi	r24, 0xE8	; 232
    3b62:	93 e0       	ldi	r25, 0x03	; 3
    3b64:	a0 e0       	ldi	r26, 0x00	; 0
    3b66:	b0 e0       	ldi	r27, 0x00	; 0
    3b68:	84 83       	std	Z+4, r24	; 0x04
    3b6a:	95 83       	std	Z+5, r25	; 0x05
    3b6c:	a6 83       	std	Z+6, r26	; 0x06
    3b6e:	b7 83       	std	Z+7, r27	; 0x07
    3b70:	8e ea       	ldi	r24, 0xAE	; 174
    3b72:	91 e0       	ldi	r25, 0x01	; 1
    3b74:	91 83       	std	Z+1, r25	; 0x01
    3b76:	80 83       	st	Z, r24
    3b78:	85 ec       	ldi	r24, 0xC5	; 197
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	95 87       	std	Z+13, r25	; 0x0d
    3b7e:	84 87       	std	Z+12, r24	; 0x0c
    3b80:	84 ec       	ldi	r24, 0xC4	; 196
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	97 87       	std	Z+15, r25	; 0x0f
    3b86:	86 87       	std	Z+14, r24	; 0x0e
    3b88:	80 ec       	ldi	r24, 0xC0	; 192
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	91 8b       	std	Z+17, r25	; 0x11
    3b8e:	80 8b       	std	Z+16, r24	; 0x10
    3b90:	81 ec       	ldi	r24, 0xC1	; 193
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	93 8b       	std	Z+19, r25	; 0x13
    3b96:	82 8b       	std	Z+18, r24	; 0x12
    3b98:	82 ec       	ldi	r24, 0xC2	; 194
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	95 8b       	std	Z+21, r25	; 0x15
    3b9e:	84 8b       	std	Z+20, r24	; 0x14
    3ba0:	86 ec       	ldi	r24, 0xC6	; 198
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	97 8b       	std	Z+23, r25	; 0x17
    3ba6:	86 8b       	std	Z+22, r24	; 0x16
    3ba8:	11 8e       	std	Z+25, r1	; 0x19
    3baa:	12 8e       	std	Z+26, r1	; 0x1a
    3bac:	13 8e       	std	Z+27, r1	; 0x1b
    3bae:	14 8e       	std	Z+28, r1	; 0x1c
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	94 e2       	ldi	r25, 0x24	; 36
    3bb4:	a4 ef       	ldi	r26, 0xF4	; 244
    3bb6:	b0 e0       	ldi	r27, 0x00	; 0
    3bb8:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <Serial+0x3d>
    3bbc:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <Serial+0x3e>
    3bc0:	a0 93 ad 08 	sts	0x08AD, r26	; 0x8008ad <Serial+0x3f>
    3bc4:	b0 93 ae 08 	sts	0x08AE, r27	; 0x8008ae <Serial+0x40>
    3bc8:	08 95       	ret

00003bca <__vector_18>:
    3bca:	1f 92       	push	r1
    3bcc:	0f 92       	push	r0
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	0f 92       	push	r0
    3bd2:	11 24       	eor	r1, r1
    3bd4:	2f 93       	push	r18
    3bd6:	8f 93       	push	r24
    3bd8:	9f 93       	push	r25
    3bda:	af 93       	push	r26
    3bdc:	bf 93       	push	r27
    3bde:	ef 93       	push	r30
    3be0:	ff 93       	push	r31
    3be2:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <Serial+0x10>
    3be6:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <Serial+0x11>
    3bea:	80 81       	ld	r24, Z
    3bec:	82 fd       	sbrc	r24, 2
    3bee:	14 c0       	rjmp	.+40     	; 0x3c18 <__vector_18+0x4e>
    3bf0:	ee e6       	ldi	r30, 0x6E	; 110
    3bf2:	f8 e0       	ldi	r31, 0x08	; 8
    3bf4:	a6 89       	ldd	r26, Z+22	; 0x16
    3bf6:	b7 89       	ldd	r27, Z+23	; 0x17
    3bf8:	2c 91       	ld	r18, X
    3bfa:	81 8d       	ldd	r24, Z+25	; 0x19
    3bfc:	8f 5f       	subi	r24, 0xFF	; 255
    3bfe:	8f 70       	andi	r24, 0x0F	; 15
    3c00:	92 8d       	ldd	r25, Z+26	; 0x1a
    3c02:	89 17       	cp	r24, r25
    3c04:	71 f0       	breq	.+28     	; 0x3c22 <__vector_18+0x58>
    3c06:	df 01       	movw	r26, r30
    3c08:	e1 8d       	ldd	r30, Z+25	; 0x19
    3c0a:	f0 e0       	ldi	r31, 0x00	; 0
    3c0c:	e2 59       	subi	r30, 0x92	; 146
    3c0e:	f7 4f       	sbci	r31, 0xF7	; 247
    3c10:	25 8f       	std	Z+29, r18	; 0x1d
    3c12:	59 96       	adiw	r26, 0x19	; 25
    3c14:	8c 93       	st	X, r24
    3c16:	05 c0       	rjmp	.+10     	; 0x3c22 <__vector_18+0x58>
    3c18:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <Serial+0x16>
    3c1c:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <Serial+0x17>
    3c20:	80 81       	ld	r24, Z
    3c22:	ff 91       	pop	r31
    3c24:	ef 91       	pop	r30
    3c26:	bf 91       	pop	r27
    3c28:	af 91       	pop	r26
    3c2a:	9f 91       	pop	r25
    3c2c:	8f 91       	pop	r24
    3c2e:	2f 91       	pop	r18
    3c30:	0f 90       	pop	r0
    3c32:	0f be       	out	0x3f, r0	; 63
    3c34:	0f 90       	pop	r0
    3c36:	1f 90       	pop	r1
    3c38:	18 95       	reti

00003c3a <__vector_19>:
    3c3a:	1f 92       	push	r1
    3c3c:	0f 92       	push	r0
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	0f 92       	push	r0
    3c42:	11 24       	eor	r1, r1
    3c44:	2f 93       	push	r18
    3c46:	8f 93       	push	r24
    3c48:	9f 93       	push	r25
    3c4a:	af 93       	push	r26
    3c4c:	bf 93       	push	r27
    3c4e:	ef 93       	push	r30
    3c50:	ff 93       	push	r31
    3c52:	ae e6       	ldi	r26, 0x6E	; 110
    3c54:	b8 e0       	ldi	r27, 0x08	; 8
    3c56:	5c 96       	adiw	r26, 0x1c	; 28
    3c58:	ec 91       	ld	r30, X
    3c5a:	5c 97       	sbiw	r26, 0x1c	; 28
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	e2 59       	subi	r30, 0x92	; 146
    3c60:	f7 4f       	sbci	r31, 0xF7	; 247
    3c62:	25 a5       	ldd	r18, Z+45	; 0x2d
    3c64:	5c 96       	adiw	r26, 0x1c	; 28
    3c66:	8c 91       	ld	r24, X
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	01 96       	adiw	r24, 0x01	; 1
    3c6c:	8f 70       	andi	r24, 0x0F	; 15
    3c6e:	90 78       	andi	r25, 0x80	; 128
    3c70:	99 23       	and	r25, r25
    3c72:	24 f4       	brge	.+8      	; 0x3c7c <__vector_19+0x42>
    3c74:	01 97       	sbiw	r24, 0x01	; 1
    3c76:	80 6f       	ori	r24, 0xF0	; 240
    3c78:	9f 6f       	ori	r25, 0xFF	; 255
    3c7a:	01 96       	adiw	r24, 0x01	; 1
    3c7c:	ee e6       	ldi	r30, 0x6E	; 110
    3c7e:	f8 e0       	ldi	r31, 0x08	; 8
    3c80:	84 8f       	std	Z+28, r24	; 0x1c
    3c82:	a6 89       	ldd	r26, Z+22	; 0x16
    3c84:	b7 89       	ldd	r27, Z+23	; 0x17
    3c86:	2c 93       	st	X, r18
    3c88:	a0 89       	ldd	r26, Z+16	; 0x10
    3c8a:	b1 89       	ldd	r27, Z+17	; 0x11
    3c8c:	8c 91       	ld	r24, X
    3c8e:	83 70       	andi	r24, 0x03	; 3
    3c90:	80 64       	ori	r24, 0x40	; 64
    3c92:	8c 93       	st	X, r24
    3c94:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c96:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c98:	98 13       	cpse	r25, r24
    3c9a:	07 c0       	rjmp	.+14     	; 0x3caa <__vector_19+0x70>
    3c9c:	e0 91 80 08 	lds	r30, 0x0880	; 0x800880 <Serial+0x12>
    3ca0:	f0 91 81 08 	lds	r31, 0x0881	; 0x800881 <Serial+0x13>
    3ca4:	80 81       	ld	r24, Z
    3ca6:	8f 7d       	andi	r24, 0xDF	; 223
    3ca8:	80 83       	st	Z, r24
    3caa:	ff 91       	pop	r31
    3cac:	ef 91       	pop	r30
    3cae:	bf 91       	pop	r27
    3cb0:	af 91       	pop	r26
    3cb2:	9f 91       	pop	r25
    3cb4:	8f 91       	pop	r24
    3cb6:	2f 91       	pop	r18
    3cb8:	0f 90       	pop	r0
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	0f 90       	pop	r0
    3cbe:	1f 90       	pop	r1
    3cc0:	18 95       	reti

00003cc2 <_GLOBAL__sub_I___vector_18>:
    3cc2:	6f ef       	ldi	r22, 0xFF	; 255
    3cc4:	7f ef       	ldi	r23, 0xFF	; 255
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <_Z41__static_initialization_and_destruction_0ii>
    3cce:	08 95       	ret

00003cd0 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3cd0:	cf 92       	push	r12
    3cd2:	df 92       	push	r13
    3cd4:	ef 92       	push	r14
    3cd6:	ff 92       	push	r15
    3cd8:	0f 93       	push	r16
    3cda:	1f 93       	push	r17
    3cdc:	cf 93       	push	r28
    3cde:	df 93       	push	r29
    3ce0:	8c 01       	movw	r16, r24
    3ce2:	db 01       	movw	r26, r22
    3ce4:	c0 e0       	ldi	r28, 0x00	; 0
    3ce6:	d0 e0       	ldi	r29, 0x00	; 0
    3ce8:	7a 01       	movw	r14, r20
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	e8 1a       	sub	r14, r24
    3cee:	f1 08       	sbc	r15, r1
    3cf0:	45 2b       	or	r20, r21
    3cf2:	a1 f0       	breq	.+40     	; 0x3d1c <_ZN5Print5writeEPKhj+0x4c>
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	80 81       	ld	r24, Z
    3cf8:	91 81       	ldd	r25, Z+1	; 0x01
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	20 81       	ld	r18, Z
    3cfe:	31 81       	ldd	r19, Z+1	; 0x01
    3d00:	6d 01       	movw	r12, r26
    3d02:	ff ef       	ldi	r31, 0xFF	; 255
    3d04:	cf 1a       	sub	r12, r31
    3d06:	df 0a       	sbc	r13, r31
    3d08:	6c 91       	ld	r22, X
    3d0a:	c8 01       	movw	r24, r16
    3d0c:	f9 01       	movw	r30, r18
    3d0e:	09 95       	icall
    3d10:	89 2b       	or	r24, r25
    3d12:	21 f0       	breq	.+8      	; 0x3d1c <_ZN5Print5writeEPKhj+0x4c>
    3d14:	21 96       	adiw	r28, 0x01	; 1
    3d16:	a7 01       	movw	r20, r14
    3d18:	d6 01       	movw	r26, r12
    3d1a:	e6 cf       	rjmp	.-52     	; 0x3ce8 <_ZN5Print5writeEPKhj+0x18>
    3d1c:	ce 01       	movw	r24, r28
    3d1e:	df 91       	pop	r29
    3d20:	cf 91       	pop	r28
    3d22:	1f 91       	pop	r17
    3d24:	0f 91       	pop	r16
    3d26:	ff 90       	pop	r15
    3d28:	ef 90       	pop	r14
    3d2a:	df 90       	pop	r13
    3d2c:	cf 90       	pop	r12
    3d2e:	08 95       	ret

00003d30 <_ZN5Print5printEPKc>:
    3d30:	61 15       	cp	r22, r1
    3d32:	71 05       	cpc	r23, r1
    3d34:	81 f0       	breq	.+32     	; 0x3d56 <_ZN5Print5printEPKc+0x26>
    3d36:	fb 01       	movw	r30, r22
    3d38:	01 90       	ld	r0, Z+
    3d3a:	00 20       	and	r0, r0
    3d3c:	e9 f7       	brne	.-6      	; 0x3d38 <_ZN5Print5printEPKc+0x8>
    3d3e:	31 97       	sbiw	r30, 0x01	; 1
    3d40:	af 01       	movw	r20, r30
    3d42:	46 1b       	sub	r20, r22
    3d44:	57 0b       	sbc	r21, r23
    3d46:	dc 01       	movw	r26, r24
    3d48:	ed 91       	ld	r30, X+
    3d4a:	fc 91       	ld	r31, X
    3d4c:	02 80       	ldd	r0, Z+2	; 0x02
    3d4e:	f3 81       	ldd	r31, Z+3	; 0x03
    3d50:	e0 2d       	mov	r30, r0
    3d52:	09 95       	icall
    3d54:	08 95       	ret
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	08 95       	ret

00003d5c <_ZN5Print5printEc>:
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	ed 91       	ld	r30, X+
    3d60:	fc 91       	ld	r31, X
    3d62:	01 90       	ld	r0, Z+
    3d64:	f0 81       	ld	r31, Z
    3d66:	e0 2d       	mov	r30, r0
    3d68:	09 95       	icall
    3d6a:	08 95       	ret

00003d6c <_ZN5Print7printlnEv>:
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	ed 91       	ld	r30, X+
    3d70:	fc 91       	ld	r31, X
    3d72:	02 80       	ldd	r0, Z+2	; 0x02
    3d74:	f3 81       	ldd	r31, Z+3	; 0x03
    3d76:	e0 2d       	mov	r30, r0
    3d78:	42 e0       	ldi	r20, 0x02	; 2
    3d7a:	50 e0       	ldi	r21, 0x00	; 0
    3d7c:	6c eb       	ldi	r22, 0xBC	; 188
    3d7e:	71 e0       	ldi	r23, 0x01	; 1
    3d80:	09 95       	icall
    3d82:	08 95       	ret

00003d84 <_ZN5Print7printlnEPKc>:
    3d84:	0f 93       	push	r16
    3d86:	1f 93       	push	r17
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	ec 01       	movw	r28, r24
    3d8e:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
    3d92:	8c 01       	movw	r16, r24
    3d94:	ce 01       	movw	r24, r28
    3d96:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN5Print7printlnEv>
    3d9a:	80 0f       	add	r24, r16
    3d9c:	91 1f       	adc	r25, r17
    3d9e:	df 91       	pop	r29
    3da0:	cf 91       	pop	r28
    3da2:	1f 91       	pop	r17
    3da4:	0f 91       	pop	r16
    3da6:	08 95       	ret

00003da8 <_ZN5Print11printNumberEmh>:
    3da8:	8f 92       	push	r8
    3daa:	9f 92       	push	r9
    3dac:	af 92       	push	r10
    3dae:	bf 92       	push	r11
    3db0:	df 92       	push	r13
    3db2:	ef 92       	push	r14
    3db4:	ff 92       	push	r15
    3db6:	0f 93       	push	r16
    3db8:	1f 93       	push	r17
    3dba:	cf 93       	push	r28
    3dbc:	df 93       	push	r29
    3dbe:	cd b7       	in	r28, 0x3d	; 61
    3dc0:	de b7       	in	r29, 0x3e	; 62
    3dc2:	a1 97       	sbiw	r28, 0x21	; 33
    3dc4:	0f b6       	in	r0, 0x3f	; 63
    3dc6:	f8 94       	cli
    3dc8:	de bf       	out	0x3e, r29	; 62
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	cd bf       	out	0x3d, r28	; 61
    3dce:	7c 01       	movw	r14, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	ba 01       	movw	r22, r20
    3dd4:	d2 2e       	mov	r13, r18
    3dd6:	19 a2       	std	Y+33, r1	; 0x21
    3dd8:	21 e0       	ldi	r18, 0x01	; 1
    3dda:	2d 15       	cp	r18, r13
    3ddc:	20 f0       	brcs	.+8      	; 0x3de6 <_ZN5Print11printNumberEmh+0x3e>
    3dde:	0f 2e       	mov	r0, r31
    3de0:	fa e0       	ldi	r31, 0x0A	; 10
    3de2:	df 2e       	mov	r13, r31
    3de4:	f0 2d       	mov	r31, r0
    3de6:	8e 01       	movw	r16, r28
    3de8:	0f 5d       	subi	r16, 0xDF	; 223
    3dea:	1f 4f       	sbci	r17, 0xFF	; 255
    3dec:	8d 2c       	mov	r8, r13
    3dee:	91 2c       	mov	r9, r1
    3df0:	a1 2c       	mov	r10, r1
    3df2:	b1 2c       	mov	r11, r1
    3df4:	a5 01       	movw	r20, r10
    3df6:	94 01       	movw	r18, r8
    3df8:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
    3dfc:	e6 2f       	mov	r30, r22
    3dfe:	62 2f       	mov	r22, r18
    3e00:	73 2f       	mov	r23, r19
    3e02:	84 2f       	mov	r24, r20
    3e04:	95 2f       	mov	r25, r21
    3e06:	01 50       	subi	r16, 0x01	; 1
    3e08:	11 09       	sbc	r17, r1
    3e0a:	ea 30       	cpi	r30, 0x0A	; 10
    3e0c:	10 f4       	brcc	.+4      	; 0x3e12 <_ZN5Print11printNumberEmh+0x6a>
    3e0e:	e0 5d       	subi	r30, 0xD0	; 208
    3e10:	01 c0       	rjmp	.+2      	; 0x3e14 <_ZN5Print11printNumberEmh+0x6c>
    3e12:	e9 5c       	subi	r30, 0xC9	; 201
    3e14:	d8 01       	movw	r26, r16
    3e16:	ec 93       	st	X, r30
    3e18:	61 15       	cp	r22, r1
    3e1a:	71 05       	cpc	r23, r1
    3e1c:	81 05       	cpc	r24, r1
    3e1e:	91 05       	cpc	r25, r1
    3e20:	29 f7       	brne	.-54     	; 0x3dec <_ZN5Print11printNumberEmh+0x44>
    3e22:	01 15       	cp	r16, r1
    3e24:	11 05       	cpc	r17, r1
    3e26:	91 f0       	breq	.+36     	; 0x3e4c <_ZN5Print11printNumberEmh+0xa4>
    3e28:	f8 01       	movw	r30, r16
    3e2a:	01 90       	ld	r0, Z+
    3e2c:	00 20       	and	r0, r0
    3e2e:	e9 f7       	brne	.-6      	; 0x3e2a <_ZN5Print11printNumberEmh+0x82>
    3e30:	31 97       	sbiw	r30, 0x01	; 1
    3e32:	af 01       	movw	r20, r30
    3e34:	40 1b       	sub	r20, r16
    3e36:	51 0b       	sbc	r21, r17
    3e38:	d7 01       	movw	r26, r14
    3e3a:	ed 91       	ld	r30, X+
    3e3c:	fc 91       	ld	r31, X
    3e3e:	02 80       	ldd	r0, Z+2	; 0x02
    3e40:	f3 81       	ldd	r31, Z+3	; 0x03
    3e42:	e0 2d       	mov	r30, r0
    3e44:	b8 01       	movw	r22, r16
    3e46:	c7 01       	movw	r24, r14
    3e48:	09 95       	icall
    3e4a:	02 c0       	rjmp	.+4      	; 0x3e50 <_ZN5Print11printNumberEmh+0xa8>
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	a1 96       	adiw	r28, 0x21	; 33
    3e52:	0f b6       	in	r0, 0x3f	; 63
    3e54:	f8 94       	cli
    3e56:	de bf       	out	0x3e, r29	; 62
    3e58:	0f be       	out	0x3f, r0	; 63
    3e5a:	cd bf       	out	0x3d, r28	; 61
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	1f 91       	pop	r17
    3e62:	0f 91       	pop	r16
    3e64:	ff 90       	pop	r15
    3e66:	ef 90       	pop	r14
    3e68:	df 90       	pop	r13
    3e6a:	bf 90       	pop	r11
    3e6c:	af 90       	pop	r10
    3e6e:	9f 90       	pop	r9
    3e70:	8f 90       	pop	r8
    3e72:	08 95       	ret

00003e74 <_ZN5Print5printEli>:
    3e74:	cf 92       	push	r12
    3e76:	df 92       	push	r13
    3e78:	ef 92       	push	r14
    3e7a:	ff 92       	push	r15
    3e7c:	0f 93       	push	r16
    3e7e:	1f 93       	push	r17
    3e80:	cf 93       	push	r28
    3e82:	df 93       	push	r29
    3e84:	ec 01       	movw	r28, r24
    3e86:	6a 01       	movw	r12, r20
    3e88:	7b 01       	movw	r14, r22
    3e8a:	21 15       	cp	r18, r1
    3e8c:	31 05       	cpc	r19, r1
    3e8e:	41 f4       	brne	.+16     	; 0x3ea0 <_ZN5Print5printEli+0x2c>
    3e90:	e8 81       	ld	r30, Y
    3e92:	f9 81       	ldd	r31, Y+1	; 0x01
    3e94:	01 90       	ld	r0, Z+
    3e96:	f0 81       	ld	r31, Z
    3e98:	e0 2d       	mov	r30, r0
    3e9a:	64 2f       	mov	r22, r20
    3e9c:	09 95       	icall
    3e9e:	1d c0       	rjmp	.+58     	; 0x3eda <_ZN5Print5printEli+0x66>
    3ea0:	2a 30       	cpi	r18, 0x0A	; 10
    3ea2:	31 05       	cpc	r19, r1
    3ea4:	c1 f4       	brne	.+48     	; 0x3ed6 <_ZN5Print5printEli+0x62>
    3ea6:	77 23       	and	r23, r23
    3ea8:	94 f4       	brge	.+36     	; 0x3ece <_ZN5Print5printEli+0x5a>
    3eaa:	6d e2       	ldi	r22, 0x2D	; 45
    3eac:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN5Print5printEc>
    3eb0:	8c 01       	movw	r16, r24
    3eb2:	44 27       	eor	r20, r20
    3eb4:	55 27       	eor	r21, r21
    3eb6:	ba 01       	movw	r22, r20
    3eb8:	4c 19       	sub	r20, r12
    3eba:	5d 09       	sbc	r21, r13
    3ebc:	6e 09       	sbc	r22, r14
    3ebe:	7f 09       	sbc	r23, r15
    3ec0:	2a e0       	ldi	r18, 0x0A	; 10
    3ec2:	ce 01       	movw	r24, r28
    3ec4:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN5Print11printNumberEmh>
    3ec8:	80 0f       	add	r24, r16
    3eca:	91 1f       	adc	r25, r17
    3ecc:	06 c0       	rjmp	.+12     	; 0x3eda <_ZN5Print5printEli+0x66>
    3ece:	2a e0       	ldi	r18, 0x0A	; 10
    3ed0:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN5Print11printNumberEmh>
    3ed4:	02 c0       	rjmp	.+4      	; 0x3eda <_ZN5Print5printEli+0x66>
    3ed6:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN5Print11printNumberEmh>
    3eda:	df 91       	pop	r29
    3edc:	cf 91       	pop	r28
    3ede:	1f 91       	pop	r17
    3ee0:	0f 91       	pop	r16
    3ee2:	ff 90       	pop	r15
    3ee4:	ef 90       	pop	r14
    3ee6:	df 90       	pop	r13
    3ee8:	cf 90       	pop	r12
    3eea:	08 95       	ret

00003eec <_ZN5Print5printEii>:
    3eec:	9a 01       	movw	r18, r20
    3eee:	ab 01       	movw	r20, r22
    3ef0:	77 0f       	add	r23, r23
    3ef2:	66 0b       	sbc	r22, r22
    3ef4:	77 0b       	sbc	r23, r23
    3ef6:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <_ZN5Print5printEli>
    3efa:	08 95       	ret

00003efc <_ZN5Print5printEmi>:
    3efc:	21 15       	cp	r18, r1
    3efe:	31 05       	cpc	r19, r1
    3f00:	49 f4       	brne	.+18     	; 0x3f14 <_ZN5Print5printEmi+0x18>
    3f02:	dc 01       	movw	r26, r24
    3f04:	ed 91       	ld	r30, X+
    3f06:	fc 91       	ld	r31, X
    3f08:	01 90       	ld	r0, Z+
    3f0a:	f0 81       	ld	r31, Z
    3f0c:	e0 2d       	mov	r30, r0
    3f0e:	64 2f       	mov	r22, r20
    3f10:	09 95       	icall
    3f12:	08 95       	ret
    3f14:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN5Print11printNumberEmh>
    3f18:	08 95       	ret

00003f1a <_ZN5Print5printEji>:
    3f1a:	9a 01       	movw	r18, r20
    3f1c:	ab 01       	movw	r20, r22
    3f1e:	60 e0       	ldi	r22, 0x00	; 0
    3f20:	70 e0       	ldi	r23, 0x00	; 0
    3f22:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <_ZN5Print5printEmi>
    3f26:	08 95       	ret

00003f28 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3f28:	0f 93       	push	r16
    3f2a:	1f 93       	push	r17
    3f2c:	cf 93       	push	r28
    3f2e:	df 93       	push	r29
    3f30:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3f32:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <_ZN5Print5printEmi>
    3f36:	8c 01       	movw	r16, r24
  n += println();
    3f38:	ce 01       	movw	r24, r28
    3f3a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN5Print7printlnEv>
  return n;
}
    3f3e:	80 0f       	add	r24, r16
    3f40:	91 1f       	adc	r25, r17
    3f42:	df 91       	pop	r29
    3f44:	cf 91       	pop	r28
    3f46:	1f 91       	pop	r17
    3f48:	0f 91       	pop	r16
    3f4a:	08 95       	ret

00003f4c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3f4c:	4f 92       	push	r4
    3f4e:	5f 92       	push	r5
    3f50:	6f 92       	push	r6
    3f52:	7f 92       	push	r7
    3f54:	8f 92       	push	r8
    3f56:	9f 92       	push	r9
    3f58:	af 92       	push	r10
    3f5a:	bf 92       	push	r11
    3f5c:	cf 92       	push	r12
    3f5e:	df 92       	push	r13
    3f60:	ef 92       	push	r14
    3f62:	ff 92       	push	r15
    3f64:	0f 93       	push	r16
    3f66:	1f 93       	push	r17
    3f68:	cf 93       	push	r28
    3f6a:	df 93       	push	r29
    3f6c:	8c 01       	movw	r16, r24
    3f6e:	4a 01       	movw	r8, r20
    3f70:	5b 01       	movw	r10, r22
    3f72:	f2 2e       	mov	r15, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3f74:	9a 01       	movw	r18, r20
    3f76:	ab 01       	movw	r20, r22
    3f78:	c5 01       	movw	r24, r10
    3f7a:	b4 01       	movw	r22, r8
    3f7c:	0e 94 17 22 	call	0x442e	; 0x442e <__unordsf2>
    3f80:	88 23       	and	r24, r24
    3f82:	31 f0       	breq	.+12     	; 0x3f90 <_ZN5Print10printFloatEdh+0x44>
    3f84:	6f eb       	ldi	r22, 0xBF	; 191
    3f86:	71 e0       	ldi	r23, 0x01	; 1
    3f88:	c8 01       	movw	r24, r16
    3f8a:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
    3f8e:	b5 c0       	rjmp	.+362    	; 0x40fa <_ZN5Print10printFloatEdh+0x1ae>
  if (isinf(number)) return print("inf");
    3f90:	24 01       	movw	r4, r8
    3f92:	35 01       	movw	r6, r10
    3f94:	e8 94       	clt
    3f96:	77 f8       	bld	r7, 7
    3f98:	2f ef       	ldi	r18, 0xFF	; 255
    3f9a:	3f ef       	ldi	r19, 0xFF	; 255
    3f9c:	4f e7       	ldi	r20, 0x7F	; 127
    3f9e:	5f e7       	ldi	r21, 0x7F	; 127
    3fa0:	c3 01       	movw	r24, r6
    3fa2:	b2 01       	movw	r22, r4
    3fa4:	0e 94 17 22 	call	0x442e	; 0x442e <__unordsf2>
    3fa8:	81 11       	cpse	r24, r1
    3faa:	10 c0       	rjmp	.+32     	; 0x3fcc <_ZN5Print10printFloatEdh+0x80>
    3fac:	2f ef       	ldi	r18, 0xFF	; 255
    3fae:	3f ef       	ldi	r19, 0xFF	; 255
    3fb0:	4f e7       	ldi	r20, 0x7F	; 127
    3fb2:	5f e7       	ldi	r21, 0x7F	; 127
    3fb4:	c3 01       	movw	r24, r6
    3fb6:	b2 01       	movw	r22, r4
    3fb8:	0e 94 10 21 	call	0x4220	; 0x4220 <__cmpsf2>
    3fbc:	18 16       	cp	r1, r24
    3fbe:	34 f4       	brge	.+12     	; 0x3fcc <_ZN5Print10printFloatEdh+0x80>
    3fc0:	63 ec       	ldi	r22, 0xC3	; 195
    3fc2:	71 e0       	ldi	r23, 0x01	; 1
    3fc4:	c8 01       	movw	r24, r16
    3fc6:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
    3fca:	97 c0       	rjmp	.+302    	; 0x40fa <_ZN5Print10printFloatEdh+0x1ae>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3fcc:	2f ef       	ldi	r18, 0xFF	; 255
    3fce:	3f ef       	ldi	r19, 0xFF	; 255
    3fd0:	4f e7       	ldi	r20, 0x7F	; 127
    3fd2:	5f e4       	ldi	r21, 0x4F	; 79
    3fd4:	c5 01       	movw	r24, r10
    3fd6:	b4 01       	movw	r22, r8
    3fd8:	0e 94 a5 21 	call	0x434a	; 0x434a <__gesf2>
    3fdc:	18 16       	cp	r1, r24
    3fde:	34 f4       	brge	.+12     	; 0x3fec <_ZN5Print10printFloatEdh+0xa0>
    3fe0:	67 ec       	ldi	r22, 0xC7	; 199
    3fe2:	71 e0       	ldi	r23, 0x01	; 1
    3fe4:	c8 01       	movw	r24, r16
    3fe6:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
    3fea:	87 c0       	rjmp	.+270    	; 0x40fa <_ZN5Print10printFloatEdh+0x1ae>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3fec:	2f ef       	ldi	r18, 0xFF	; 255
    3fee:	3f ef       	ldi	r19, 0xFF	; 255
    3ff0:	4f e7       	ldi	r20, 0x7F	; 127
    3ff2:	5f ec       	ldi	r21, 0xCF	; 207
    3ff4:	c5 01       	movw	r24, r10
    3ff6:	b4 01       	movw	r22, r8
    3ff8:	0e 94 10 21 	call	0x4220	; 0x4220 <__cmpsf2>
    3ffc:	88 23       	and	r24, r24
    3ffe:	34 f4       	brge	.+12     	; 0x400c <_ZN5Print10printFloatEdh+0xc0>
    4000:	67 ec       	ldi	r22, 0xC7	; 199
    4002:	71 e0       	ldi	r23, 0x01	; 1
    4004:	c8 01       	movw	r24, r16
    4006:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN5Print5printEPKc>
    400a:	77 c0       	rjmp	.+238    	; 0x40fa <_ZN5Print10printFloatEdh+0x1ae>
  
  // Handle negative numbers
  if (number < 0.0)
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	a9 01       	movw	r20, r18
    4012:	c5 01       	movw	r24, r10
    4014:	b4 01       	movw	r22, r8
    4016:	0e 94 10 21 	call	0x4220	; 0x4220 <__cmpsf2>
    401a:	88 23       	and	r24, r24
    401c:	54 f4       	brge	.+20     	; 0x4032 <_ZN5Print10printFloatEdh+0xe6>
  {
     n += print('-');
    401e:	6d e2       	ldi	r22, 0x2D	; 45
    4020:	c8 01       	movw	r24, r16
    4022:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN5Print5printEc>
    4026:	6c 01       	movw	r12, r24
     number = -number;
    4028:	b7 fa       	bst	r11, 7
    402a:	b0 94       	com	r11
    402c:	b7 f8       	bld	r11, 7
    402e:	b0 94       	com	r11
    4030:	02 c0       	rjmp	.+4      	; 0x4036 <_ZN5Print10printFloatEdh+0xea>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    4032:	c1 2c       	mov	r12, r1
    4034:	d1 2c       	mov	r13, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4036:	d0 e0       	ldi	r29, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	70 e0       	ldi	r23, 0x00	; 0
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    4040:	df 15       	cp	r29, r15
    4042:	40 f4       	brcc	.+16     	; 0x4054 <_ZN5Print10printFloatEdh+0x108>
    rounding /= 10.0;
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	40 e2       	ldi	r20, 0x20	; 32
    404a:	51 e4       	ldi	r21, 0x41	; 65
    404c:	0e 94 c2 12 	call	0x2584	; 0x2584 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4050:	df 5f       	subi	r29, 0xFF	; 255
    4052:	f6 cf       	rjmp	.-20     	; 0x4040 <_ZN5Print10printFloatEdh+0xf4>
    rounding /= 10.0;
  
  number += rounding;
    4054:	9b 01       	movw	r18, r22
    4056:	ac 01       	movw	r20, r24
    4058:	c5 01       	movw	r24, r10
    405a:	b4 01       	movw	r22, r8
    405c:	0e 94 a4 20 	call	0x4148	; 0x4148 <__addsf3>
    4060:	4b 01       	movw	r8, r22
    4062:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4064:	0e 94 15 21 	call	0x422a	; 0x422a <__fixunssfsi>
    4068:	2b 01       	movw	r4, r22
    406a:	3c 01       	movw	r6, r24
  double remainder = number - (double)int_part;
    406c:	0e 94 44 21 	call	0x4288	; 0x4288 <__floatunsisf>
    4070:	9b 01       	movw	r18, r22
    4072:	ac 01       	movw	r20, r24
    4074:	c5 01       	movw	r24, r10
    4076:	b4 01       	movw	r22, r8
    4078:	0e 94 a3 20 	call	0x4146	; 0x4146 <__subsf3>
    407c:	4b 01       	movw	r8, r22
    407e:	5c 01       	movw	r10, r24
  n += print(int_part);
    4080:	2a e0       	ldi	r18, 0x0A	; 10
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	b3 01       	movw	r22, r6
    4086:	a2 01       	movw	r20, r4
    4088:	c8 01       	movw	r24, r16
    408a:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <_ZN5Print5printEmi>
    408e:	e6 01       	movw	r28, r12
    4090:	c8 0f       	add	r28, r24
    4092:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4094:	ff 20       	and	r15, r15
    4096:	31 f0       	breq	.+12     	; 0x40a4 <_ZN5Print10printFloatEdh+0x158>
    n += print('.'); 
    4098:	6e e2       	ldi	r22, 0x2E	; 46
    409a:	c8 01       	movw	r24, r16
    409c:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN5Print5printEc>
    40a0:	c8 0f       	add	r28, r24
    40a2:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    40a4:	77 24       	eor	r7, r7
    40a6:	7a 94       	dec	r7
    40a8:	7f 0c       	add	r7, r15
    40aa:	ff 20       	and	r15, r15
    40ac:	21 f1       	breq	.+72     	; 0x40f6 <_ZN5Print10printFloatEdh+0x1aa>
  {
    remainder *= 10.0;
    40ae:	20 e0       	ldi	r18, 0x00	; 0
    40b0:	30 e0       	ldi	r19, 0x00	; 0
    40b2:	40 e2       	ldi	r20, 0x20	; 32
    40b4:	51 e4       	ldi	r21, 0x41	; 65
    40b6:	c5 01       	movw	r24, r10
    40b8:	b4 01       	movw	r22, r8
    40ba:	0e 94 aa 21 	call	0x4354	; 0x4354 <__mulsf3>
    40be:	4b 01       	movw	r8, r22
    40c0:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    40c2:	0e 94 15 21 	call	0x422a	; 0x422a <__fixunssfsi>
    40c6:	6b 01       	movw	r12, r22
    40c8:	7c 01       	movw	r14, r24
    n += print(toPrint);
    40ca:	4a e0       	ldi	r20, 0x0A	; 10
    40cc:	50 e0       	ldi	r21, 0x00	; 0
    40ce:	c8 01       	movw	r24, r16
    40d0:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN5Print5printEji>
    40d4:	c8 0f       	add	r28, r24
    40d6:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    40d8:	b6 01       	movw	r22, r12
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	0e 94 44 21 	call	0x4288	; 0x4288 <__floatunsisf>
    40e2:	9b 01       	movw	r18, r22
    40e4:	ac 01       	movw	r20, r24
    40e6:	c5 01       	movw	r24, r10
    40e8:	b4 01       	movw	r22, r8
    40ea:	0e 94 a3 20 	call	0x4146	; 0x4146 <__subsf3>
    40ee:	4b 01       	movw	r8, r22
    40f0:	5c 01       	movw	r10, r24
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    40f2:	f7 2c       	mov	r15, r7
    40f4:	d7 cf       	rjmp	.-82     	; 0x40a4 <_ZN5Print10printFloatEdh+0x158>
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    40f6:	8c 2f       	mov	r24, r28
    40f8:	9d 2f       	mov	r25, r29
}
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	1f 91       	pop	r17
    4100:	0f 91       	pop	r16
    4102:	ff 90       	pop	r15
    4104:	ef 90       	pop	r14
    4106:	df 90       	pop	r13
    4108:	cf 90       	pop	r12
    410a:	bf 90       	pop	r11
    410c:	af 90       	pop	r10
    410e:	9f 90       	pop	r9
    4110:	8f 90       	pop	r8
    4112:	7f 90       	pop	r7
    4114:	6f 90       	pop	r6
    4116:	5f 90       	pop	r5
    4118:	4f 90       	pop	r4
    411a:	08 95       	ret

0000411c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    411c:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN5Print10printFloatEdh>
}
    4120:	08 95       	ret

00004122 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	ec 01       	movw	r28, r24
  size_t n = print(num, digits);
    412c:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN5Print5printEdi>
    4130:	8c 01       	movw	r16, r24
  n += println();
    4132:	ce 01       	movw	r24, r28
    4134:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN5Print7printlnEv>
  return n;
}
    4138:	80 0f       	add	r24, r16
    413a:	91 1f       	adc	r25, r17
    413c:	df 91       	pop	r29
    413e:	cf 91       	pop	r28
    4140:	1f 91       	pop	r17
    4142:	0f 91       	pop	r16
    4144:	08 95       	ret

00004146 <__subsf3>:
    4146:	50 58       	subi	r21, 0x80	; 128

00004148 <__addsf3>:
    4148:	bb 27       	eor	r27, r27
    414a:	aa 27       	eor	r26, r26
    414c:	0e 94 bb 20 	call	0x4176	; 0x4176 <__addsf3x>
    4150:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__fp_round>
    4154:	0e 94 3d 13 	call	0x267a	; 0x267a <__fp_pscA>
    4158:	38 f0       	brcs	.+14     	; 0x4168 <__addsf3+0x20>
    415a:	0e 94 44 13 	call	0x2688	; 0x2688 <__fp_pscB>
    415e:	20 f0       	brcs	.+8      	; 0x4168 <__addsf3+0x20>
    4160:	39 f4       	brne	.+14     	; 0x4170 <__addsf3+0x28>
    4162:	9f 3f       	cpi	r25, 0xFF	; 255
    4164:	19 f4       	brne	.+6      	; 0x416c <__addsf3+0x24>
    4166:	26 f4       	brtc	.+8      	; 0x4170 <__addsf3+0x28>
    4168:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_nan>
    416c:	0e f4       	brtc	.+2      	; 0x4170 <__addsf3+0x28>
    416e:	e0 95       	com	r30
    4170:	e7 fb       	bst	r30, 7
    4172:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_inf>

00004176 <__addsf3x>:
    4176:	e9 2f       	mov	r30, r25
    4178:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__fp_split3>
    417c:	58 f3       	brcs	.-42     	; 0x4154 <__addsf3+0xc>
    417e:	ba 17       	cp	r27, r26
    4180:	62 07       	cpc	r22, r18
    4182:	73 07       	cpc	r23, r19
    4184:	84 07       	cpc	r24, r20
    4186:	95 07       	cpc	r25, r21
    4188:	20 f0       	brcs	.+8      	; 0x4192 <__addsf3x+0x1c>
    418a:	79 f4       	brne	.+30     	; 0x41aa <__addsf3x+0x34>
    418c:	a6 f5       	brtc	.+104    	; 0x41f6 <__addsf3x+0x80>
    418e:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__fp_zero>
    4192:	0e f4       	brtc	.+2      	; 0x4196 <__addsf3x+0x20>
    4194:	e0 95       	com	r30
    4196:	0b 2e       	mov	r0, r27
    4198:	ba 2f       	mov	r27, r26
    419a:	a0 2d       	mov	r26, r0
    419c:	0b 01       	movw	r0, r22
    419e:	b9 01       	movw	r22, r18
    41a0:	90 01       	movw	r18, r0
    41a2:	0c 01       	movw	r0, r24
    41a4:	ca 01       	movw	r24, r20
    41a6:	a0 01       	movw	r20, r0
    41a8:	11 24       	eor	r1, r1
    41aa:	ff 27       	eor	r31, r31
    41ac:	59 1b       	sub	r21, r25
    41ae:	99 f0       	breq	.+38     	; 0x41d6 <__addsf3x+0x60>
    41b0:	59 3f       	cpi	r21, 0xF9	; 249
    41b2:	50 f4       	brcc	.+20     	; 0x41c8 <__addsf3x+0x52>
    41b4:	50 3e       	cpi	r21, 0xE0	; 224
    41b6:	68 f1       	brcs	.+90     	; 0x4212 <__addsf3x+0x9c>
    41b8:	1a 16       	cp	r1, r26
    41ba:	f0 40       	sbci	r31, 0x00	; 0
    41bc:	a2 2f       	mov	r26, r18
    41be:	23 2f       	mov	r18, r19
    41c0:	34 2f       	mov	r19, r20
    41c2:	44 27       	eor	r20, r20
    41c4:	58 5f       	subi	r21, 0xF8	; 248
    41c6:	f3 cf       	rjmp	.-26     	; 0x41ae <__addsf3x+0x38>
    41c8:	46 95       	lsr	r20
    41ca:	37 95       	ror	r19
    41cc:	27 95       	ror	r18
    41ce:	a7 95       	ror	r26
    41d0:	f0 40       	sbci	r31, 0x00	; 0
    41d2:	53 95       	inc	r21
    41d4:	c9 f7       	brne	.-14     	; 0x41c8 <__addsf3x+0x52>
    41d6:	7e f4       	brtc	.+30     	; 0x41f6 <__addsf3x+0x80>
    41d8:	1f 16       	cp	r1, r31
    41da:	ba 0b       	sbc	r27, r26
    41dc:	62 0b       	sbc	r22, r18
    41de:	73 0b       	sbc	r23, r19
    41e0:	84 0b       	sbc	r24, r20
    41e2:	ba f0       	brmi	.+46     	; 0x4212 <__addsf3x+0x9c>
    41e4:	91 50       	subi	r25, 0x01	; 1
    41e6:	a1 f0       	breq	.+40     	; 0x4210 <__addsf3x+0x9a>
    41e8:	ff 0f       	add	r31, r31
    41ea:	bb 1f       	adc	r27, r27
    41ec:	66 1f       	adc	r22, r22
    41ee:	77 1f       	adc	r23, r23
    41f0:	88 1f       	adc	r24, r24
    41f2:	c2 f7       	brpl	.-16     	; 0x41e4 <__addsf3x+0x6e>
    41f4:	0e c0       	rjmp	.+28     	; 0x4212 <__addsf3x+0x9c>
    41f6:	ba 0f       	add	r27, r26
    41f8:	62 1f       	adc	r22, r18
    41fa:	73 1f       	adc	r23, r19
    41fc:	84 1f       	adc	r24, r20
    41fe:	48 f4       	brcc	.+18     	; 0x4212 <__addsf3x+0x9c>
    4200:	87 95       	ror	r24
    4202:	77 95       	ror	r23
    4204:	67 95       	ror	r22
    4206:	b7 95       	ror	r27
    4208:	f7 95       	ror	r31
    420a:	9e 3f       	cpi	r25, 0xFE	; 254
    420c:	08 f0       	brcs	.+2      	; 0x4210 <__addsf3x+0x9a>
    420e:	b0 cf       	rjmp	.-160    	; 0x4170 <__addsf3+0x28>
    4210:	93 95       	inc	r25
    4212:	88 0f       	add	r24, r24
    4214:	08 f0       	brcs	.+2      	; 0x4218 <__addsf3x+0xa2>
    4216:	99 27       	eor	r25, r25
    4218:	ee 0f       	add	r30, r30
    421a:	97 95       	ror	r25
    421c:	87 95       	ror	r24
    421e:	08 95       	ret

00004220 <__cmpsf2>:
    4220:	0e 94 81 21 	call	0x4302	; 0x4302 <__fp_cmp>
    4224:	08 f4       	brcc	.+2      	; 0x4228 <__cmpsf2+0x8>
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	08 95       	ret

0000422a <__fixunssfsi>:
    422a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__fp_splitA>
    422e:	88 f0       	brcs	.+34     	; 0x4252 <__fixunssfsi+0x28>
    4230:	9f 57       	subi	r25, 0x7F	; 127
    4232:	98 f0       	brcs	.+38     	; 0x425a <__fixunssfsi+0x30>
    4234:	b9 2f       	mov	r27, r25
    4236:	99 27       	eor	r25, r25
    4238:	b7 51       	subi	r27, 0x17	; 23
    423a:	b0 f0       	brcs	.+44     	; 0x4268 <__fixunssfsi+0x3e>
    423c:	e1 f0       	breq	.+56     	; 0x4276 <__fixunssfsi+0x4c>
    423e:	66 0f       	add	r22, r22
    4240:	77 1f       	adc	r23, r23
    4242:	88 1f       	adc	r24, r24
    4244:	99 1f       	adc	r25, r25
    4246:	1a f0       	brmi	.+6      	; 0x424e <__fixunssfsi+0x24>
    4248:	ba 95       	dec	r27
    424a:	c9 f7       	brne	.-14     	; 0x423e <__fixunssfsi+0x14>
    424c:	14 c0       	rjmp	.+40     	; 0x4276 <__fixunssfsi+0x4c>
    424e:	b1 30       	cpi	r27, 0x01	; 1
    4250:	91 f0       	breq	.+36     	; 0x4276 <__fixunssfsi+0x4c>
    4252:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__fp_zero>
    4256:	b1 e0       	ldi	r27, 0x01	; 1
    4258:	08 95       	ret
    425a:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__fp_zero>
    425e:	67 2f       	mov	r22, r23
    4260:	78 2f       	mov	r23, r24
    4262:	88 27       	eor	r24, r24
    4264:	b8 5f       	subi	r27, 0xF8	; 248
    4266:	39 f0       	breq	.+14     	; 0x4276 <__fixunssfsi+0x4c>
    4268:	b9 3f       	cpi	r27, 0xF9	; 249
    426a:	cc f3       	brlt	.-14     	; 0x425e <__fixunssfsi+0x34>
    426c:	86 95       	lsr	r24
    426e:	77 95       	ror	r23
    4270:	67 95       	ror	r22
    4272:	b3 95       	inc	r27
    4274:	d9 f7       	brne	.-10     	; 0x426c <__fixunssfsi+0x42>
    4276:	3e f4       	brtc	.+14     	; 0x4286 <__fixunssfsi+0x5c>
    4278:	90 95       	com	r25
    427a:	80 95       	com	r24
    427c:	70 95       	com	r23
    427e:	61 95       	neg	r22
    4280:	7f 4f       	sbci	r23, 0xFF	; 255
    4282:	8f 4f       	sbci	r24, 0xFF	; 255
    4284:	9f 4f       	sbci	r25, 0xFF	; 255
    4286:	08 95       	ret

00004288 <__floatunsisf>:
    4288:	e8 94       	clt
    428a:	09 c0       	rjmp	.+18     	; 0x429e <__floatsisf+0x12>

0000428c <__floatsisf>:
    428c:	97 fb       	bst	r25, 7
    428e:	3e f4       	brtc	.+14     	; 0x429e <__floatsisf+0x12>
    4290:	90 95       	com	r25
    4292:	80 95       	com	r24
    4294:	70 95       	com	r23
    4296:	61 95       	neg	r22
    4298:	7f 4f       	sbci	r23, 0xFF	; 255
    429a:	8f 4f       	sbci	r24, 0xFF	; 255
    429c:	9f 4f       	sbci	r25, 0xFF	; 255
    429e:	99 23       	and	r25, r25
    42a0:	a9 f0       	breq	.+42     	; 0x42cc <__floatsisf+0x40>
    42a2:	f9 2f       	mov	r31, r25
    42a4:	96 e9       	ldi	r25, 0x96	; 150
    42a6:	bb 27       	eor	r27, r27
    42a8:	93 95       	inc	r25
    42aa:	f6 95       	lsr	r31
    42ac:	87 95       	ror	r24
    42ae:	77 95       	ror	r23
    42b0:	67 95       	ror	r22
    42b2:	b7 95       	ror	r27
    42b4:	f1 11       	cpse	r31, r1
    42b6:	f8 cf       	rjmp	.-16     	; 0x42a8 <__floatsisf+0x1c>
    42b8:	fa f4       	brpl	.+62     	; 0x42f8 <__floatsisf+0x6c>
    42ba:	bb 0f       	add	r27, r27
    42bc:	11 f4       	brne	.+4      	; 0x42c2 <__floatsisf+0x36>
    42be:	60 ff       	sbrs	r22, 0
    42c0:	1b c0       	rjmp	.+54     	; 0x42f8 <__floatsisf+0x6c>
    42c2:	6f 5f       	subi	r22, 0xFF	; 255
    42c4:	7f 4f       	sbci	r23, 0xFF	; 255
    42c6:	8f 4f       	sbci	r24, 0xFF	; 255
    42c8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ca:	16 c0       	rjmp	.+44     	; 0x42f8 <__floatsisf+0x6c>
    42cc:	88 23       	and	r24, r24
    42ce:	11 f0       	breq	.+4      	; 0x42d4 <__floatsisf+0x48>
    42d0:	96 e9       	ldi	r25, 0x96	; 150
    42d2:	11 c0       	rjmp	.+34     	; 0x42f6 <__floatsisf+0x6a>
    42d4:	77 23       	and	r23, r23
    42d6:	21 f0       	breq	.+8      	; 0x42e0 <__floatsisf+0x54>
    42d8:	9e e8       	ldi	r25, 0x8E	; 142
    42da:	87 2f       	mov	r24, r23
    42dc:	76 2f       	mov	r23, r22
    42de:	05 c0       	rjmp	.+10     	; 0x42ea <__floatsisf+0x5e>
    42e0:	66 23       	and	r22, r22
    42e2:	71 f0       	breq	.+28     	; 0x4300 <__floatsisf+0x74>
    42e4:	96 e8       	ldi	r25, 0x86	; 134
    42e6:	86 2f       	mov	r24, r22
    42e8:	70 e0       	ldi	r23, 0x00	; 0
    42ea:	60 e0       	ldi	r22, 0x00	; 0
    42ec:	2a f0       	brmi	.+10     	; 0x42f8 <__floatsisf+0x6c>
    42ee:	9a 95       	dec	r25
    42f0:	66 0f       	add	r22, r22
    42f2:	77 1f       	adc	r23, r23
    42f4:	88 1f       	adc	r24, r24
    42f6:	da f7       	brpl	.-10     	; 0x42ee <__floatsisf+0x62>
    42f8:	88 0f       	add	r24, r24
    42fa:	96 95       	lsr	r25
    42fc:	87 95       	ror	r24
    42fe:	97 f9       	bld	r25, 7
    4300:	08 95       	ret

00004302 <__fp_cmp>:
    4302:	99 0f       	add	r25, r25
    4304:	00 08       	sbc	r0, r0
    4306:	55 0f       	add	r21, r21
    4308:	aa 0b       	sbc	r26, r26
    430a:	e0 e8       	ldi	r30, 0x80	; 128
    430c:	fe ef       	ldi	r31, 0xFE	; 254
    430e:	16 16       	cp	r1, r22
    4310:	17 06       	cpc	r1, r23
    4312:	e8 07       	cpc	r30, r24
    4314:	f9 07       	cpc	r31, r25
    4316:	c0 f0       	brcs	.+48     	; 0x4348 <__fp_cmp+0x46>
    4318:	12 16       	cp	r1, r18
    431a:	13 06       	cpc	r1, r19
    431c:	e4 07       	cpc	r30, r20
    431e:	f5 07       	cpc	r31, r21
    4320:	98 f0       	brcs	.+38     	; 0x4348 <__fp_cmp+0x46>
    4322:	62 1b       	sub	r22, r18
    4324:	73 0b       	sbc	r23, r19
    4326:	84 0b       	sbc	r24, r20
    4328:	95 0b       	sbc	r25, r21
    432a:	39 f4       	brne	.+14     	; 0x433a <__fp_cmp+0x38>
    432c:	0a 26       	eor	r0, r26
    432e:	61 f0       	breq	.+24     	; 0x4348 <__fp_cmp+0x46>
    4330:	23 2b       	or	r18, r19
    4332:	24 2b       	or	r18, r20
    4334:	25 2b       	or	r18, r21
    4336:	21 f4       	brne	.+8      	; 0x4340 <__fp_cmp+0x3e>
    4338:	08 95       	ret
    433a:	0a 26       	eor	r0, r26
    433c:	09 f4       	brne	.+2      	; 0x4340 <__fp_cmp+0x3e>
    433e:	a1 40       	sbci	r26, 0x01	; 1
    4340:	a6 95       	lsr	r26
    4342:	8f ef       	ldi	r24, 0xFF	; 255
    4344:	81 1d       	adc	r24, r1
    4346:	81 1d       	adc	r24, r1
    4348:	08 95       	ret

0000434a <__gesf2>:
    434a:	0e 94 81 21 	call	0x4302	; 0x4302 <__fp_cmp>
    434e:	08 f4       	brcc	.+2      	; 0x4352 <__gesf2+0x8>
    4350:	8f ef       	ldi	r24, 0xFF	; 255
    4352:	08 95       	ret

00004354 <__mulsf3>:
    4354:	0e 94 bd 21 	call	0x437a	; 0x437a <__mulsf3x>
    4358:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__fp_round>
    435c:	0e 94 3d 13 	call	0x267a	; 0x267a <__fp_pscA>
    4360:	38 f0       	brcs	.+14     	; 0x4370 <__mulsf3+0x1c>
    4362:	0e 94 44 13 	call	0x2688	; 0x2688 <__fp_pscB>
    4366:	20 f0       	brcs	.+8      	; 0x4370 <__mulsf3+0x1c>
    4368:	95 23       	and	r25, r21
    436a:	11 f0       	breq	.+4      	; 0x4370 <__mulsf3+0x1c>
    436c:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_inf>
    4370:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_nan>
    4374:	11 24       	eor	r1, r1
    4376:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__fp_szero>

0000437a <__mulsf3x>:
    437a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__fp_split3>
    437e:	70 f3       	brcs	.-36     	; 0x435c <__mulsf3+0x8>

00004380 <__mulsf3_pse>:
    4380:	95 9f       	mul	r25, r21
    4382:	c1 f3       	breq	.-16     	; 0x4374 <__mulsf3+0x20>
    4384:	95 0f       	add	r25, r21
    4386:	50 e0       	ldi	r21, 0x00	; 0
    4388:	55 1f       	adc	r21, r21
    438a:	62 9f       	mul	r22, r18
    438c:	f0 01       	movw	r30, r0
    438e:	72 9f       	mul	r23, r18
    4390:	bb 27       	eor	r27, r27
    4392:	f0 0d       	add	r31, r0
    4394:	b1 1d       	adc	r27, r1
    4396:	63 9f       	mul	r22, r19
    4398:	aa 27       	eor	r26, r26
    439a:	f0 0d       	add	r31, r0
    439c:	b1 1d       	adc	r27, r1
    439e:	aa 1f       	adc	r26, r26
    43a0:	64 9f       	mul	r22, r20
    43a2:	66 27       	eor	r22, r22
    43a4:	b0 0d       	add	r27, r0
    43a6:	a1 1d       	adc	r26, r1
    43a8:	66 1f       	adc	r22, r22
    43aa:	82 9f       	mul	r24, r18
    43ac:	22 27       	eor	r18, r18
    43ae:	b0 0d       	add	r27, r0
    43b0:	a1 1d       	adc	r26, r1
    43b2:	62 1f       	adc	r22, r18
    43b4:	73 9f       	mul	r23, r19
    43b6:	b0 0d       	add	r27, r0
    43b8:	a1 1d       	adc	r26, r1
    43ba:	62 1f       	adc	r22, r18
    43bc:	83 9f       	mul	r24, r19
    43be:	a0 0d       	add	r26, r0
    43c0:	61 1d       	adc	r22, r1
    43c2:	22 1f       	adc	r18, r18
    43c4:	74 9f       	mul	r23, r20
    43c6:	33 27       	eor	r19, r19
    43c8:	a0 0d       	add	r26, r0
    43ca:	61 1d       	adc	r22, r1
    43cc:	23 1f       	adc	r18, r19
    43ce:	84 9f       	mul	r24, r20
    43d0:	60 0d       	add	r22, r0
    43d2:	21 1d       	adc	r18, r1
    43d4:	82 2f       	mov	r24, r18
    43d6:	76 2f       	mov	r23, r22
    43d8:	6a 2f       	mov	r22, r26
    43da:	11 24       	eor	r1, r1
    43dc:	9f 57       	subi	r25, 0x7F	; 127
    43de:	50 40       	sbci	r21, 0x00	; 0
    43e0:	9a f0       	brmi	.+38     	; 0x4408 <__mulsf3_pse+0x88>
    43e2:	f1 f0       	breq	.+60     	; 0x4420 <__mulsf3_pse+0xa0>
    43e4:	88 23       	and	r24, r24
    43e6:	4a f0       	brmi	.+18     	; 0x43fa <__mulsf3_pse+0x7a>
    43e8:	ee 0f       	add	r30, r30
    43ea:	ff 1f       	adc	r31, r31
    43ec:	bb 1f       	adc	r27, r27
    43ee:	66 1f       	adc	r22, r22
    43f0:	77 1f       	adc	r23, r23
    43f2:	88 1f       	adc	r24, r24
    43f4:	91 50       	subi	r25, 0x01	; 1
    43f6:	50 40       	sbci	r21, 0x00	; 0
    43f8:	a9 f7       	brne	.-22     	; 0x43e4 <__mulsf3_pse+0x64>
    43fa:	9e 3f       	cpi	r25, 0xFE	; 254
    43fc:	51 05       	cpc	r21, r1
    43fe:	80 f0       	brcs	.+32     	; 0x4420 <__mulsf3_pse+0xa0>
    4400:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_inf>
    4404:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__fp_szero>
    4408:	5f 3f       	cpi	r21, 0xFF	; 255
    440a:	e4 f3       	brlt	.-8      	; 0x4404 <__mulsf3_pse+0x84>
    440c:	98 3e       	cpi	r25, 0xE8	; 232
    440e:	d4 f3       	brlt	.-12     	; 0x4404 <__mulsf3_pse+0x84>
    4410:	86 95       	lsr	r24
    4412:	77 95       	ror	r23
    4414:	67 95       	ror	r22
    4416:	b7 95       	ror	r27
    4418:	f7 95       	ror	r31
    441a:	e7 95       	ror	r30
    441c:	9f 5f       	subi	r25, 0xFF	; 255
    441e:	c1 f7       	brne	.-16     	; 0x4410 <__mulsf3_pse+0x90>
    4420:	fe 2b       	or	r31, r30
    4422:	88 0f       	add	r24, r24
    4424:	91 1d       	adc	r25, r1
    4426:	96 95       	lsr	r25
    4428:	87 95       	ror	r24
    442a:	97 f9       	bld	r25, 7
    442c:	08 95       	ret

0000442e <__unordsf2>:
    442e:	0e 94 81 21 	call	0x4302	; 0x4302 <__fp_cmp>
    4432:	88 0b       	sbc	r24, r24
    4434:	99 0b       	sbc	r25, r25
    4436:	08 95       	ret

00004438 <__mulsi3>:
    4438:	db 01       	movw	r26, r22
    443a:	8f 93       	push	r24
    443c:	9f 93       	push	r25
    443e:	0e 94 4e 22 	call	0x449c	; 0x449c <__muluhisi3>
    4442:	bf 91       	pop	r27
    4444:	af 91       	pop	r26
    4446:	a2 9f       	mul	r26, r18
    4448:	80 0d       	add	r24, r0
    444a:	91 1d       	adc	r25, r1
    444c:	a3 9f       	mul	r26, r19
    444e:	90 0d       	add	r25, r0
    4450:	b2 9f       	mul	r27, r18
    4452:	90 0d       	add	r25, r0
    4454:	11 24       	eor	r1, r1
    4456:	08 95       	ret

00004458 <__udivmodsi4>:
    4458:	a1 e2       	ldi	r26, 0x21	; 33
    445a:	1a 2e       	mov	r1, r26
    445c:	aa 1b       	sub	r26, r26
    445e:	bb 1b       	sub	r27, r27
    4460:	fd 01       	movw	r30, r26
    4462:	0d c0       	rjmp	.+26     	; 0x447e <__udivmodsi4_ep>

00004464 <__udivmodsi4_loop>:
    4464:	aa 1f       	adc	r26, r26
    4466:	bb 1f       	adc	r27, r27
    4468:	ee 1f       	adc	r30, r30
    446a:	ff 1f       	adc	r31, r31
    446c:	a2 17       	cp	r26, r18
    446e:	b3 07       	cpc	r27, r19
    4470:	e4 07       	cpc	r30, r20
    4472:	f5 07       	cpc	r31, r21
    4474:	20 f0       	brcs	.+8      	; 0x447e <__udivmodsi4_ep>
    4476:	a2 1b       	sub	r26, r18
    4478:	b3 0b       	sbc	r27, r19
    447a:	e4 0b       	sbc	r30, r20
    447c:	f5 0b       	sbc	r31, r21

0000447e <__udivmodsi4_ep>:
    447e:	66 1f       	adc	r22, r22
    4480:	77 1f       	adc	r23, r23
    4482:	88 1f       	adc	r24, r24
    4484:	99 1f       	adc	r25, r25
    4486:	1a 94       	dec	r1
    4488:	69 f7       	brne	.-38     	; 0x4464 <__udivmodsi4_loop>
    448a:	60 95       	com	r22
    448c:	70 95       	com	r23
    448e:	80 95       	com	r24
    4490:	90 95       	com	r25
    4492:	9b 01       	movw	r18, r22
    4494:	ac 01       	movw	r20, r24
    4496:	bd 01       	movw	r22, r26
    4498:	cf 01       	movw	r24, r30
    449a:	08 95       	ret

0000449c <__muluhisi3>:
    449c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__umulhisi3>
    44a0:	a5 9f       	mul	r26, r21
    44a2:	90 0d       	add	r25, r0
    44a4:	b4 9f       	mul	r27, r20
    44a6:	90 0d       	add	r25, r0
    44a8:	a4 9f       	mul	r26, r20
    44aa:	80 0d       	add	r24, r0
    44ac:	91 1d       	adc	r25, r1
    44ae:	11 24       	eor	r1, r1
    44b0:	08 95       	ret

000044b2 <__umoddi3>:
    44b2:	68 94       	set
    44b4:	01 c0       	rjmp	.+2      	; 0x44b8 <__udivdi3_umoddi3>

000044b6 <__udivdi3>:
    44b6:	e8 94       	clt

000044b8 <__udivdi3_umoddi3>:
    44b8:	8f 92       	push	r8
    44ba:	9f 92       	push	r9
    44bc:	cf 93       	push	r28
    44be:	df 93       	push	r29
    44c0:	0e 94 67 22 	call	0x44ce	; 0x44ce <__udivmod64>
    44c4:	df 91       	pop	r29
    44c6:	cf 91       	pop	r28
    44c8:	9f 90       	pop	r9
    44ca:	8f 90       	pop	r8
    44cc:	08 95       	ret

000044ce <__udivmod64>:
    44ce:	88 24       	eor	r8, r8
    44d0:	99 24       	eor	r9, r9
    44d2:	f4 01       	movw	r30, r8
    44d4:	e4 01       	movw	r28, r8
    44d6:	b0 e4       	ldi	r27, 0x40	; 64
    44d8:	9f 93       	push	r25
    44da:	aa 27       	eor	r26, r26
    44dc:	9a 15       	cp	r25, r10
    44de:	8b 04       	cpc	r8, r11
    44e0:	9c 04       	cpc	r9, r12
    44e2:	ed 05       	cpc	r30, r13
    44e4:	fe 05       	cpc	r31, r14
    44e6:	cf 05       	cpc	r28, r15
    44e8:	d0 07       	cpc	r29, r16
    44ea:	a1 07       	cpc	r26, r17
    44ec:	98 f4       	brcc	.+38     	; 0x4514 <__udivmod64+0x46>
    44ee:	ad 2f       	mov	r26, r29
    44f0:	dc 2f       	mov	r29, r28
    44f2:	cf 2f       	mov	r28, r31
    44f4:	fe 2f       	mov	r31, r30
    44f6:	e9 2d       	mov	r30, r9
    44f8:	98 2c       	mov	r9, r8
    44fa:	89 2e       	mov	r8, r25
    44fc:	98 2f       	mov	r25, r24
    44fe:	87 2f       	mov	r24, r23
    4500:	76 2f       	mov	r23, r22
    4502:	65 2f       	mov	r22, r21
    4504:	54 2f       	mov	r21, r20
    4506:	43 2f       	mov	r20, r19
    4508:	32 2f       	mov	r19, r18
    450a:	22 27       	eor	r18, r18
    450c:	b8 50       	subi	r27, 0x08	; 8
    450e:	31 f7       	brne	.-52     	; 0x44dc <__udivmod64+0xe>
    4510:	bf 91       	pop	r27
    4512:	27 c0       	rjmp	.+78     	; 0x4562 <__udivmod64+0x94>
    4514:	1b 2e       	mov	r1, r27
    4516:	bf 91       	pop	r27
    4518:	bb 27       	eor	r27, r27
    451a:	22 0f       	add	r18, r18
    451c:	33 1f       	adc	r19, r19
    451e:	44 1f       	adc	r20, r20
    4520:	55 1f       	adc	r21, r21
    4522:	66 1f       	adc	r22, r22
    4524:	77 1f       	adc	r23, r23
    4526:	88 1f       	adc	r24, r24
    4528:	99 1f       	adc	r25, r25
    452a:	88 1c       	adc	r8, r8
    452c:	99 1c       	adc	r9, r9
    452e:	ee 1f       	adc	r30, r30
    4530:	ff 1f       	adc	r31, r31
    4532:	cc 1f       	adc	r28, r28
    4534:	dd 1f       	adc	r29, r29
    4536:	aa 1f       	adc	r26, r26
    4538:	bb 1f       	adc	r27, r27
    453a:	8a 14       	cp	r8, r10
    453c:	9b 04       	cpc	r9, r11
    453e:	ec 05       	cpc	r30, r12
    4540:	fd 05       	cpc	r31, r13
    4542:	ce 05       	cpc	r28, r14
    4544:	df 05       	cpc	r29, r15
    4546:	a0 07       	cpc	r26, r16
    4548:	b1 07       	cpc	r27, r17
    454a:	48 f0       	brcs	.+18     	; 0x455e <__udivmod64+0x90>
    454c:	8a 18       	sub	r8, r10
    454e:	9b 08       	sbc	r9, r11
    4550:	ec 09       	sbc	r30, r12
    4552:	fd 09       	sbc	r31, r13
    4554:	ce 09       	sbc	r28, r14
    4556:	df 09       	sbc	r29, r15
    4558:	a0 0b       	sbc	r26, r16
    455a:	b1 0b       	sbc	r27, r17
    455c:	21 60       	ori	r18, 0x01	; 1
    455e:	1a 94       	dec	r1
    4560:	e1 f6       	brne	.-72     	; 0x451a <__udivmod64+0x4c>
    4562:	2e f4       	brtc	.+10     	; 0x456e <__udivmod64+0xa0>
    4564:	94 01       	movw	r18, r8
    4566:	af 01       	movw	r20, r30
    4568:	be 01       	movw	r22, r28
    456a:	cd 01       	movw	r24, r26
    456c:	00 0c       	add	r0, r0
    456e:	08 95       	ret

00004570 <__adddi3>:
    4570:	2a 0d       	add	r18, r10
    4572:	3b 1d       	adc	r19, r11
    4574:	4c 1d       	adc	r20, r12
    4576:	5d 1d       	adc	r21, r13
    4578:	6e 1d       	adc	r22, r14
    457a:	7f 1d       	adc	r23, r15
    457c:	80 1f       	adc	r24, r16
    457e:	91 1f       	adc	r25, r17
    4580:	08 95       	ret

00004582 <__adddi3_s8>:
    4582:	00 24       	eor	r0, r0
    4584:	a7 fd       	sbrc	r26, 7
    4586:	00 94       	com	r0
    4588:	2a 0f       	add	r18, r26
    458a:	30 1d       	adc	r19, r0
    458c:	40 1d       	adc	r20, r0
    458e:	50 1d       	adc	r21, r0
    4590:	60 1d       	adc	r22, r0
    4592:	70 1d       	adc	r23, r0
    4594:	80 1d       	adc	r24, r0
    4596:	90 1d       	adc	r25, r0
    4598:	08 95       	ret

0000459a <__subdi3>:
    459a:	2a 19       	sub	r18, r10
    459c:	3b 09       	sbc	r19, r11
    459e:	4c 09       	sbc	r20, r12
    45a0:	5d 09       	sbc	r21, r13
    45a2:	6e 09       	sbc	r22, r14
    45a4:	7f 09       	sbc	r23, r15
    45a6:	80 0b       	sbc	r24, r16
    45a8:	91 0b       	sbc	r25, r17
    45aa:	08 95       	ret

000045ac <__cmpdi2>:
    45ac:	2a 15       	cp	r18, r10
    45ae:	3b 05       	cpc	r19, r11
    45b0:	4c 05       	cpc	r20, r12
    45b2:	5d 05       	cpc	r21, r13
    45b4:	6e 05       	cpc	r22, r14
    45b6:	7f 05       	cpc	r23, r15
    45b8:	80 07       	cpc	r24, r16
    45ba:	91 07       	cpc	r25, r17
    45bc:	08 95       	ret

000045be <__tablejump2__>:
    45be:	ee 0f       	add	r30, r30
    45c0:	ff 1f       	adc	r31, r31
    45c2:	05 90       	lpm	r0, Z+
    45c4:	f4 91       	lpm	r31, Z
    45c6:	e0 2d       	mov	r30, r0
    45c8:	09 94       	ijmp

000045ca <__umulhisi3>:
    45ca:	a2 9f       	mul	r26, r18
    45cc:	b0 01       	movw	r22, r0
    45ce:	b3 9f       	mul	r27, r19
    45d0:	c0 01       	movw	r24, r0
    45d2:	a3 9f       	mul	r26, r19
    45d4:	70 0d       	add	r23, r0
    45d6:	81 1d       	adc	r24, r1
    45d8:	11 24       	eor	r1, r1
    45da:	91 1d       	adc	r25, r1
    45dc:	b2 9f       	mul	r27, r18
    45de:	70 0d       	add	r23, r0
    45e0:	81 1d       	adc	r24, r1
    45e2:	11 24       	eor	r1, r1
    45e4:	91 1d       	adc	r25, r1
    45e6:	08 95       	ret

000045e8 <calloc>:
    45e8:	0f 93       	push	r16
    45ea:	1f 93       	push	r17
    45ec:	cf 93       	push	r28
    45ee:	df 93       	push	r29
    45f0:	86 9f       	mul	r24, r22
    45f2:	80 01       	movw	r16, r0
    45f4:	87 9f       	mul	r24, r23
    45f6:	10 0d       	add	r17, r0
    45f8:	96 9f       	mul	r25, r22
    45fa:	10 0d       	add	r17, r0
    45fc:	11 24       	eor	r1, r1
    45fe:	c8 01       	movw	r24, r16
    4600:	0e 94 10 23 	call	0x4620	; 0x4620 <malloc>
    4604:	ec 01       	movw	r28, r24
    4606:	00 97       	sbiw	r24, 0x00	; 0
    4608:	29 f0       	breq	.+10     	; 0x4614 <calloc+0x2c>
    460a:	a8 01       	movw	r20, r16
    460c:	60 e0       	ldi	r22, 0x00	; 0
    460e:	70 e0       	ldi	r23, 0x00	; 0
    4610:	0e 94 3a 24 	call	0x4874	; 0x4874 <memset>
    4614:	ce 01       	movw	r24, r28
    4616:	df 91       	pop	r29
    4618:	cf 91       	pop	r28
    461a:	1f 91       	pop	r17
    461c:	0f 91       	pop	r16
    461e:	08 95       	ret

00004620 <malloc>:
    4620:	0f 93       	push	r16
    4622:	1f 93       	push	r17
    4624:	cf 93       	push	r28
    4626:	df 93       	push	r29
    4628:	82 30       	cpi	r24, 0x02	; 2
    462a:	91 05       	cpc	r25, r1
    462c:	10 f4       	brcc	.+4      	; 0x4632 <malloc+0x12>
    462e:	82 e0       	ldi	r24, 0x02	; 2
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	e0 91 b1 08 	lds	r30, 0x08B1	; 0x8008b1 <__flp>
    4636:	f0 91 b2 08 	lds	r31, 0x08B2	; 0x8008b2 <__flp+0x1>
    463a:	20 e0       	ldi	r18, 0x00	; 0
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	a0 e0       	ldi	r26, 0x00	; 0
    4640:	b0 e0       	ldi	r27, 0x00	; 0
    4642:	30 97       	sbiw	r30, 0x00	; 0
    4644:	19 f1       	breq	.+70     	; 0x468c <malloc+0x6c>
    4646:	40 81       	ld	r20, Z
    4648:	51 81       	ldd	r21, Z+1	; 0x01
    464a:	02 81       	ldd	r16, Z+2	; 0x02
    464c:	13 81       	ldd	r17, Z+3	; 0x03
    464e:	48 17       	cp	r20, r24
    4650:	59 07       	cpc	r21, r25
    4652:	c8 f0       	brcs	.+50     	; 0x4686 <malloc+0x66>
    4654:	84 17       	cp	r24, r20
    4656:	95 07       	cpc	r25, r21
    4658:	69 f4       	brne	.+26     	; 0x4674 <malloc+0x54>
    465a:	10 97       	sbiw	r26, 0x00	; 0
    465c:	31 f0       	breq	.+12     	; 0x466a <malloc+0x4a>
    465e:	12 96       	adiw	r26, 0x02	; 2
    4660:	0c 93       	st	X, r16
    4662:	12 97       	sbiw	r26, 0x02	; 2
    4664:	13 96       	adiw	r26, 0x03	; 3
    4666:	1c 93       	st	X, r17
    4668:	27 c0       	rjmp	.+78     	; 0x46b8 <malloc+0x98>
    466a:	00 93 b1 08 	sts	0x08B1, r16	; 0x8008b1 <__flp>
    466e:	10 93 b2 08 	sts	0x08B2, r17	; 0x8008b2 <__flp+0x1>
    4672:	22 c0       	rjmp	.+68     	; 0x46b8 <malloc+0x98>
    4674:	21 15       	cp	r18, r1
    4676:	31 05       	cpc	r19, r1
    4678:	19 f0       	breq	.+6      	; 0x4680 <malloc+0x60>
    467a:	42 17       	cp	r20, r18
    467c:	53 07       	cpc	r21, r19
    467e:	18 f4       	brcc	.+6      	; 0x4686 <malloc+0x66>
    4680:	9a 01       	movw	r18, r20
    4682:	bd 01       	movw	r22, r26
    4684:	ef 01       	movw	r28, r30
    4686:	df 01       	movw	r26, r30
    4688:	f8 01       	movw	r30, r16
    468a:	db cf       	rjmp	.-74     	; 0x4642 <malloc+0x22>
    468c:	21 15       	cp	r18, r1
    468e:	31 05       	cpc	r19, r1
    4690:	f9 f0       	breq	.+62     	; 0x46d0 <malloc+0xb0>
    4692:	28 1b       	sub	r18, r24
    4694:	39 0b       	sbc	r19, r25
    4696:	24 30       	cpi	r18, 0x04	; 4
    4698:	31 05       	cpc	r19, r1
    469a:	80 f4       	brcc	.+32     	; 0x46bc <malloc+0x9c>
    469c:	8a 81       	ldd	r24, Y+2	; 0x02
    469e:	9b 81       	ldd	r25, Y+3	; 0x03
    46a0:	61 15       	cp	r22, r1
    46a2:	71 05       	cpc	r23, r1
    46a4:	21 f0       	breq	.+8      	; 0x46ae <malloc+0x8e>
    46a6:	fb 01       	movw	r30, r22
    46a8:	93 83       	std	Z+3, r25	; 0x03
    46aa:	82 83       	std	Z+2, r24	; 0x02
    46ac:	04 c0       	rjmp	.+8      	; 0x46b6 <malloc+0x96>
    46ae:	90 93 b2 08 	sts	0x08B2, r25	; 0x8008b2 <__flp+0x1>
    46b2:	80 93 b1 08 	sts	0x08B1, r24	; 0x8008b1 <__flp>
    46b6:	fe 01       	movw	r30, r28
    46b8:	32 96       	adiw	r30, 0x02	; 2
    46ba:	44 c0       	rjmp	.+136    	; 0x4744 <malloc+0x124>
    46bc:	fe 01       	movw	r30, r28
    46be:	e2 0f       	add	r30, r18
    46c0:	f3 1f       	adc	r31, r19
    46c2:	81 93       	st	Z+, r24
    46c4:	91 93       	st	Z+, r25
    46c6:	22 50       	subi	r18, 0x02	; 2
    46c8:	31 09       	sbc	r19, r1
    46ca:	39 83       	std	Y+1, r19	; 0x01
    46cc:	28 83       	st	Y, r18
    46ce:	3a c0       	rjmp	.+116    	; 0x4744 <malloc+0x124>
    46d0:	20 91 af 08 	lds	r18, 0x08AF	; 0x8008af <__brkval>
    46d4:	30 91 b0 08 	lds	r19, 0x08B0	; 0x8008b0 <__brkval+0x1>
    46d8:	23 2b       	or	r18, r19
    46da:	41 f4       	brne	.+16     	; 0x46ec <malloc+0xcc>
    46dc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    46e0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    46e4:	30 93 b0 08 	sts	0x08B0, r19	; 0x8008b0 <__brkval+0x1>
    46e8:	20 93 af 08 	sts	0x08AF, r18	; 0x8008af <__brkval>
    46ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    46f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    46f4:	21 15       	cp	r18, r1
    46f6:	31 05       	cpc	r19, r1
    46f8:	41 f4       	brne	.+16     	; 0x470a <malloc+0xea>
    46fa:	2d b7       	in	r18, 0x3d	; 61
    46fc:	3e b7       	in	r19, 0x3e	; 62
    46fe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4702:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4706:	24 1b       	sub	r18, r20
    4708:	35 0b       	sbc	r19, r21
    470a:	e0 91 af 08 	lds	r30, 0x08AF	; 0x8008af <__brkval>
    470e:	f0 91 b0 08 	lds	r31, 0x08B0	; 0x8008b0 <__brkval+0x1>
    4712:	e2 17       	cp	r30, r18
    4714:	f3 07       	cpc	r31, r19
    4716:	a0 f4       	brcc	.+40     	; 0x4740 <malloc+0x120>
    4718:	2e 1b       	sub	r18, r30
    471a:	3f 0b       	sbc	r19, r31
    471c:	28 17       	cp	r18, r24
    471e:	39 07       	cpc	r19, r25
    4720:	78 f0       	brcs	.+30     	; 0x4740 <malloc+0x120>
    4722:	ac 01       	movw	r20, r24
    4724:	4e 5f       	subi	r20, 0xFE	; 254
    4726:	5f 4f       	sbci	r21, 0xFF	; 255
    4728:	24 17       	cp	r18, r20
    472a:	35 07       	cpc	r19, r21
    472c:	48 f0       	brcs	.+18     	; 0x4740 <malloc+0x120>
    472e:	4e 0f       	add	r20, r30
    4730:	5f 1f       	adc	r21, r31
    4732:	50 93 b0 08 	sts	0x08B0, r21	; 0x8008b0 <__brkval+0x1>
    4736:	40 93 af 08 	sts	0x08AF, r20	; 0x8008af <__brkval>
    473a:	81 93       	st	Z+, r24
    473c:	91 93       	st	Z+, r25
    473e:	02 c0       	rjmp	.+4      	; 0x4744 <malloc+0x124>
    4740:	e0 e0       	ldi	r30, 0x00	; 0
    4742:	f0 e0       	ldi	r31, 0x00	; 0
    4744:	cf 01       	movw	r24, r30
    4746:	df 91       	pop	r29
    4748:	cf 91       	pop	r28
    474a:	1f 91       	pop	r17
    474c:	0f 91       	pop	r16
    474e:	08 95       	ret

00004750 <free>:
    4750:	cf 93       	push	r28
    4752:	df 93       	push	r29
    4754:	00 97       	sbiw	r24, 0x00	; 0
    4756:	09 f4       	brne	.+2      	; 0x475a <free+0xa>
    4758:	81 c0       	rjmp	.+258    	; 0x485c <free+0x10c>
    475a:	fc 01       	movw	r30, r24
    475c:	32 97       	sbiw	r30, 0x02	; 2
    475e:	13 82       	std	Z+3, r1	; 0x03
    4760:	12 82       	std	Z+2, r1	; 0x02
    4762:	a0 91 b1 08 	lds	r26, 0x08B1	; 0x8008b1 <__flp>
    4766:	b0 91 b2 08 	lds	r27, 0x08B2	; 0x8008b2 <__flp+0x1>
    476a:	10 97       	sbiw	r26, 0x00	; 0
    476c:	81 f4       	brne	.+32     	; 0x478e <free+0x3e>
    476e:	20 81       	ld	r18, Z
    4770:	31 81       	ldd	r19, Z+1	; 0x01
    4772:	82 0f       	add	r24, r18
    4774:	93 1f       	adc	r25, r19
    4776:	20 91 af 08 	lds	r18, 0x08AF	; 0x8008af <__brkval>
    477a:	30 91 b0 08 	lds	r19, 0x08B0	; 0x8008b0 <__brkval+0x1>
    477e:	28 17       	cp	r18, r24
    4780:	39 07       	cpc	r19, r25
    4782:	51 f5       	brne	.+84     	; 0x47d8 <free+0x88>
    4784:	f0 93 b0 08 	sts	0x08B0, r31	; 0x8008b0 <__brkval+0x1>
    4788:	e0 93 af 08 	sts	0x08AF, r30	; 0x8008af <__brkval>
    478c:	67 c0       	rjmp	.+206    	; 0x485c <free+0x10c>
    478e:	ed 01       	movw	r28, r26
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	ce 17       	cp	r28, r30
    4796:	df 07       	cpc	r29, r31
    4798:	40 f4       	brcc	.+16     	; 0x47aa <free+0x5a>
    479a:	4a 81       	ldd	r20, Y+2	; 0x02
    479c:	5b 81       	ldd	r21, Y+3	; 0x03
    479e:	9e 01       	movw	r18, r28
    47a0:	41 15       	cp	r20, r1
    47a2:	51 05       	cpc	r21, r1
    47a4:	f1 f0       	breq	.+60     	; 0x47e2 <free+0x92>
    47a6:	ea 01       	movw	r28, r20
    47a8:	f5 cf       	rjmp	.-22     	; 0x4794 <free+0x44>
    47aa:	d3 83       	std	Z+3, r29	; 0x03
    47ac:	c2 83       	std	Z+2, r28	; 0x02
    47ae:	40 81       	ld	r20, Z
    47b0:	51 81       	ldd	r21, Z+1	; 0x01
    47b2:	84 0f       	add	r24, r20
    47b4:	95 1f       	adc	r25, r21
    47b6:	c8 17       	cp	r28, r24
    47b8:	d9 07       	cpc	r29, r25
    47ba:	59 f4       	brne	.+22     	; 0x47d2 <free+0x82>
    47bc:	88 81       	ld	r24, Y
    47be:	99 81       	ldd	r25, Y+1	; 0x01
    47c0:	84 0f       	add	r24, r20
    47c2:	95 1f       	adc	r25, r21
    47c4:	02 96       	adiw	r24, 0x02	; 2
    47c6:	91 83       	std	Z+1, r25	; 0x01
    47c8:	80 83       	st	Z, r24
    47ca:	8a 81       	ldd	r24, Y+2	; 0x02
    47cc:	9b 81       	ldd	r25, Y+3	; 0x03
    47ce:	93 83       	std	Z+3, r25	; 0x03
    47d0:	82 83       	std	Z+2, r24	; 0x02
    47d2:	21 15       	cp	r18, r1
    47d4:	31 05       	cpc	r19, r1
    47d6:	29 f4       	brne	.+10     	; 0x47e2 <free+0x92>
    47d8:	f0 93 b2 08 	sts	0x08B2, r31	; 0x8008b2 <__flp+0x1>
    47dc:	e0 93 b1 08 	sts	0x08B1, r30	; 0x8008b1 <__flp>
    47e0:	3d c0       	rjmp	.+122    	; 0x485c <free+0x10c>
    47e2:	e9 01       	movw	r28, r18
    47e4:	fb 83       	std	Y+3, r31	; 0x03
    47e6:	ea 83       	std	Y+2, r30	; 0x02
    47e8:	49 91       	ld	r20, Y+
    47ea:	59 91       	ld	r21, Y+
    47ec:	c4 0f       	add	r28, r20
    47ee:	d5 1f       	adc	r29, r21
    47f0:	ec 17       	cp	r30, r28
    47f2:	fd 07       	cpc	r31, r29
    47f4:	61 f4       	brne	.+24     	; 0x480e <free+0xbe>
    47f6:	80 81       	ld	r24, Z
    47f8:	91 81       	ldd	r25, Z+1	; 0x01
    47fa:	84 0f       	add	r24, r20
    47fc:	95 1f       	adc	r25, r21
    47fe:	02 96       	adiw	r24, 0x02	; 2
    4800:	e9 01       	movw	r28, r18
    4802:	99 83       	std	Y+1, r25	; 0x01
    4804:	88 83       	st	Y, r24
    4806:	82 81       	ldd	r24, Z+2	; 0x02
    4808:	93 81       	ldd	r25, Z+3	; 0x03
    480a:	9b 83       	std	Y+3, r25	; 0x03
    480c:	8a 83       	std	Y+2, r24	; 0x02
    480e:	e0 e0       	ldi	r30, 0x00	; 0
    4810:	f0 e0       	ldi	r31, 0x00	; 0
    4812:	12 96       	adiw	r26, 0x02	; 2
    4814:	8d 91       	ld	r24, X+
    4816:	9c 91       	ld	r25, X
    4818:	13 97       	sbiw	r26, 0x03	; 3
    481a:	00 97       	sbiw	r24, 0x00	; 0
    481c:	19 f0       	breq	.+6      	; 0x4824 <free+0xd4>
    481e:	fd 01       	movw	r30, r26
    4820:	dc 01       	movw	r26, r24
    4822:	f7 cf       	rjmp	.-18     	; 0x4812 <free+0xc2>
    4824:	8d 91       	ld	r24, X+
    4826:	9c 91       	ld	r25, X
    4828:	11 97       	sbiw	r26, 0x01	; 1
    482a:	9d 01       	movw	r18, r26
    482c:	2e 5f       	subi	r18, 0xFE	; 254
    482e:	3f 4f       	sbci	r19, 0xFF	; 255
    4830:	82 0f       	add	r24, r18
    4832:	93 1f       	adc	r25, r19
    4834:	20 91 af 08 	lds	r18, 0x08AF	; 0x8008af <__brkval>
    4838:	30 91 b0 08 	lds	r19, 0x08B0	; 0x8008b0 <__brkval+0x1>
    483c:	28 17       	cp	r18, r24
    483e:	39 07       	cpc	r19, r25
    4840:	69 f4       	brne	.+26     	; 0x485c <free+0x10c>
    4842:	30 97       	sbiw	r30, 0x00	; 0
    4844:	29 f4       	brne	.+10     	; 0x4850 <free+0x100>
    4846:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <__flp+0x1>
    484a:	10 92 b1 08 	sts	0x08B1, r1	; 0x8008b1 <__flp>
    484e:	02 c0       	rjmp	.+4      	; 0x4854 <free+0x104>
    4850:	13 82       	std	Z+3, r1	; 0x03
    4852:	12 82       	std	Z+2, r1	; 0x02
    4854:	b0 93 b0 08 	sts	0x08B0, r27	; 0x8008b0 <__brkval+0x1>
    4858:	a0 93 af 08 	sts	0x08AF, r26	; 0x8008af <__brkval>
    485c:	df 91       	pop	r29
    485e:	cf 91       	pop	r28
    4860:	08 95       	ret

00004862 <memcpy>:
    4862:	fb 01       	movw	r30, r22
    4864:	dc 01       	movw	r26, r24
    4866:	02 c0       	rjmp	.+4      	; 0x486c <memcpy+0xa>
    4868:	01 90       	ld	r0, Z+
    486a:	0d 92       	st	X+, r0
    486c:	41 50       	subi	r20, 0x01	; 1
    486e:	50 40       	sbci	r21, 0x00	; 0
    4870:	d8 f7       	brcc	.-10     	; 0x4868 <memcpy+0x6>
    4872:	08 95       	ret

00004874 <memset>:
    4874:	dc 01       	movw	r26, r24
    4876:	01 c0       	rjmp	.+2      	; 0x487a <memset+0x6>
    4878:	6d 93       	st	X+, r22
    487a:	41 50       	subi	r20, 0x01	; 1
    487c:	50 40       	sbci	r21, 0x00	; 0
    487e:	e0 f7       	brcc	.-8      	; 0x4878 <memset+0x4>
    4880:	08 95       	ret

00004882 <eeprom_read_block>:
    4882:	dc 01       	movw	r26, r24
    4884:	cb 01       	movw	r24, r22

00004886 <eeprom_read_blraw>:
    4886:	fc 01       	movw	r30, r24
    4888:	f9 99       	sbic	0x1f, 1	; 31
    488a:	fe cf       	rjmp	.-4      	; 0x4888 <eeprom_read_blraw+0x2>
    488c:	06 c0       	rjmp	.+12     	; 0x489a <eeprom_read_blraw+0x14>
    488e:	f2 bd       	out	0x22, r31	; 34
    4890:	e1 bd       	out	0x21, r30	; 33
    4892:	f8 9a       	sbi	0x1f, 0	; 31
    4894:	31 96       	adiw	r30, 0x01	; 1
    4896:	00 b4       	in	r0, 0x20	; 32
    4898:	0d 92       	st	X+, r0
    489a:	41 50       	subi	r20, 0x01	; 1
    489c:	50 40       	sbci	r21, 0x00	; 0
    489e:	b8 f7       	brcc	.-18     	; 0x488e <eeprom_read_blraw+0x8>
    48a0:	08 95       	ret

000048a2 <_exit>:
    48a2:	f8 94       	cli

000048a4 <__stop_program>:
    48a4:	ff cf       	rjmp	.-2      	; 0x48a4 <__stop_program>
