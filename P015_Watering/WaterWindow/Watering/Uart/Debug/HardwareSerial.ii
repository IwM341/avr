# 1 ".././HardwareSerial.cpp"
# 1 "D:\\Tmp\\avr\\P015_Watering\\WaterWindow\\Watering\\Uart\\Debug//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 ".././HardwareSerial.cpp"
# 25 ".././HardwareSerial.cpp"
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 1 3
# 48 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 216 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4

# 216 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 49 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 2 3







extern "C" {
# 70 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
typedef struct {
 int quot;
 int rem;
} div_t;


typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef int (*__compar_fn_t)(const void *, const void *);
# 116 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void abort(void) __attribute__((__noreturn__));




extern int abs(int __i) __attribute__((__const__));
# 130 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern long labs(long __i) __attribute__((__const__));
# 153 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
       size_t __size, int (*__compar)(const void *, const void *));







extern div_t div(int __num, int __denom) __asm__("__divmodhi4") __attribute__((__const__));





extern ldiv_t ldiv(long __num, long __denom) __asm__("__divmodsi4") __attribute__((__const__));
# 185 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void qsort(void *__base, size_t __nmemb, size_t __size,
    __compar_fn_t __compar);
# 218 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern long strtol(const char *__nptr, char **__endptr, int __base);
# 252 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
# 264 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern long atol(const char *__s) __attribute__((__pure__));
# 276 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern int atoi(const char *__s) __attribute__((__pure__));
# 288 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void exit(int __status) __attribute__((__noreturn__));
# 300 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void *malloc(size_t __size) __attribute__((__malloc__));






extern void free(void *__ptr);




extern size_t __malloc_margin;




extern char *__malloc_heap_start;




extern char *__malloc_heap_end;






extern void *calloc(size_t __nele, size_t __size) __attribute__((__malloc__));
# 348 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern void *realloc(void *__ptr, size_t __size) __attribute__((__malloc__));

extern double strtod(const char *__nptr, char **__endptr);
# 361 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern double atof(const char *__nptr);
# 383 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern int rand(void);



extern void srand(unsigned int __seed);






extern int rand_r(unsigned long *__ctx);
# 428 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__itoa (int, char *, int);
 return __itoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__itoa_ncheck (int, char *, unsigned char);
 return __itoa_ncheck (__val, __s, __radix);
    }
}
# 473 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__ltoa (long, char *, int);
 return __ltoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__ltoa_ncheck (long, char *, unsigned char);
 return __ltoa_ncheck (__val, __s, __radix);
    }
}
# 516 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__utoa (unsigned int, char *, int);
 return __utoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
 return __utoa_ncheck (__val, __s, __radix);
    }
}
# 558 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__ultoa (unsigned long, char *, int);
 return __ultoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
 return __ultoa_ncheck (__val, __s, __radix);
    }
}
# 590 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern long random(void);




extern void srandom(unsigned long __seed);







extern long random_r(unsigned long *__ctx);
# 649 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern char *dtostre(double __val, char *__s, unsigned char __prec,
       unsigned char __flags);
# 666 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern char *dtostrf(double __val, signed char __width,
                     unsigned char __prec, char *__s);
# 685 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdlib.h" 3
extern int atexit(void (*)(void));
extern int system (const char *);
extern char *getenv (const char *);



}
# 26 ".././HardwareSerial.cpp" 2
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 1 3
# 44 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 1 3
# 37 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 1 3 4
# 9 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 3 4
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 1 3 4
# 125 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 2 3 4
# 38 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 2 3
# 77 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 45 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 2 3
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdarg.h" 1 3 4
# 40 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 98 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 46 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 2 3




# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 51 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 2 3
# 244 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
struct __file {
 char *buf;
 unsigned char unget;
 uint8_t flags;
# 263 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
 int size;
 int len;
 int (*put)(char, struct __file *);
 int (*get)(struct __file *);
 void *udata;
};
# 277 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
typedef struct __file FILE;
# 399 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern "C" {







extern struct __file *__iob[];
# 419 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern FILE *fdevopen(int (*__put)(char, FILE*), int (*__get)(FILE*));
# 436 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern int fclose(FILE *__stream);
# 610 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern int vfprintf(FILE *__stream, const char *__fmt, va_list __ap);





extern int vfprintf_P(FILE *__stream, const char *__fmt, va_list __ap);






extern int fputc(int __c, FILE *__stream);




extern int putc(int __c, FILE *__stream);


extern int putchar(int __c);
# 651 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern int printf(const char *__fmt, ...);





extern int printf_P(const char *__fmt, ...);







extern int vprintf(const char *__fmt, va_list __ap);





extern int sprintf(char *__s, const char *__fmt, ...);





extern int sprintf_P(char *__s, const char *__fmt, ...);
# 687 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern int snprintf(char *__s, size_t __n, const char *__fmt, ...);





extern int snprintf_P(char *__s, size_t __n, const char *__fmt, ...);





extern int vsprintf(char *__s, const char *__fmt, va_list ap);





extern int vsprintf_P(char *__s, const char *__fmt, va_list ap);
# 715 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern int vsnprintf(char *__s, size_t __n, const char *__fmt, va_list ap);





extern int vsnprintf_P(char *__s, size_t __n, const char *__fmt, va_list ap);




extern int fprintf(FILE *__stream, const char *__fmt, ...);





extern int fprintf_P(FILE *__stream, const char *__fmt, ...);






extern int fputs(const char *__str, FILE *__stream);




extern int fputs_P(const char *__str, FILE *__stream);





extern int puts(const char *__str);




extern int puts_P(const char *__str);
# 764 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern size_t fwrite(const void *__ptr, size_t __size, size_t __nmemb,
         FILE *__stream);







extern int fgetc(FILE *__stream);




extern int getc(FILE *__stream);


extern int getchar(void);
# 812 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern int ungetc(int __c, FILE *__stream);
# 824 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern char *fgets(char *__str, int __size, FILE *__stream);






extern char *gets(char *__str);
# 842 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern size_t fread(void *__ptr, size_t __size, size_t __nmemb,
        FILE *__stream);




extern void clearerr(FILE *__stream);
# 859 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern int feof(FILE *__stream);
# 870 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
extern int ferror(FILE *__stream);






extern int vfscanf(FILE *__stream, const char *__fmt, va_list __ap);




extern int vfscanf_P(FILE *__stream, const char *__fmt, va_list __ap);







extern int fscanf(FILE *__stream, const char *__fmt, ...);




extern int fscanf_P(FILE *__stream, const char *__fmt, ...);






extern int scanf(const char *__fmt, ...);




extern int scanf_P(const char *__fmt, ...);







extern int vscanf(const char *__fmt, va_list __ap);







extern int sscanf(const char *__buf, const char *__fmt, ...);




extern int sscanf_P(const char *__buf, const char *__fmt, ...);
# 940 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdio.h" 3
static __inline__ int fflush(FILE *stream __attribute__((unused)))
{
 return 0;
}






__extension__ typedef long long fpos_t;
extern int fgetpos(FILE *stream, fpos_t *pos);
extern FILE *fopen(const char *path, const char *mode);
extern FILE *freopen(const char *path, const char *mode, FILE *stream);
extern FILE *fdopen(int, const char *);
extern int fseek(FILE *stream, long offset, int whence);
extern int fsetpos(FILE *stream, fpos_t *pos);
extern long ftell(FILE *stream);
extern int fileno(FILE *);
extern void perror(const char *s);
extern int remove(const char *pathname);
extern int rename(const char *oldpath, const char *newpath);
extern void rewind(FILE *stream);
extern void setbuf(FILE *stream, char *buf);
extern int setvbuf(FILE *stream, char *buf, int mode, size_t size);
extern FILE *tmpfile(void);
extern char *tmpnam (char *s);



}
# 27 ".././HardwareSerial.cpp" 2
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 1 3
# 46 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 47 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 2 3
# 58 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern "C" {
# 125 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern int ffs(int __val) __attribute__((__const__));





extern int ffsl(long __val) __attribute__((__const__));





__extension__ extern int ffsll(long long __val) __attribute__((__const__));
# 150 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern void *memccpy(void *, const void *, int, size_t);
# 162 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern void *memchr(const void *, int, size_t) __attribute__((__pure__));
# 180 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern int memcmp(const void *, const void *, size_t) __attribute__((__pure__));
# 191 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern void *memcpy(void *, const void *, size_t);
# 203 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern void *memmem(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 213 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern void *memmove(void *, const void *, size_t);
# 225 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern void *memrchr(const void *, int, size_t) __attribute__((__pure__));
# 235 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern void *memset(void *, int, size_t);
# 248 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strcat(char *, const char *);
# 262 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strchr(const char *, int) __attribute__((__pure__));
# 274 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strchrnul(const char *, int) __attribute__((__pure__));
# 287 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern int strcmp(const char *, const char *) __attribute__((__pure__));
# 305 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strcpy(char *, const char *);
# 320 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern int strcasecmp(const char *, const char *) __attribute__((__pure__));
# 333 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strcasestr(const char *, const char *) __attribute__((__pure__));
# 344 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern size_t strcspn(const char *__s, const char *__reject) __attribute__((__pure__));
# 364 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strdup(const char *s1);
# 377 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern size_t strlcat(char *, const char *, size_t);
# 388 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern size_t strlcpy(char *, const char *, size_t);
# 399 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern size_t strlen(const char *) __attribute__((__pure__));
# 411 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strlwr(char *);
# 422 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strncat(char *, const char *, size_t);
# 434 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern int strncmp(const char *, const char *, size_t) __attribute__((__pure__));
# 449 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strncpy(char *, const char *, size_t);
# 464 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));
# 478 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern size_t strnlen(const char *, size_t) __attribute__((__pure__));
# 491 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strpbrk(const char *__s, const char *__accept) __attribute__((__pure__));
# 505 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strrchr(const char *, int) __attribute__((__pure__));
# 515 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strrev(char *);
# 533 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strsep(char **, const char *);
# 544 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern size_t strspn(const char *__s, const char *__accept) __attribute__((__pure__));
# 557 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strstr(const char *, const char *) __attribute__((__pure__));
# 576 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strtok(char *, const char *);
# 593 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strtok_r(char *, const char *, char **);
# 606 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\string.h" 3
extern char *strupr(char *);



extern int strcoll(const char *s1, const char *s2);
extern char *strerror(int errnum);
extern size_t strxfrm(char *dest, const char *src, size_t n);



}
# 28 ".././HardwareSerial.cpp" 2

# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\util\\atomic.h" 1 3
# 37 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\util\\atomic.h" 3
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 1 3
# 99 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 1 3
# 100 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 272 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "D:\\Soft\\7.0\\Packs\\atmel\\ATmega_DFP\\1.7.374\\include/avr/iom328p.h" 1 3
# 273 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 627 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\portpins.h" 1 3
# 628 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3

# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\common.h" 1 3
# 630 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3

# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\version.h" 1 3
# 632 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3






# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 1 3
# 239 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 639 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3


# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\lock.h" 1 3
# 642 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 38 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\util\\atomic.h" 2 3
# 1 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\interrupt.h" 1 3
# 39 "d:\\soft\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\util\\atomic.h" 2 3



static __inline__ uint8_t __iSeiRetVal(void)
{
    __asm__ __volatile__ ("sei" ::: "memory");
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    __asm__ __volatile__ ("cli" ::: "memory");
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    __asm__ __volatile__ ("sei" ::: "memory");
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    __asm__ __volatile__ ("cli" ::: "memory");
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const uint8_t *__s)
{
    (*(volatile uint8_t *)((0x3F) + 0x20)) = *__s;
    __asm__ volatile ("" ::: "memory");
}
# 30 ".././HardwareSerial.cpp" 2
# 1 ".././HardwareSerial.h" 1
# 29 ".././HardwareSerial.h"
# 1 ".././wiring_private.h" 1
# 32 ".././wiring_private.h"

# 32 ".././wiring_private.h"
extern "C"{
# 42 ".././wiring_private.h"
uint32_t countPulseASM(volatile uint8_t *port, uint8_t bit, uint8_t stateMask, unsigned long maxloops);
# 64 ".././wiring_private.h"
typedef void (*voidFuncPtr)(void);


}
# 30 ".././HardwareSerial.h" 2
# 1 ".././Stream.h" 1
# 26 ".././Stream.h"
# 1 ".././Print.h" 1
# 36 ".././Print.h"
class Print
{
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == 
# 52 ".././Print.h" 3 4
                __null
# 52 ".././Print.h"
                    ) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    }



    virtual int availableForWrite() { return 0; }


    size_t print(const char[]);
    size_t print(char);
    size_t print(unsigned char, int = 10);
    size_t print(int, int = 10);
    size_t print(unsigned int, int = 10);
    size_t print(long, int = 10);
    size_t print(unsigned long, int = 10);
    size_t print(double, int = 2);


    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = 10);
    size_t println(int, int = 10);
    size_t println(unsigned int, int = 10);
    size_t println(long, int = 10);
    size_t println(unsigned long, int = 10);
    size_t println(double, int = 2);
    size_t println(void);

    virtual void flush() { }
};
# 27 ".././Stream.h" 2
# 41 ".././Stream.h"
enum LookaheadMode{
    SKIP_ALL,
    SKIP_NONE,
    SKIP_WHITESPACE
};



class Stream : public Print
{
  protected:
    unsigned long _timeout;
    unsigned long _startMillis;
    int timedRead();
    int timedPeek();
    int peekNextDigit(LookaheadMode lookahead, bool detectDecimal);

  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}



  void setTimeout(unsigned long timeout);
  unsigned long getTimeout(void) { return _timeout; }

  bool find(char *target);
  bool find(uint8_t *target) { return find ((char *)target); }


  bool find(char *target, size_t length);
  bool find(uint8_t *target, size_t length) { return find ((char *)target, length); }


  bool find(char target) { return find (&target, 1); }

  bool findUntil(char *target, char *terminator);
  bool findUntil(uint8_t *target, char *terminator) { return findUntil((char *)target, terminator); }

  bool findUntil(char *target, size_t targetLen, char *terminate, size_t termLen);
  bool findUntil(uint8_t *target, size_t targetLen, char *terminate, size_t termLen) {return findUntil((char *)target, targetLen, terminate, termLen); }

  long parseInt(LookaheadMode lookahead = SKIP_ALL, char ignore = '\x01');






  float parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = '\x01');


  size_t readBytes( char *buffer, size_t length);
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }



  size_t readBytesUntil( char terminator, char *buffer, size_t length);
  size_t readBytesUntil( char terminator, uint8_t *buffer, size_t length) { return readBytesUntil(terminator, (char *)buffer, length); }




  protected:
  long parseInt(char ignore) { return parseInt(SKIP_ALL, ignore); }
  float parseFloat(char ignore) { return parseFloat(SKIP_ALL, ignore); }




  struct MultiTarget {
    const char *str;
    size_t len;
    size_t index;
  };



  int findMulti(struct MultiTarget *targets, int tCount);
};
# 31 ".././HardwareSerial.h" 2
# 60 ".././HardwareSerial.h"
typedef uint8_t tx_buffer_index_t;




typedef uint8_t rx_buffer_index_t;
# 102 ".././HardwareSerial.h"
class HardwareSerial : public Stream
{
  protected:
    volatile uint8_t * const _ubrrh;
    volatile uint8_t * const _ubrrl;
    volatile uint8_t * const _ucsra;
    volatile uint8_t * const _ucsrb;
    volatile uint8_t * const _ucsrc;
    volatile uint8_t * const _udr;

    bool _written;

    volatile rx_buffer_index_t _rx_buffer_head;
    volatile rx_buffer_index_t _rx_buffer_tail;
    volatile tx_buffer_index_t _tx_buffer_head;
    volatile tx_buffer_index_t _tx_buffer_tail;




    unsigned char _rx_buffer[64];
    unsigned char _tx_buffer[64];
 uint_least32_t _f_cpu;
  public:
    HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr):
      _ubrrh(ubrrh), _ubrrl(ubrrl),
      _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
      _udr(udr),
      _rx_buffer_head(0), _rx_buffer_tail(0),
      _tx_buffer_head(0), _tx_buffer_tail(0),
      _f_cpu(16000000UL){}

 inline void set_f_cpu(uint_least32_t n_f_cpu = 16000000UL){
  _f_cpu = n_f_cpu;
 }

    inline void begin(unsigned long baud) { begin(baud, 0x06); }
    void begin(unsigned long, uint8_t);
    void end();
    virtual int available(void);
    virtual int peek(void);
    virtual int read(void);
    virtual int availableForWrite(void);
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write;
    operator bool() { return true; }


    inline void _rx_complete_irq(void){
     if (
# 159 ".././HardwareSerial.h" 3
        (!((*(volatile uint8_t *)(((uint16_t) &(
# 159 ".././HardwareSerial.h"
        *_ucsra
# 159 ".././HardwareSerial.h" 3
        )))) & (1 << (2))))
# 159 ".././HardwareSerial.h"
                                   ) {


      unsigned char c = *_udr;
      rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % 64;





      if (i != _rx_buffer_tail) {
       _rx_buffer[_rx_buffer_head] = c;
       _rx_buffer_head = i;
      }
      } else {

      *_udr;
     };
    }
    inline void _tx_udr_empty_irq(void){


     unsigned char c = _tx_buffer[_tx_buffer_tail];
     _tx_buffer_tail = (_tx_buffer_tail + 1) % 64;

     *_udr = c;







     *_ucsra = ((*_ucsra) & ((1 << 
# 192 ".././HardwareSerial.h" 3
                                  1
# 192 ".././HardwareSerial.h"
                                      ) | (1 << 
# 192 ".././HardwareSerial.h" 3
                                                0
# 192 ".././HardwareSerial.h"
                                                     ))) | (1 << 
# 192 ".././HardwareSerial.h" 3
                                                                 6
# 192 ".././HardwareSerial.h"
                                                                     );




     if (_tx_buffer_head == _tx_buffer_tail) {

      (
# 199 ".././HardwareSerial.h" 3
     (*(volatile uint8_t *)(((uint16_t) &(
# 199 ".././HardwareSerial.h"
     *_ucsrb
# 199 ".././HardwareSerial.h" 3
     )))) 
# 199 ".././HardwareSerial.h"
     &= ~
# 199 ".././HardwareSerial.h" 3
     (1 << (5))
# 199 ".././HardwareSerial.h"
     );
     }
    }
};

  extern HardwareSerial Serial;



extern void serialEventRun(void) __attribute__((weak));
# 31 ".././HardwareSerial.cpp" 2
# 1 ".././HardwareSerial_private.h" 1
       
# 32 ".././HardwareSerial.cpp" 2
# 43 ".././HardwareSerial.cpp"
  void serialEvent() __attribute__((weak));
  bool Serial0_available() __attribute__((weak));
# 62 ".././HardwareSerial.cpp"
void serialEventRun(void)
{

  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
# 76 ".././HardwareSerial.cpp"
}
# 90 ".././HardwareSerial.cpp"
void HardwareSerial::begin(unsigned long baud, uint8_t config)
{

  uint16_t baud_setting = (_f_cpu / 4 / baud - 1) / 2;
  *_ucsra = 1 << 
# 94 ".././HardwareSerial.cpp" 3
                1
# 94 ".././HardwareSerial.cpp"
                    ;






  if (((_f_cpu == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
  {
    *_ucsra = 0;
    baud_setting = (_f_cpu / 8 / baud - 1) / 2;
  }


  *_ubrrh = baud_setting >> 8;
  *_ubrrl = baud_setting;

  _written = false;





  *_ucsrc = config;

  (
# 119 ".././HardwareSerial.cpp" 3
 (*(volatile uint8_t *)(((uint16_t) &(
# 119 ".././HardwareSerial.cpp"
 *_ucsrb
# 119 ".././HardwareSerial.cpp" 3
 )))) 
# 119 ".././HardwareSerial.cpp"
 |= 
# 119 ".././HardwareSerial.cpp" 3
 (1 << (4))
# 119 ".././HardwareSerial.cpp"
 );
  (
# 120 ".././HardwareSerial.cpp" 3
 (*(volatile uint8_t *)(((uint16_t) &(
# 120 ".././HardwareSerial.cpp"
 *_ucsrb
# 120 ".././HardwareSerial.cpp" 3
 )))) 
# 120 ".././HardwareSerial.cpp"
 |= 
# 120 ".././HardwareSerial.cpp" 3
 (1 << (3))
# 120 ".././HardwareSerial.cpp"
 );
  (
# 121 ".././HardwareSerial.cpp" 3
 (*(volatile uint8_t *)(((uint16_t) &(
# 121 ".././HardwareSerial.cpp"
 *_ucsrb
# 121 ".././HardwareSerial.cpp" 3
 )))) 
# 121 ".././HardwareSerial.cpp"
 |= 
# 121 ".././HardwareSerial.cpp" 3
 (1 << (7))
# 121 ".././HardwareSerial.cpp"
 );
  (
# 122 ".././HardwareSerial.cpp" 3
 (*(volatile uint8_t *)(((uint16_t) &(
# 122 ".././HardwareSerial.cpp"
 *_ucsrb
# 122 ".././HardwareSerial.cpp" 3
 )))) 
# 122 ".././HardwareSerial.cpp"
 &= ~
# 122 ".././HardwareSerial.cpp" 3
 (1 << (5))
# 122 ".././HardwareSerial.cpp"
 );
}

void HardwareSerial::end()
{

  flush();

  (
# 130 ".././HardwareSerial.cpp" 3
 (*(volatile uint8_t *)(((uint16_t) &(
# 130 ".././HardwareSerial.cpp"
 *_ucsrb
# 130 ".././HardwareSerial.cpp" 3
 )))) 
# 130 ".././HardwareSerial.cpp"
 &= ~
# 130 ".././HardwareSerial.cpp" 3
 (1 << (4))
# 130 ".././HardwareSerial.cpp"
 );
  (
# 131 ".././HardwareSerial.cpp" 3
 (*(volatile uint8_t *)(((uint16_t) &(
# 131 ".././HardwareSerial.cpp"
 *_ucsrb
# 131 ".././HardwareSerial.cpp" 3
 )))) 
# 131 ".././HardwareSerial.cpp"
 &= ~
# 131 ".././HardwareSerial.cpp" 3
 (1 << (3))
# 131 ".././HardwareSerial.cpp"
 );
  (
# 132 ".././HardwareSerial.cpp" 3
 (*(volatile uint8_t *)(((uint16_t) &(
# 132 ".././HardwareSerial.cpp"
 *_ucsrb
# 132 ".././HardwareSerial.cpp" 3
 )))) 
# 132 ".././HardwareSerial.cpp"
 &= ~
# 132 ".././HardwareSerial.cpp" 3
 (1 << (7))
# 132 ".././HardwareSerial.cpp"
 );
  (
# 133 ".././HardwareSerial.cpp" 3
 (*(volatile uint8_t *)(((uint16_t) &(
# 133 ".././HardwareSerial.cpp"
 *_ucsrb
# 133 ".././HardwareSerial.cpp" 3
 )))) 
# 133 ".././HardwareSerial.cpp"
 &= ~
# 133 ".././HardwareSerial.cpp" 3
 (1 << (5))
# 133 ".././HardwareSerial.cpp"
 );


  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
  return ((unsigned int)(64 + _rx_buffer_head - _rx_buffer_tail)) % 64;
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{

  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % 64;
    return c;
  }
}

int HardwareSerial::availableForWrite(void)
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  {
    head = _tx_buffer_head;
    tail = _tx_buffer_tail;
  }
  if (head >= tail) return 64 - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{



  if (!_written)
    return;

  while (
# 186 ".././HardwareSerial.cpp" 3
        ((*(volatile uint8_t *)(((uint16_t) &(
# 186 ".././HardwareSerial.cpp"
        *_ucsrb
# 186 ".././HardwareSerial.cpp" 3
        )))) & (1 << (5))) 
# 186 ".././HardwareSerial.cpp"
                                    || 
# 186 ".././HardwareSerial.cpp" 3
                                       (!((*(volatile uint8_t *)(((uint16_t) &(
# 186 ".././HardwareSerial.cpp"
                                       *_ucsra
# 186 ".././HardwareSerial.cpp" 3
                                       )))) & (1 << (6))))
# 186 ".././HardwareSerial.cpp"
                                                                  ) {
    if (
# 187 ".././HardwareSerial.cpp" 3
       (!((*(volatile uint8_t *)(((uint16_t) &((*(volatile uint8_t *)((0x3F) + 0x20)))))) & (1 << ((7))))) 
# 187 ".././HardwareSerial.cpp"
                                  && 
# 187 ".././HardwareSerial.cpp" 3
                                     ((*(volatile uint8_t *)(((uint16_t) &(
# 187 ".././HardwareSerial.cpp"
                                     *_ucsrb
# 187 ".././HardwareSerial.cpp" 3
                                     )))) & (1 << (5)))
# 187 ".././HardwareSerial.cpp"
                                                                )



 if (
# 191 ".././HardwareSerial.cpp" 3
    ((*(volatile uint8_t *)(((uint16_t) &(
# 191 ".././HardwareSerial.cpp"
    *_ucsra
# 191 ".././HardwareSerial.cpp" 3
    )))) & (1 << (5)))
# 191 ".././HardwareSerial.cpp"
                              )
   _tx_udr_empty_irq();
  }


}

size_t HardwareSerial::write(uint8_t c)
{
  _written = true;




  if (_tx_buffer_head == _tx_buffer_tail && 
# 205 ".././HardwareSerial.cpp" 3
                                           ((*(volatile uint8_t *)(((uint16_t) &(
# 205 ".././HardwareSerial.cpp"
                                           *_ucsra
# 205 ".././HardwareSerial.cpp" 3
                                           )))) & (1 << (5)))
# 205 ".././HardwareSerial.cpp"
                                                                     ) {
# 214 ".././HardwareSerial.cpp"
    
# 214 ".././HardwareSerial.cpp" 3
   for ( uint8_t sreg_save __attribute__((__cleanup__(__iRestore))) = (*(volatile uint8_t *)((0x3F) + 0x20)), __ToDo = __iCliRetVal(); __ToDo ; __ToDo = 0 ) 
# 214 ".././HardwareSerial.cpp"
                                     {
      *_udr = c;

      *_ucsra = ((*_ucsra) & ((1 << 
# 217 ".././HardwareSerial.cpp" 3
                                   1
# 217 ".././HardwareSerial.cpp"
                                       ) | (1 << 
# 217 ".././HardwareSerial.cpp" 3
                                                 0
# 217 ".././HardwareSerial.cpp"
                                                      ))) | (1 << 
# 217 ".././HardwareSerial.cpp" 3
                                                                  6
# 217 ".././HardwareSerial.cpp"
                                                                      );



    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % 64;



  while (i == _tx_buffer_tail) {
    if (
# 229 ".././HardwareSerial.cpp" 3
       (!((*(volatile uint8_t *)(((uint16_t) &((*(volatile uint8_t *)((0x3F) + 0x20)))))) & (1 << ((7)))))
# 229 ".././HardwareSerial.cpp"
                                 ) {




      if(
# 234 ".././HardwareSerial.cpp" 3
        ((*(volatile uint8_t *)(((uint16_t) &(
# 234 ".././HardwareSerial.cpp"
        *_ucsra
# 234 ".././HardwareSerial.cpp" 3
        )))) & (1 << (5)))
# 234 ".././HardwareSerial.cpp"
                                  )
  _tx_udr_empty_irq();
    } else {

    }
  }

  _tx_buffer[_tx_buffer_head] = c;




  
# 246 ".././HardwareSerial.cpp" 3
 for ( uint8_t sreg_save __attribute__((__cleanup__(__iRestore))) = (*(volatile uint8_t *)((0x3F) + 0x20)), __ToDo = __iCliRetVal(); __ToDo ; __ToDo = 0 ) 
# 246 ".././HardwareSerial.cpp"
                                   {
    _tx_buffer_head = i;
    (
# 248 ".././HardwareSerial.cpp" 3
   (*(volatile uint8_t *)(((uint16_t) &(
# 248 ".././HardwareSerial.cpp"
   *_ucsrb
# 248 ".././HardwareSerial.cpp" 3
   )))) 
# 248 ".././HardwareSerial.cpp"
   |= 
# 248 ".././HardwareSerial.cpp" 3
   (1 << (5))
# 248 ".././HardwareSerial.cpp"
   );
  }

  return 1;
}
