
P008Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000c64  00000cf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800132  00800132  00000d2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bca  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c53  00000000  00000000  00002a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065e  00000000  00000000  00003679  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00003cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000daf  00000000  00000000  00003f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000add  00000000  00000000  00004cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000057dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 34       	cpi	r26, 0x49	; 73
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9f 03 	call	0x73e	; 0x73e <main>
  9e:	0c 94 30 06 	jmp	0xc60	; 0xc60 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZNK12FunctionSlotIPFvvEIEE4callEv>:
	public:
	
	FunctionSlot(FuncType Func):Func(Func){}
	~FunctionSlot(){}
	void call(Args... args)const{
		return Func(args...);
  a6:	dc 01       	movw	r26, r24
  a8:	12 96       	adiw	r26, 0x02	; 2
  aa:	ed 91       	ld	r30, X+
  ac:	fc 91       	ld	r31, X
  ae:	13 97       	sbiw	r26, 0x03	; 3
  b0:	09 95       	icall
  b2:	08 95       	ret

000000b4 <_ZNK12FunctionSlotIPFvvEIEE4sizeEv>:
	}
	uint8_t size()const{return sizeof(FunctionSlot);}
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	08 95       	ret

000000b8 <_ZN12FunctionSlotIPFvvEIEED1Ev>:
class AbstractDelegator{
	
	public:
	virtual void call(Args... args)const = 0;
	virtual uint8_t size() const= 0;
	virtual ~AbstractDelegator(){}
  b8:	22 e1       	ldi	r18, 0x12	; 18
  ba:	31 e0       	ldi	r19, 0x01	; 1
  bc:	fc 01       	movw	r30, r24
  be:	31 83       	std	Z+1, r19	; 0x01
  c0:	20 83       	st	Z, r18
  c2:	08 95       	ret

000000c4 <_ZN12FunctionSlotIPFvvEIEED0Ev>:
  c4:	22 e1       	ldi	r18, 0x12	; 18
  c6:	31 e0       	ldi	r19, 0x01	; 1
  c8:	fc 01       	movw	r30, r24
  ca:	31 83       	std	Z+1, r19	; 0x01
  cc:	20 83       	st	Z, r18
class FunctionSlot:public AbstractDelegator<Args...>{
	FuncType Func;
	public:
	
	FunctionSlot(FuncType Func):Func(Func){}
	~FunctionSlot(){}
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	0e 94 17 04 	call	0x82e	; 0x82e <_ZdlPvj>
  d6:	08 95       	ret

000000d8 <_ZN9scheduler4initEv>:
			days = _clk;	
		}
	};
	
	
	void init(){
  d8:	2f 92       	push	r2
  da:	3f 92       	push	r3
  dc:	4f 92       	push	r4
  de:	5f 92       	push	r5
  e0:	6f 92       	push	r6
  e2:	7f 92       	push	r7
  e4:	8f 92       	push	r8
  e6:	9f 92       	push	r9
  e8:	af 92       	push	r10
  ea:	bf 92       	push	r11
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	a2 97       	sbiw	r28, 0x22	; 34
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
		TCCR0B |= (1<<WGM12);
 10c:	85 b5       	in	r24, 0x25	; 37
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	85 bd       	out	0x25, r24	; 37
		TIMSK0 |= (1<<OCIE0A);
 112:	ee e6       	ldi	r30, 0x6E	; 110
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	80 83       	st	Z, r24
	uint8_t bestCS;	
};
constexpr TimerParams bestTimerParams(uint64_t f_cpu,uint64_t f_target){
	uint32_t best_delta = -1;
	
	struct TimerParams TP{255,3};
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	29 a3       	std	Y+33, r18	; 0x21
 120:	33 e0       	ldi	r19, 0x03	; 3
 122:	3a a3       	std	Y+34, r19	; 0x22
	
	uint16_t divs[4] = {1,8,64,256};
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	e6 e0       	ldi	r30, 0x06	; 6
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	de 01       	movw	r26, r28
 12c:	11 96       	adiw	r26, 0x01	; 1
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	8a 95       	dec	r24
 134:	e1 f7       	brne	.-8      	; 0x12e <_ZN9scheduler4initEv+0x56>
	
	for(uint64_t ocr=1;ocr != 0;++ocr){
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	4b 8b       	std	Y+19, r20	; 0x13
 13a:	1a 8e       	std	Y+26, r1	; 0x1a
 13c:	1b 8e       	std	Y+27, r1	; 0x1b
 13e:	1c 8e       	std	Y+28, r1	; 0x1c
 140:	1d 8e       	std	Y+29, r1	; 0x1d
 142:	1e 8e       	std	Y+30, r1	; 0x1e
 144:	1f 8e       	std	Y+31, r1	; 0x1f
 146:	18 a2       	std	Y+32, r1	; 0x20
 148:	2b 89       	ldd	r18, Y+19	; 0x13
 14a:	3a 8d       	ldd	r19, Y+26	; 0x1a
 14c:	4b 8d       	ldd	r20, Y+27	; 0x1b
 14e:	5c 8d       	ldd	r21, Y+28	; 0x1c
 150:	6d 8d       	ldd	r22, Y+29	; 0x1d
 152:	7e 8d       	ldd	r23, Y+30	; 0x1e
 154:	8f 8d       	ldd	r24, Y+31	; 0x1f
 156:	98 a1       	ldd	r25, Y+32	; 0x20
 158:	a0 e0       	ldi	r26, 0x00	; 0
 15a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__cmpdi2_s8>
 15e:	09 f4       	brne	.+2      	; 0x162 <_ZN9scheduler4initEv+0x8a>
 160:	de c0       	rjmp	.+444    	; 0x31e <_ZN9scheduler4initEv+0x246>
 162:	68 94       	set
 164:	66 24       	eor	r6, r6
 166:	62 f8       	bld	r6, 2
 168:	e0 e0       	ldi	r30, 0x00	; 0
 16a:	e1 2c       	mov	r14, r1
 16c:	f1 2c       	mov	r15, r1
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	4e 2e       	mov	r4, r30
 178:	2f 2e       	mov	r2, r31
 17a:	07 c0       	rjmp	.+14     	; 0x18a <_ZN9scheduler4initEv+0xb2>
 17c:	69 88       	ldd	r6, Y+17	; 0x11
 17e:	ec 88       	ldd	r14, Y+20	; 0x14
 180:	fd 88       	ldd	r15, Y+21	; 0x15
 182:	0e 89       	ldd	r16, Y+22	; 0x16
 184:	1f 89       	ldd	r17, Y+23	; 0x17
 186:	b8 8d       	ldd	r27, Y+24	; 0x18
 188:	29 8c       	ldd	r2, Y+25	; 0x19
		for(uint64_t cs = 4;cs >0;--cs){
 18a:	26 2d       	mov	r18, r6
 18c:	34 2d       	mov	r19, r4
 18e:	4e 2d       	mov	r20, r14
 190:	5f 2d       	mov	r21, r15
 192:	60 2f       	mov	r22, r16
 194:	71 2f       	mov	r23, r17
 196:	8b 2f       	mov	r24, r27
 198:	92 2d       	mov	r25, r2
 19a:	a0 e0       	ldi	r26, 0x00	; 0
 19c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__cmpdi2_s8>
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <_ZN9scheduler4initEv+0xcc>
 1a2:	a9 c0       	rjmp	.+338    	; 0x2f6 <_ZN9scheduler4initEv+0x21e>
			uint64_t div= divs[cs-1];
 1a4:	af ef       	ldi	r26, 0xFF	; 255
 1a6:	0e 94 c2 04 	call	0x984	; 0x984 <__adddi3_s8>
 1aa:	29 8b       	std	Y+17, r18	; 0x11
 1ac:	43 2e       	mov	r4, r19
 1ae:	4c 8b       	std	Y+20, r20	; 0x14
 1b0:	5d 8b       	std	Y+21, r21	; 0x15
 1b2:	6e 8b       	std	Y+22, r22	; 0x16
 1b4:	7f 8b       	std	Y+23, r23	; 0x17
 1b6:	88 8f       	std	Y+24, r24	; 0x18
 1b8:	99 8f       	std	Y+25, r25	; 0x19
 1ba:	82 2f       	mov	r24, r18
 1bc:	94 2d       	mov	r25, r4
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	e1 e0       	ldi	r30, 0x01	; 1
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ec 0f       	add	r30, r28
 1c8:	fd 1f       	adc	r31, r29
 1ca:	e8 0f       	add	r30, r24
 1cc:	f9 1f       	adc	r31, r25
 1ce:	20 80       	ld	r2, Z
 1d0:	31 80       	ldd	r3, Z+1	; 0x01
 1d2:	91 01       	movw	r18, r2
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	cb 01       	movw	r24, r22
 1de:	29 86       	std	Y+9, r2	; 0x09
 1e0:	3a 87       	std	Y+10, r19	; 0x0a
 1e2:	4b 87       	std	Y+11, r20	; 0x0b
 1e4:	5c 87       	std	Y+12, r21	; 0x0c
 1e6:	6d 87       	std	Y+13, r22	; 0x0d
 1e8:	7e 87       	std	Y+14, r23	; 0x0e
 1ea:	8f 87       	std	Y+15, r24	; 0x0f
 1ec:	98 8b       	std	Y+16, r25	; 0x10
			uint32_t tmp_delta = difference(f_cpu,f_target*(ocr+1)*div*2);
 1ee:	2b 89       	ldd	r18, Y+19	; 0x13
 1f0:	3a 8d       	ldd	r19, Y+26	; 0x1a
 1f2:	4b 8d       	ldd	r20, Y+27	; 0x1b
 1f4:	5c 8d       	ldd	r21, Y+28	; 0x1c
 1f6:	6d 8d       	ldd	r22, Y+29	; 0x1d
 1f8:	7e 8d       	ldd	r23, Y+30	; 0x1e
 1fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
 1fc:	98 a1       	ldd	r25, Y+32	; 0x20
 1fe:	a1 e0       	ldi	r26, 0x01	; 1
 200:	0e 94 c2 04 	call	0x984	; 0x984 <__adddi3_s8>
 204:	72 2e       	mov	r7, r18
 206:	83 2e       	mov	r8, r19
 208:	94 2e       	mov	r9, r20
 20a:	55 2e       	mov	r5, r21
 20c:	b6 2f       	mov	r27, r22
 20e:	a7 2f       	mov	r26, r23
 210:	f8 2f       	mov	r31, r24
 212:	e9 2f       	mov	r30, r25
 214:	02 e0       	ldi	r16, 0x02	; 2
 216:	0e 94 a0 04 	call	0x940	; 0x940 <__ashldi3>
 21a:	a2 2e       	mov	r10, r18
 21c:	b3 2e       	mov	r11, r19
 21e:	c4 2e       	mov	r12, r20
 220:	d5 2e       	mov	r13, r21
 222:	e6 2e       	mov	r14, r22
 224:	f7 2e       	mov	r15, r23
 226:	8a 8b       	std	Y+18, r24	; 0x12
 228:	19 2f       	mov	r17, r25
 22a:	05 e0       	ldi	r16, 0x05	; 5
 22c:	0e 94 a0 04 	call	0x940	; 0x940 <__ashldi3>
 230:	0a 89       	ldd	r16, Y+18	; 0x12
 232:	0e 94 ce 04 	call	0x99c	; 0x99c <__subdi3>
 236:	a7 2c       	mov	r10, r7
 238:	b8 2c       	mov	r11, r8
 23a:	c9 2c       	mov	r12, r9
 23c:	d5 2c       	mov	r13, r5
 23e:	eb 2e       	mov	r14, r27
 240:	fa 2e       	mov	r15, r26
 242:	0f 2f       	mov	r16, r31
 244:	1e 2f       	mov	r17, r30
 246:	0e 94 b9 04 	call	0x972	; 0x972 <__adddi3>
 24a:	03 e0       	ldi	r16, 0x03	; 3
 24c:	0e 94 a0 04 	call	0x940	; 0x940 <__ashldi3>
 250:	a9 84       	ldd	r10, Y+9	; 0x09
 252:	ba 84       	ldd	r11, Y+10	; 0x0a
 254:	c1 2c       	mov	r12, r1
 256:	d1 2c       	mov	r13, r1
 258:	e1 2c       	mov	r14, r1
 25a:	f1 2c       	mov	r15, r1
 25c:	00 e0       	ldi	r16, 0x00	; 0
 25e:	10 e0       	ldi	r17, 0x00	; 0
 260:	0e 94 47 04 	call	0x88e	; 0x88e <__muldi3>
 264:	01 e0       	ldi	r16, 0x01	; 1
 266:	0e 94 a0 04 	call	0x940	; 0x940 <__ashldi3>
 26a:	2f 3f       	cpi	r18, 0xFF	; 255
 26c:	33 42       	sbci	r19, 0x23	; 35
 26e:	44 4f       	sbci	r20, 0xF4	; 244
 270:	51 05       	cpc	r21, r1
 272:	61 05       	cpc	r22, r1
 274:	71 05       	cpc	r23, r1
 276:	81 05       	cpc	r24, r1
 278:	91 05       	cpc	r25, r1
 27a:	09 f0       	breq	.+2      	; 0x27e <_ZN9scheduler4initEv+0x1a6>
 27c:	e0 f4       	brcc	.+56     	; 0x2b6 <_ZN9scheduler4initEv+0x1de>
 27e:	a8 ee       	ldi	r26, 0xE8	; 232
 280:	b3 e0       	ldi	r27, 0x03	; 3
 282:	27 2d       	mov	r18, r7
 284:	38 2d       	mov	r19, r8
 286:	49 2d       	mov	r20, r9
 288:	55 2d       	mov	r21, r5
 28a:	0e 94 3c 04 	call	0x878	; 0x878 <__muluhisi3>
 28e:	9b 01       	movw	r18, r22
 290:	ac 01       	movw	r20, r24
 292:	d1 01       	movw	r26, r2
 294:	0e 94 3c 04 	call	0x878	; 0x878 <__muluhisi3>
 298:	8b 01       	movw	r16, r22
 29a:	9c 01       	movw	r18, r24
 29c:	00 0f       	add	r16, r16
 29e:	11 1f       	adc	r17, r17
 2a0:	22 1f       	adc	r18, r18
 2a2:	33 1f       	adc	r19, r19
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	94 e2       	ldi	r25, 0x24	; 36
 2a8:	a4 ef       	ldi	r26, 0xF4	; 244
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	80 1b       	sub	r24, r16
 2ae:	91 0b       	sbc	r25, r17
 2b0:	a2 0b       	sbc	r26, r18
 2b2:	b3 0b       	sbc	r27, r19
 2b4:	16 c0       	rjmp	.+44     	; 0x2e2 <_ZN9scheduler4initEv+0x20a>
 2b6:	a8 ee       	ldi	r26, 0xE8	; 232
 2b8:	b3 e0       	ldi	r27, 0x03	; 3
 2ba:	27 2d       	mov	r18, r7
 2bc:	38 2d       	mov	r19, r8
 2be:	49 2d       	mov	r20, r9
 2c0:	55 2d       	mov	r21, r5
 2c2:	0e 94 3c 04 	call	0x878	; 0x878 <__muluhisi3>
 2c6:	9b 01       	movw	r18, r22
 2c8:	ac 01       	movw	r20, r24
 2ca:	d1 01       	movw	r26, r2
 2cc:	0e 94 3c 04 	call	0x878	; 0x878 <__muluhisi3>
 2d0:	dc 01       	movw	r26, r24
 2d2:	cb 01       	movw	r24, r22
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	aa 1f       	adc	r26, r26
 2da:	bb 1f       	adc	r27, r27
 2dc:	94 52       	subi	r25, 0x24	; 36
 2de:	a4 4f       	sbci	r26, 0xF4	; 244
 2e0:	b1 09       	sbc	r27, r1
			if(tmp_delta < best_delta){
 2e2:	8f 3f       	cpi	r24, 0xFF	; 255
 2e4:	9f 4f       	sbci	r25, 0xFF	; 255
 2e6:	af 4f       	sbci	r26, 0xFF	; 255
 2e8:	bf 4f       	sbci	r27, 0xFF	; 255
 2ea:	09 f4       	brne	.+2      	; 0x2ee <_ZN9scheduler4initEv+0x216>
 2ec:	47 cf       	rjmp	.-370    	; 0x17c <_ZN9scheduler4initEv+0xa4>
				TP.bestOCRA = ocr;
 2ee:	3b 89       	ldd	r19, Y+19	; 0x13
 2f0:	39 a3       	std	Y+33, r19	; 0x21
				TP.bestCS = cs;
 2f2:	6a a2       	std	Y+34, r6	; 0x22
 2f4:	43 cf       	rjmp	.-378    	; 0x17c <_ZN9scheduler4initEv+0xa4>
	
	struct TimerParams TP{255,3};
	
	uint16_t divs[4] = {1,8,64,256};
	
	for(uint64_t ocr=1;ocr != 0;++ocr){
 2f6:	2b 89       	ldd	r18, Y+19	; 0x13
 2f8:	3a 8d       	ldd	r19, Y+26	; 0x1a
 2fa:	4b 8d       	ldd	r20, Y+27	; 0x1b
 2fc:	5c 8d       	ldd	r21, Y+28	; 0x1c
 2fe:	6d 8d       	ldd	r22, Y+29	; 0x1d
 300:	7e 8d       	ldd	r23, Y+30	; 0x1e
 302:	8f 8d       	ldd	r24, Y+31	; 0x1f
 304:	98 a1       	ldd	r25, Y+32	; 0x20
 306:	a1 e0       	ldi	r26, 0x01	; 1
 308:	0e 94 c2 04 	call	0x984	; 0x984 <__adddi3_s8>
 30c:	2b 8b       	std	Y+19, r18	; 0x13
 30e:	3a 8f       	std	Y+26, r19	; 0x1a
 310:	4b 8f       	std	Y+27, r20	; 0x1b
 312:	5c 8f       	std	Y+28, r21	; 0x1c
 314:	6d 8f       	std	Y+29, r22	; 0x1d
 316:	7e 8f       	std	Y+30, r23	; 0x1e
 318:	8f 8f       	std	Y+31, r24	; 0x1f
 31a:	98 a3       	std	Y+32, r25	; 0x20
 31c:	15 cf       	rjmp	.-470    	; 0x148 <_ZN9scheduler4initEv+0x70>
	void init(){
		TCCR0B |= (1<<WGM12);
		TIMSK0 |= (1<<OCIE0A);
		
		TimerParams TP = bestTimerParams(F_CPU,1000);
		OCR0A = TP.bestOCRA; //124
 31e:	49 a1       	ldd	r20, Y+33	; 0x21
 320:	47 bd       	out	0x27, r20	; 39
		TCCR0B |= TP.bestCS; //3
 322:	85 b5       	in	r24, 0x25	; 37
 324:	5a a1       	ldd	r21, Y+34	; 0x22
 326:	85 2b       	or	r24, r21
 328:	85 bd       	out	0x25, r24	; 37
	}
 32a:	a2 96       	adiw	r28, 0x22	; 34
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	bf 90       	pop	r11
 348:	af 90       	pop	r10
 34a:	9f 90       	pop	r9
 34c:	8f 90       	pop	r8
 34e:	7f 90       	pop	r7
 350:	6f 90       	pop	r6
 352:	5f 90       	pop	r5
 354:	4f 90       	pop	r4
 356:	3f 90       	pop	r3
 358:	2f 90       	pop	r2
 35a:	08 95       	ret

0000035c <_ZN9scheduler11scheduler_rEv>:
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	static scheduler & scheduler_r(){
		static scheduler S;
 35c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_ZGVZN9scheduler11scheduler_rEvE1S>
 360:	81 11       	cpse	r24, r1
 362:	16 c0       	rjmp	.+44     	; 0x390 <_ZN9scheduler11scheduler_rEv+0x34>
 364:	83 e3       	ldi	r24, 0x33	; 51
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 1a 04 	call	0x834	; 0x834 <__cxa_guard_acquire>
 36c:	89 2b       	or	r24, r25
 36e:	81 f0       	breq	.+32     	; 0x390 <_ZN9scheduler11scheduler_rEv+0x34>
	void set_clock(const _data & dat){
		_clock = dat;
	}
	
	private:
	scheduler():_clock(0){}
 370:	eb e3       	ldi	r30, 0x3B	; 59
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	10 82       	st	Z, r1
 376:	11 82       	std	Z+1, r1	; 0x01
 378:	12 82       	std	Z+2, r1	; 0x02
 37a:	13 82       	std	Z+3, r1	; 0x03
 37c:	14 82       	std	Z+4, r1	; 0x04
 37e:	15 82       	std	Z+5, r1	; 0x05
 380:	16 82       	std	Z+6, r1	; 0x06
 382:	17 82       	std	Z+7, r1	; 0x07
template <typename T>
class list{
	list_data<T> *first;
	
	public:
	list():first(0){}
 384:	11 86       	std	Z+9, r1	; 0x09
 386:	10 86       	std	Z+8, r1	; 0x08
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	static scheduler & scheduler_r(){
		static scheduler S;
 388:	83 e3       	ldi	r24, 0x33	; 51
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 23 04 	call	0x846	; 0x846 <__cxa_guard_release>
		return S;
	}
 390:	8b e3       	ldi	r24, 0x3B	; 59
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	08 95       	ret

00000396 <__vector_14>:
	static scheduler * scheduler_p(){
		return &scheduler_r();
	}
};

ISR(TIMER0_COMPA_vect){
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	8f 92       	push	r8
 3a2:	9f 92       	push	r9
 3a4:	af 92       	push	r10
 3a6:	bf 92       	push	r11
 3a8:	cf 92       	push	r12
 3aa:	df 92       	push	r13
 3ac:	ef 92       	push	r14
 3ae:	ff 92       	push	r15
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	2f 93       	push	r18
 3b6:	3f 93       	push	r19
 3b8:	4f 93       	push	r20
 3ba:	5f 93       	push	r21
 3bc:	6f 93       	push	r22
 3be:	7f 93       	push	r23
 3c0:	8f 93       	push	r24
 3c2:	9f 93       	push	r25
 3c4:	af 93       	push	r26
 3c6:	bf 93       	push	r27
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	static scheduler & scheduler_r(){
		static scheduler S;
 3d0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_ZGVZN9scheduler11scheduler_rEvE1S>
 3d4:	81 11       	cpse	r24, r1
 3d6:	16 c0       	rjmp	.+44     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3d8:	83 e3       	ldi	r24, 0x33	; 51
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 1a 04 	call	0x834	; 0x834 <__cxa_guard_acquire>
 3e0:	89 2b       	or	r24, r25
 3e2:	81 f0       	breq	.+32     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	void set_clock(const _data & dat){
		_clock = dat;
	}
	
	private:
	scheduler():_clock(0){}
 3e4:	eb e3       	ldi	r30, 0x3B	; 59
 3e6:	f1 e0       	ldi	r31, 0x01	; 1
 3e8:	10 82       	st	Z, r1
 3ea:	11 82       	std	Z+1, r1	; 0x01
 3ec:	12 82       	std	Z+2, r1	; 0x02
 3ee:	13 82       	std	Z+3, r1	; 0x03
 3f0:	14 82       	std	Z+4, r1	; 0x04
 3f2:	15 82       	std	Z+5, r1	; 0x05
 3f4:	16 82       	std	Z+6, r1	; 0x06
 3f6:	17 82       	std	Z+7, r1	; 0x07
 3f8:	11 86       	std	Z+9, r1	; 0x09
 3fa:	10 86       	std	Z+8, r1	; 0x08
	scheduler(const scheduler &) = delete;
	scheduler(scheduler &&) = delete;
	public:
	
	static scheduler & scheduler_r(){
		static scheduler S;
 3fc:	83 e3       	ldi	r24, 0x33	; 51
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 23 04 	call	0x846	; 0x846 <__cxa_guard_release>
	template <typename...FunctionInfo>
	void conect_by_delta_clock(uint64_t delta_clock,FunctionInfo...fInfo){
		alarm_calls.push_back(_alarm(delta_clock+_clock,DelegatorConstructor<>::Construct(fInfo...)) );
	}
	void timer_ocr_interrupt(){
		++_clock;
 404:	eb e3       	ldi	r30, 0x3B	; 59
 406:	f1 e0       	ldi	r31, 0x01	; 1
 408:	20 81       	ld	r18, Z
 40a:	31 81       	ldd	r19, Z+1	; 0x01
 40c:	42 81       	ldd	r20, Z+2	; 0x02
 40e:	53 81       	ldd	r21, Z+3	; 0x03
 410:	64 81       	ldd	r22, Z+4	; 0x04
 412:	75 81       	ldd	r23, Z+5	; 0x05
 414:	86 81       	ldd	r24, Z+6	; 0x06
 416:	97 81       	ldd	r25, Z+7	; 0x07
 418:	a1 e0       	ldi	r26, 0x01	; 1
 41a:	0e 94 c2 04 	call	0x984	; 0x984 <__adddi3_s8>
 41e:	20 83       	st	Z, r18
 420:	31 83       	std	Z+1, r19	; 0x01
 422:	42 83       	std	Z+2, r20	; 0x02
 424:	53 83       	std	Z+3, r21	; 0x03
 426:	64 83       	std	Z+4, r22	; 0x04
 428:	75 83       	std	Z+5, r23	; 0x05
 42a:	86 83       	std	Z+6, r24	; 0x06
 42c:	97 83       	std	Z+7, r25	; 0x07
	
	struct iterator{
		list_data<T> *ptr;
		list_data<T> *prev;
		
		iterator(list_data<T> *ptr):ptr(ptr),prev(0){}
 42e:	80 85       	ldd	r24, Z+8	; 0x08
 430:	91 85       	ldd	r25, Z+9	; 0x09
 432:	d8 2f       	mov	r29, r24
 434:	c9 2f       	mov	r28, r25
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	88 2e       	mov	r8, r24
 43c:	99 2e       	mov	r9, r25
		}
		bool operator ==(const iterator & it) const{
			return ptr == it.ptr;
		}
		bool operator !=(const iterator & it) const{
			return ptr != it.ptr;
 43e:	ed 2f       	mov	r30, r29
 440:	fc 2f       	mov	r31, r28
		for(auto it = alarm_calls.begin();it != alarm_calls.end();){
 442:	30 97       	sbiw	r30, 0x00	; 0
 444:	09 f4       	brne	.+2      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 446:	70 c0       	rjmp	.+224    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
			if((*it).alarm_clock <= _clock ){
 448:	20 81       	ld	r18, Z
 44a:	31 81       	ldd	r19, Z+1	; 0x01
 44c:	42 81       	ldd	r20, Z+2	; 0x02
 44e:	53 81       	ldd	r21, Z+3	; 0x03
 450:	64 81       	ldd	r22, Z+4	; 0x04
 452:	75 81       	ldd	r23, Z+5	; 0x05
 454:	ab e3       	ldi	r26, 0x3B	; 59
 456:	b1 e0       	ldi	r27, 0x01	; 1
 458:	ac 90       	ld	r10, X
 45a:	11 96       	adiw	r26, 0x01	; 1
 45c:	bc 90       	ld	r11, X
 45e:	11 97       	sbiw	r26, 0x01	; 1
 460:	12 96       	adiw	r26, 0x02	; 2
 462:	cc 90       	ld	r12, X
 464:	12 97       	sbiw	r26, 0x02	; 2
 466:	13 96       	adiw	r26, 0x03	; 3
 468:	dc 90       	ld	r13, X
 46a:	13 97       	sbiw	r26, 0x03	; 3
 46c:	14 96       	adiw	r26, 0x04	; 4
 46e:	ec 90       	ld	r14, X
 470:	14 97       	sbiw	r26, 0x04	; 4
 472:	15 96       	adiw	r26, 0x05	; 5
 474:	fc 90       	ld	r15, X
 476:	15 97       	sbiw	r26, 0x05	; 5
 478:	16 96       	adiw	r26, 0x06	; 6
 47a:	0c 91       	ld	r16, X
 47c:	16 97       	sbiw	r26, 0x06	; 6
 47e:	17 96       	adiw	r26, 0x07	; 7
 480:	1c 91       	ld	r17, X
 482:	86 81       	ldd	r24, Z+6	; 0x06
 484:	97 81       	ldd	r25, Z+7	; 0x07
 486:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__cmpdi2>
 48a:	11 f0       	breq	.+4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48c:	08 f0       	brcs	.+2      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48e:	44 c0       	rjmp	.+136    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
				(*it).Slot->call();
 490:	80 85       	ldd	r24, Z+8	; 0x08
 492:	91 85       	ldd	r25, Z+9	; 0x09
 494:	dc 01       	movw	r26, r24
 496:	ed 91       	ld	r30, X+
 498:	fc 91       	ld	r31, X
 49a:	01 90       	ld	r0, Z+
 49c:	f0 81       	ld	r31, Z
 49e:	e0 2d       	mov	r30, r0
 4a0:	09 95       	icall
		}
		T & operator *(){
			return ptr->data;
 4a2:	8d 2f       	mov	r24, r29
 4a4:	9c 2f       	mov	r25, r28
 4a6:	fc 01       	movw	r30, r24
				delete (*it).Slot;
 4a8:	80 85       	ldd	r24, Z+8	; 0x08
 4aa:	91 85       	ldd	r25, Z+9	; 0x09
 4ac:	00 97       	sbiw	r24, 0x00	; 0
 4ae:	39 f0       	breq	.+14     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b0:	dc 01       	movw	r26, r24
 4b2:	ed 91       	ld	r30, X+
 4b4:	fc 91       	ld	r31, X
 4b6:	06 80       	ldd	r0, Z+6	; 0x06
 4b8:	f7 81       	ldd	r31, Z+7	; 0x07
 4ba:	e0 2d       	mov	r30, r0
 4bc:	09 95       	icall
	iterator end(){
		return iterator(0);
	}
	
	iterator & remove(iterator & it){
		if(it.ptr){
 4be:	8d 2f       	mov	r24, r29
 4c0:	9c 2f       	mov	r25, r28
 4c2:	fc 01       	movw	r30, r24
 4c4:	30 97       	sbiw	r30, 0x00	; 0
 4c6:	09 f4       	brne	.+2      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c8:	ba cf       	rjmp	.-140    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			if(it.prev){
 4ca:	28 2d       	mov	r18, r8
 4cc:	39 2d       	mov	r19, r9
 4ce:	d9 01       	movw	r26, r18
 4d0:	10 97       	sbiw	r26, 0x00	; 0
 4d2:	69 f0       	breq	.+26     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
				auto tmp_ptr = it.ptr->next;
 4d4:	02 85       	ldd	r16, Z+10	; 0x0a
 4d6:	13 85       	ldd	r17, Z+11	; 0x0b
				it.prev->next = tmp_ptr;
 4d8:	1b 96       	adiw	r26, 0x0b	; 11
 4da:	1c 93       	st	X, r17
 4dc:	0e 93       	st	-X, r16
 4de:	1a 97       	sbiw	r26, 0x0a	; 10
				delete it.ptr;
 4e0:	6c e0       	ldi	r22, 0x0C	; 12
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	0e 94 17 04 	call	0x82e	; 0x82e <_ZdlPvj>
				it.ptr = tmp_ptr;
 4e8:	d0 2f       	mov	r29, r16
 4ea:	c1 2f       	mov	r28, r17
 4ec:	a8 cf       	rjmp	.-176    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			}
			else{
				first = it.ptr->next;
 4ee:	82 85       	ldd	r24, Z+10	; 0x0a
 4f0:	93 85       	ldd	r25, Z+11	; 0x0b
 4f2:	0b e3       	ldi	r16, 0x3B	; 59
 4f4:	11 e0       	ldi	r17, 0x01	; 1
 4f6:	f8 01       	movw	r30, r16
 4f8:	91 87       	std	Z+9, r25	; 0x09
 4fa:	80 87       	std	Z+8, r24	; 0x08
				delete it.ptr;
 4fc:	6c e0       	ldi	r22, 0x0C	; 12
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	8d 2f       	mov	r24, r29
 502:	9c 2f       	mov	r25, r28
 504:	0e 94 17 04 	call	0x82e	; 0x82e <_ZdlPvj>
				it.ptr =  first;
 508:	d8 01       	movw	r26, r16
 50a:	18 96       	adiw	r26, 0x08	; 8
 50c:	8d 91       	ld	r24, X+
 50e:	9c 91       	ld	r25, X
 510:	19 97       	sbiw	r26, 0x09	; 9
 512:	d8 2f       	mov	r29, r24
 514:	c9 2f       	mov	r28, r25
 516:	93 cf       	rjmp	.-218    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
		list_data<T> *ptr;
		list_data<T> *prev;
		
		iterator(list_data<T> *ptr):ptr(ptr),prev(0){}
		iterator & operator ++(){
			prev = ptr;
 518:	cf 01       	movw	r24, r30
 51a:	88 2e       	mov	r8, r24
 51c:	99 2e       	mov	r9, r25
			ptr = ptr->next;
 51e:	82 85       	ldd	r24, Z+10	; 0x0a
 520:	93 85       	ldd	r25, Z+11	; 0x0b
 522:	d8 2f       	mov	r29, r24
 524:	c9 2f       	mov	r28, r25
 526:	8b cf       	rjmp	.-234    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
	}
};

ISR(TIMER0_COMPA_vect){
	scheduler::scheduler_r().timer_ocr_interrupt();
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	bf 91       	pop	r27
 532:	af 91       	pop	r26
 534:	9f 91       	pop	r25
 536:	8f 91       	pop	r24
 538:	7f 91       	pop	r23
 53a:	6f 91       	pop	r22
 53c:	5f 91       	pop	r21
 53e:	4f 91       	pop	r20
 540:	3f 91       	pop	r19
 542:	2f 91       	pop	r18
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	ff 90       	pop	r15
 54a:	ef 90       	pop	r14
 54c:	df 90       	pop	r13
 54e:	cf 90       	pop	r12
 550:	bf 90       	pop	r11
 552:	af 90       	pop	r10
 554:	9f 90       	pop	r9
 556:	8f 90       	pop	r8
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <_Z7set7segh>:

const unsigned char digit[11] = {DIGIT7_0,DIGIT7_1,DIGIT7_2,DIGIT7_3,DIGIT7_4,DIGIT7_5,DIGIT7_6,DIGIT7_7,DIGIT7_8,DIGIT7_9,DIGIT7_NONE};


void set7seg(uint8_t num){
	uint16_t seg7 = digit[num] << 2;
 562:	e8 2f       	mov	r30, r24
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	ea 5d       	subi	r30, 0xDA	; 218
 568:	fe 4f       	sbci	r31, 0xFE	; 254
 56a:	80 81       	ld	r24, Z
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
	set_port(PORTD,0b11111100,seg7);
 576:	3b b1       	in	r19, 0x0b	; 11
 578:	33 70       	andi	r19, 0x03	; 3
 57a:	28 2f       	mov	r18, r24
 57c:	2c 7f       	andi	r18, 0xFC	; 252
 57e:	83 2f       	mov	r24, r19
 580:	82 2b       	or	r24, r18
 582:	8b b9       	out	0x0b, r24	; 11
	set_port(PORTB,0b00000001,seg7>>8);
 584:	85 b1       	in	r24, 0x05	; 5
 586:	8e 7f       	andi	r24, 0xFE	; 254
 588:	91 70       	andi	r25, 0x01	; 1
 58a:	89 2b       	or	r24, r25
 58c:	85 b9       	out	0x05, r24	; 5
 58e:	08 95       	ret

00000590 <_Z6show_iv>:
}
uint8_t i = 0;
void show_i(){
	set7seg(i);
 590:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 594:	0e 94 b1 02 	call	0x562	; 0x562 <_Z7set7segh>
	i = (i + 1)%10;
 598:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	6a e0       	ldi	r22, 0x0A	; 10
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	0e 94 28 04 	call	0x850	; 0x850 <__divmodhi4>
 5a8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
 5ac:	08 95       	ret

000005ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_>:
	}
	
	
	
	template <typename...FunctionInfo>
	void conect_by_delta_clock(uint64_t delta_clock,FunctionInfo...fInfo){
 5ae:	6f 92       	push	r6
 5b0:	7f 92       	push	r7
 5b2:	8f 92       	push	r8
 5b4:	9f 92       	push	r9
 5b6:	af 92       	push	r10
 5b8:	bf 92       	push	r11
 5ba:	cf 92       	push	r12
 5bc:	df 92       	push	r13
 5be:	ef 92       	push	r14
 5c0:	ff 92       	push	r15
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	ec 97       	sbiw	r28, 0x3c	; 60
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	4c 01       	movw	r8, r24
 5dc:	a0 2e       	mov	r10, r16
 5de:	b1 2e       	mov	r11, r17
 5e0:	c2 2e       	mov	r12, r18
 5e2:	d3 2e       	mov	r13, r19
 5e4:	64 2e       	mov	r6, r20
 5e6:	75 2e       	mov	r7, r21
 5e8:	06 2f       	mov	r16, r22
 5ea:	17 2f       	mov	r17, r23
		return new ClassSlot<T,Args...>(Reciever,Func);
	}

	template <typename Functype>
	static AbstractDelegator<Args...> * Construct(Functype Func){
		return new FunctionSlot<Functype,Args...>(Func);
 5ec:	84 e0       	ldi	r24, 0x04	; 4
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 14 04 	call	0x828	; 0x828 <_Znwj>
 5f4:	fc 01       	movw	r30, r24
template <typename FuncType,typename... Args>
class FunctionSlot:public AbstractDelegator<Args...>{
	FuncType Func;
	public:
	
	FunctionSlot(FuncType Func):Func(Func){}
 5f6:	8e e1       	ldi	r24, 0x1E	; 30
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	91 83       	std	Z+1, r25	; 0x01
 5fc:	80 83       	st	Z, r24
 5fe:	f3 82       	std	Z+3, r15	; 0x03
 600:	e2 82       	std	Z+2, r14	; 0x02
		alarm_calls.push_back(_alarm(delta_clock+_clock,DelegatorConstructor<>::Construct(fInfo...)) );
 602:	d4 01       	movw	r26, r8
 604:	2c 91       	ld	r18, X
 606:	11 96       	adiw	r26, 0x01	; 1
 608:	3c 91       	ld	r19, X
 60a:	11 97       	sbiw	r26, 0x01	; 1
 60c:	12 96       	adiw	r26, 0x02	; 2
 60e:	4c 91       	ld	r20, X
 610:	12 97       	sbiw	r26, 0x02	; 2
 612:	13 96       	adiw	r26, 0x03	; 3
 614:	5c 91       	ld	r21, X
 616:	13 97       	sbiw	r26, 0x03	; 3
 618:	14 96       	adiw	r26, 0x04	; 4
 61a:	6c 91       	ld	r22, X
 61c:	14 97       	sbiw	r26, 0x04	; 4
 61e:	15 96       	adiw	r26, 0x05	; 5
 620:	7c 91       	ld	r23, X
 622:	15 97       	sbiw	r26, 0x05	; 5
 624:	16 96       	adiw	r26, 0x06	; 6
 626:	8c 91       	ld	r24, X
 628:	16 97       	sbiw	r26, 0x06	; 6
 62a:	17 96       	adiw	r26, 0x07	; 7
 62c:	9c 91       	ld	r25, X
 62e:	e6 2c       	mov	r14, r6
 630:	f7 2c       	mov	r15, r7
 632:	0e 94 b9 04 	call	0x972	; 0x972 <__adddi3>
	uint64_t _clock;
	
	struct _alarm{
		uint64_t alarm_clock;
		AbstractDelegator<> * Slot;
		_alarm(uint64_t alarm_clock,AbstractDelegator<> * Slot):alarm_clock(alarm_clock),Slot(Slot){}
 636:	2d 8b       	std	Y+21, r18	; 0x15
 638:	3e 8b       	std	Y+22, r19	; 0x16
 63a:	4f 8b       	std	Y+23, r20	; 0x17
 63c:	58 8f       	std	Y+24, r21	; 0x18
 63e:	69 8f       	std	Y+25, r22	; 0x19
 640:	7a 8f       	std	Y+26, r23	; 0x1a
 642:	8b 8f       	std	Y+27, r24	; 0x1b
 644:	9c 8f       	std	Y+28, r25	; 0x1c
 646:	fe 8f       	std	Y+30, r31	; 0x1e
 648:	ed 8f       	std	Y+29, r30	; 0x1d
 64a:	8a e0       	ldi	r24, 0x0A	; 10
 64c:	fe 01       	movw	r30, r28
 64e:	75 96       	adiw	r30, 0x15	; 21
 650:	de 01       	movw	r26, r28
 652:	d3 96       	adiw	r26, 0x33	; 51
 654:	01 90       	ld	r0, Z+
 656:	0d 92       	st	X+, r0
 658:	8a 95       	dec	r24
 65a:	e1 f7       	brne	.-8      	; 0x654 <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0xa6>
	
	public:
	list():first(0){}
	
	void push_back(T val){
		if(first){
 65c:	f4 01       	movw	r30, r8
 65e:	00 85       	ldd	r16, Z+8	; 0x08
 660:	11 85       	ldd	r17, Z+9	; 0x09
 662:	01 15       	cp	r16, r1
 664:	11 05       	cpc	r17, r1
 666:	11 f4       	brne	.+4      	; 0x66c <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0xbe>
 668:	2f c0       	rjmp	.+94     	; 0x6c8 <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0x11a>
			auto it = first;
			for(;it->next != 0; it = it->next);
 66a:	8c 01       	movw	r16, r24
 66c:	d8 01       	movw	r26, r16
 66e:	1a 96       	adiw	r26, 0x0a	; 10
 670:	8d 91       	ld	r24, X+
 672:	9c 91       	ld	r25, X
 674:	1b 97       	sbiw	r26, 0x0b	; 11
 676:	00 97       	sbiw	r24, 0x00	; 0
 678:	c1 f7       	brne	.-16     	; 0x66a <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0xbc>
			it->next = new list_data<T>(val);
 67a:	8a e0       	ldi	r24, 0x0A	; 10
 67c:	fe 01       	movw	r30, r28
 67e:	f3 96       	adiw	r30, 0x33	; 51
 680:	de 01       	movw	r26, r28
 682:	11 96       	adiw	r26, 0x01	; 1
 684:	01 90       	ld	r0, Z+
 686:	0d 92       	st	X+, r0
 688:	8a 95       	dec	r24
 68a:	e1 f7       	brne	.-8      	; 0x684 <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0xd6>
 68c:	8c e0       	ldi	r24, 0x0C	; 12
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 14 04 	call	0x828	; 0x828 <_Znwj>
 694:	2a e0       	ldi	r18, 0x0A	; 10
 696:	fe 01       	movw	r30, r28
 698:	31 96       	adiw	r30, 0x01	; 1
 69a:	de 01       	movw	r26, r28
 69c:	5f 96       	adiw	r26, 0x1f	; 31
 69e:	01 90       	ld	r0, Z+
 6a0:	0d 92       	st	X+, r0
 6a2:	2a 95       	dec	r18
 6a4:	e1 f7       	brne	.-8      	; 0x69e <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0xf0>

template <typename T>
struct list_data{
	T data;
	struct list_data * next;
	list_data(T data,list_data * next = 0):data(data),next(next){}
 6a6:	2a e0       	ldi	r18, 0x0A	; 10
 6a8:	fe 01       	movw	r30, r28
 6aa:	7f 96       	adiw	r30, 0x1f	; 31
 6ac:	dc 01       	movw	r26, r24
 6ae:	01 90       	ld	r0, Z+
 6b0:	0d 92       	st	X+, r0
 6b2:	2a 95       	dec	r18
 6b4:	e1 f7       	brne	.-8      	; 0x6ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0x100>
 6b6:	fc 01       	movw	r30, r24
 6b8:	13 86       	std	Z+11, r1	; 0x0b
 6ba:	12 86       	std	Z+10, r1	; 0x0a
	
	void push_back(T val){
		if(first){
			auto it = first;
			for(;it->next != 0; it = it->next);
			it->next = new list_data<T>(val);
 6bc:	d8 01       	movw	r26, r16
 6be:	1b 96       	adiw	r26, 0x0b	; 11
 6c0:	9c 93       	st	X, r25
 6c2:	8e 93       	st	-X, r24
 6c4:	1a 97       	sbiw	r26, 0x0a	; 10
 6c6:	26 c0       	rjmp	.+76     	; 0x714 <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0x166>
		}
		else{
			first = new list_data<T>(val);
 6c8:	8a e0       	ldi	r24, 0x0A	; 10
 6ca:	fe 01       	movw	r30, r28
 6cc:	f3 96       	adiw	r30, 0x33	; 51
 6ce:	de 01       	movw	r26, r28
 6d0:	1b 96       	adiw	r26, 0x0b	; 11
 6d2:	01 90       	ld	r0, Z+
 6d4:	0d 92       	st	X+, r0
 6d6:	8a 95       	dec	r24
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0x124>
 6da:	8c e0       	ldi	r24, 0x0C	; 12
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 14 04 	call	0x828	; 0x828 <_Znwj>
 6e2:	2a e0       	ldi	r18, 0x0A	; 10
 6e4:	fe 01       	movw	r30, r28
 6e6:	3b 96       	adiw	r30, 0x0b	; 11
 6e8:	de 01       	movw	r26, r28
 6ea:	99 96       	adiw	r26, 0x29	; 41
 6ec:	01 90       	ld	r0, Z+
 6ee:	0d 92       	st	X+, r0
 6f0:	2a 95       	dec	r18
 6f2:	e1 f7       	brne	.-8      	; 0x6ec <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0x13e>

template <typename T>
struct list_data{
	T data;
	struct list_data * next;
	list_data(T data,list_data * next = 0):data(data),next(next){}
 6f4:	2a e0       	ldi	r18, 0x0A	; 10
 6f6:	fe 01       	movw	r30, r28
 6f8:	b9 96       	adiw	r30, 0x29	; 41
 6fa:	dc 01       	movw	r26, r24
 6fc:	01 90       	ld	r0, Z+
 6fe:	0d 92       	st	X+, r0
 700:	2a 95       	dec	r18
 702:	e1 f7       	brne	.-8      	; 0x6fc <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_+0x14e>
 704:	fc 01       	movw	r30, r24
 706:	13 86       	std	Z+11, r1	; 0x0b
 708:	12 86       	std	Z+10, r1	; 0x0a
			auto it = first;
			for(;it->next != 0; it = it->next);
			it->next = new list_data<T>(val);
		}
		else{
			first = new list_data<T>(val);
 70a:	d4 01       	movw	r26, r8
 70c:	19 96       	adiw	r26, 0x09	; 9
 70e:	9c 93       	st	X, r25
 710:	8e 93       	st	-X, r24
 712:	18 97       	sbiw	r26, 0x08	; 8
	
	
	template <typename...FunctionInfo>
	void conect_by_delta_clock(uint64_t delta_clock,FunctionInfo...fInfo){
		alarm_calls.push_back(_alarm(delta_clock+_clock,DelegatorConstructor<>::Construct(fInfo...)) );
	}
 714:	ec 96       	adiw	r28, 0x3c	; 60
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	f8 94       	cli
 71a:	de bf       	out	0x3e, r29	; 62
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	0f 91       	pop	r16
 728:	ff 90       	pop	r15
 72a:	ef 90       	pop	r14
 72c:	df 90       	pop	r13
 72e:	cf 90       	pop	r12
 730:	bf 90       	pop	r11
 732:	af 90       	pop	r10
 734:	9f 90       	pop	r9
 736:	8f 90       	pop	r8
 738:	7f 90       	pop	r7
 73a:	6f 90       	pop	r6
 73c:	08 95       	ret

0000073e <main>:
}

int main(void)
{
	DDRB = 0xFF;
 73e:	8f ef       	ldi	r24, 0xFF	; 255
 740:	84 b9       	out	0x04, r24	; 4
	set_port(DDRD,0b11111100,0xFF);
 742:	8a b1       	in	r24, 0x0a	; 10
 744:	8c 6f       	ori	r24, 0xFC	; 252
 746:	8a b9       	out	0x0a, r24	; 10
	sei();
 748:	78 94       	sei
	
	
    auto & mSheduler = scheduler::scheduler_r();
 74a:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN9scheduler11scheduler_rEv>
 74e:	ec 01       	movw	r28, r24
	mSheduler.init();
 750:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN9scheduler4initEv>
	mSheduler.conect_by_delta_clock(1000,show_i);
 754:	0f 2e       	mov	r0, r31
 756:	f8 ec       	ldi	r31, 0xC8	; 200
 758:	ef 2e       	mov	r14, r31
 75a:	f2 e0       	ldi	r31, 0x02	; 2
 75c:	ff 2e       	mov	r15, r31
 75e:	f0 2d       	mov	r31, r0
 760:	08 ee       	ldi	r16, 0xE8	; 232
 762:	13 e0       	ldi	r17, 0x03	; 3
 764:	20 e0       	ldi	r18, 0x00	; 0
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	40 e0       	ldi	r20, 0x00	; 0
 76a:	50 e0       	ldi	r21, 0x00	; 0
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	ce 01       	movw	r24, r28
 772:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_>
	mSheduler.conect_by_delta_clock(2000,show_i);
 776:	00 ed       	ldi	r16, 0xD0	; 208
 778:	17 e0       	ldi	r17, 0x07	; 7
 77a:	20 e0       	ldi	r18, 0x00	; 0
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	40 e0       	ldi	r20, 0x00	; 0
 780:	50 e0       	ldi	r21, 0x00	; 0
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	ce 01       	movw	r24, r28
 788:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_>
	mSheduler.conect_by_delta_clock(3000,show_i);
 78c:	08 eb       	ldi	r16, 0xB8	; 184
 78e:	1b e0       	ldi	r17, 0x0B	; 11
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	40 e0       	ldi	r20, 0x00	; 0
 796:	50 e0       	ldi	r21, 0x00	; 0
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	ce 01       	movw	r24, r28
 79e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_>
	mSheduler.conect_by_delta_clock(4000,show_i);
 7a2:	00 ea       	ldi	r16, 0xA0	; 160
 7a4:	1f e0       	ldi	r17, 0x0F	; 15
 7a6:	20 e0       	ldi	r18, 0x00	; 0
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	40 e0       	ldi	r20, 0x00	; 0
 7ac:	50 e0       	ldi	r21, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	ce 01       	movw	r24, r28
 7b4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_>
	mSheduler.conect_by_delta_clock(5000,show_i);
 7b8:	08 e8       	ldi	r16, 0x88	; 136
 7ba:	13 e1       	ldi	r17, 0x13	; 19
 7bc:	20 e0       	ldi	r18, 0x00	; 0
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	40 e0       	ldi	r20, 0x00	; 0
 7c2:	50 e0       	ldi	r21, 0x00	; 0
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	ce 01       	movw	r24, r28
 7ca:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_>
	mSheduler.conect_by_delta_clock(6000,show_i);
 7ce:	00 e7       	ldi	r16, 0x70	; 112
 7d0:	17 e1       	ldi	r17, 0x17	; 23
 7d2:	20 e0       	ldi	r18, 0x00	; 0
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	40 e0       	ldi	r20, 0x00	; 0
 7d8:	50 e0       	ldi	r21, 0x00	; 0
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	ce 01       	movw	r24, r28
 7e0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_>
	mSheduler.conect_by_delta_clock(7000,show_i);
 7e4:	08 e5       	ldi	r16, 0x58	; 88
 7e6:	1b e1       	ldi	r17, 0x1B	; 27
 7e8:	20 e0       	ldi	r18, 0x00	; 0
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	40 e0       	ldi	r20, 0x00	; 0
 7ee:	50 e0       	ldi	r21, 0x00	; 0
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	ce 01       	movw	r24, r28
 7f6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_>
	mSheduler.conect_by_delta_clock(8000,show_i);
 7fa:	00 e4       	ldi	r16, 0x40	; 64
 7fc:	1f e1       	ldi	r17, 0x1F	; 31
 7fe:	20 e0       	ldi	r18, 0x00	; 0
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	40 e0       	ldi	r20, 0x00	; 0
 804:	50 e0       	ldi	r21, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	ce 01       	movw	r24, r28
 80c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_>
	mSheduler.conect_by_delta_clock(9000,show_i);
 810:	08 e2       	ldi	r16, 0x28	; 40
 812:	13 e2       	ldi	r17, 0x23	; 35
 814:	20 e0       	ldi	r18, 0x00	; 0
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	40 e0       	ldi	r20, 0x00	; 0
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	ce 01       	movw	r24, r28
 822:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN9scheduler21conect_by_delta_clockIIPFvvEEEEvyDpT_>
 826:	ff cf       	rjmp	.-2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>

00000828 <_Znwj>:
	return ptr;
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {};
 828:	0e 94 0f 05 	call	0xa1e	; 0xa1e <malloc>
 82c:	08 95       	ret

0000082e <_ZdlPvj>:
 82e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <free>
 832:	08 95       	ret

00000834 <__cxa_guard_acquire>:
 834:	fc 01       	movw	r30, r24
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	20 81       	ld	r18, Z
 83c:	22 23       	and	r18, r18
 83e:	11 f0       	breq	.+4      	; 0x844 <__cxa_guard_acquire+0x10>
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	08 95       	ret

00000846 <__cxa_guard_release>:
 846:	21 e0       	ldi	r18, 0x01	; 1
 848:	fc 01       	movw	r30, r24
 84a:	20 83       	st	Z, r18
 84c:	08 95       	ret

0000084e <__cxa_pure_virtual>:
void __cxa_pure_virtual(void) {};
 84e:	08 95       	ret

00000850 <__divmodhi4>:
 850:	97 fb       	bst	r25, 7
 852:	07 2e       	mov	r0, r23
 854:	16 f4       	brtc	.+4      	; 0x85a <__divmodhi4+0xa>
 856:	00 94       	com	r0
 858:	07 d0       	rcall	.+14     	; 0x868 <__divmodhi4_neg1>
 85a:	77 fd       	sbrc	r23, 7
 85c:	09 d0       	rcall	.+18     	; 0x870 <__divmodhi4_neg2>
 85e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__udivmodhi4>
 862:	07 fc       	sbrc	r0, 7
 864:	05 d0       	rcall	.+10     	; 0x870 <__divmodhi4_neg2>
 866:	3e f4       	brtc	.+14     	; 0x876 <__divmodhi4_exit>

00000868 <__divmodhi4_neg1>:
 868:	90 95       	com	r25
 86a:	81 95       	neg	r24
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <__divmodhi4_neg2>:
 870:	70 95       	com	r23
 872:	61 95       	neg	r22
 874:	7f 4f       	sbci	r23, 0xFF	; 255

00000876 <__divmodhi4_exit>:
 876:	08 95       	ret

00000878 <__muluhisi3>:
 878:	0e 94 00 05 	call	0xa00	; 0xa00 <__umulhisi3>
 87c:	a5 9f       	mul	r26, r21
 87e:	90 0d       	add	r25, r0
 880:	b4 9f       	mul	r27, r20
 882:	90 0d       	add	r25, r0
 884:	a4 9f       	mul	r26, r20
 886:	80 0d       	add	r24, r0
 888:	91 1d       	adc	r25, r1
 88a:	11 24       	eor	r1, r1
 88c:	08 95       	ret

0000088e <__muldi3>:
 88e:	df 93       	push	r29
 890:	cf 93       	push	r28
 892:	1f 93       	push	r17
 894:	0f 93       	push	r16
 896:	9a 9d       	mul	r25, r10
 898:	f0 2d       	mov	r31, r0
 89a:	21 9f       	mul	r18, r17
 89c:	f0 0d       	add	r31, r0
 89e:	8b 9d       	mul	r24, r11
 8a0:	f0 0d       	add	r31, r0
 8a2:	8a 9d       	mul	r24, r10
 8a4:	e0 2d       	mov	r30, r0
 8a6:	f1 0d       	add	r31, r1
 8a8:	03 9f       	mul	r16, r19
 8aa:	f0 0d       	add	r31, r0
 8ac:	02 9f       	mul	r16, r18
 8ae:	e0 0d       	add	r30, r0
 8b0:	f1 1d       	adc	r31, r1
 8b2:	4e 9d       	mul	r20, r14
 8b4:	e0 0d       	add	r30, r0
 8b6:	f1 1d       	adc	r31, r1
 8b8:	5e 9d       	mul	r21, r14
 8ba:	f0 0d       	add	r31, r0
 8bc:	4f 9d       	mul	r20, r15
 8be:	f0 0d       	add	r31, r0
 8c0:	7f 93       	push	r23
 8c2:	6f 93       	push	r22
 8c4:	bf 92       	push	r11
 8c6:	af 92       	push	r10
 8c8:	5f 93       	push	r21
 8ca:	4f 93       	push	r20
 8cc:	d5 01       	movw	r26, r10
 8ce:	0e 94 00 05 	call	0xa00	; 0xa00 <__umulhisi3>
 8d2:	8b 01       	movw	r16, r22
 8d4:	ac 01       	movw	r20, r24
 8d6:	d7 01       	movw	r26, r14
 8d8:	0e 94 00 05 	call	0xa00	; 0xa00 <__umulhisi3>
 8dc:	eb 01       	movw	r28, r22
 8de:	e8 0f       	add	r30, r24
 8e0:	f9 1f       	adc	r31, r25
 8e2:	d6 01       	movw	r26, r12
 8e4:	0e 94 97 04 	call	0x92e	; 0x92e <__muldi3_6>
 8e8:	2f 91       	pop	r18
 8ea:	3f 91       	pop	r19
 8ec:	d6 01       	movw	r26, r12
 8ee:	0e 94 00 05 	call	0xa00	; 0xa00 <__umulhisi3>
 8f2:	c6 0f       	add	r28, r22
 8f4:	d7 1f       	adc	r29, r23
 8f6:	e8 1f       	adc	r30, r24
 8f8:	f9 1f       	adc	r31, r25
 8fa:	af 91       	pop	r26
 8fc:	bf 91       	pop	r27
 8fe:	0e 94 97 04 	call	0x92e	; 0x92e <__muldi3_6>
 902:	2f 91       	pop	r18
 904:	3f 91       	pop	r19
 906:	0e 94 00 05 	call	0xa00	; 0xa00 <__umulhisi3>
 90a:	c6 0f       	add	r28, r22
 90c:	d7 1f       	adc	r29, r23
 90e:	e8 1f       	adc	r30, r24
 910:	f9 1f       	adc	r31, r25
 912:	d6 01       	movw	r26, r12
 914:	0e 94 00 05 	call	0xa00	; 0xa00 <__umulhisi3>
 918:	e6 0f       	add	r30, r22
 91a:	f7 1f       	adc	r31, r23
 91c:	98 01       	movw	r18, r16
 91e:	be 01       	movw	r22, r28
 920:	cf 01       	movw	r24, r30
 922:	11 24       	eor	r1, r1
 924:	0f 91       	pop	r16
 926:	1f 91       	pop	r17
 928:	cf 91       	pop	r28
 92a:	df 91       	pop	r29
 92c:	08 95       	ret

0000092e <__muldi3_6>:
 92e:	0e 94 00 05 	call	0xa00	; 0xa00 <__umulhisi3>
 932:	46 0f       	add	r20, r22
 934:	57 1f       	adc	r21, r23
 936:	c8 1f       	adc	r28, r24
 938:	d9 1f       	adc	r29, r25
 93a:	08 f4       	brcc	.+2      	; 0x93e <__muldi3_6+0x10>
 93c:	31 96       	adiw	r30, 0x01	; 1
 93e:	08 95       	ret

00000940 <__ashldi3>:
 940:	0f 93       	push	r16
 942:	08 30       	cpi	r16, 0x08	; 8
 944:	90 f0       	brcs	.+36     	; 0x96a <__ashldi3+0x2a>
 946:	98 2f       	mov	r25, r24
 948:	87 2f       	mov	r24, r23
 94a:	76 2f       	mov	r23, r22
 94c:	65 2f       	mov	r22, r21
 94e:	54 2f       	mov	r21, r20
 950:	43 2f       	mov	r20, r19
 952:	32 2f       	mov	r19, r18
 954:	22 27       	eor	r18, r18
 956:	08 50       	subi	r16, 0x08	; 8
 958:	f4 cf       	rjmp	.-24     	; 0x942 <__ashldi3+0x2>
 95a:	22 0f       	add	r18, r18
 95c:	33 1f       	adc	r19, r19
 95e:	44 1f       	adc	r20, r20
 960:	55 1f       	adc	r21, r21
 962:	66 1f       	adc	r22, r22
 964:	77 1f       	adc	r23, r23
 966:	88 1f       	adc	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	0a 95       	dec	r16
 96c:	b2 f7       	brpl	.-20     	; 0x95a <__ashldi3+0x1a>
 96e:	0f 91       	pop	r16
 970:	08 95       	ret

00000972 <__adddi3>:
 972:	2a 0d       	add	r18, r10
 974:	3b 1d       	adc	r19, r11
 976:	4c 1d       	adc	r20, r12
 978:	5d 1d       	adc	r21, r13
 97a:	6e 1d       	adc	r22, r14
 97c:	7f 1d       	adc	r23, r15
 97e:	80 1f       	adc	r24, r16
 980:	91 1f       	adc	r25, r17
 982:	08 95       	ret

00000984 <__adddi3_s8>:
 984:	00 24       	eor	r0, r0
 986:	a7 fd       	sbrc	r26, 7
 988:	00 94       	com	r0
 98a:	2a 0f       	add	r18, r26
 98c:	30 1d       	adc	r19, r0
 98e:	40 1d       	adc	r20, r0
 990:	50 1d       	adc	r21, r0
 992:	60 1d       	adc	r22, r0
 994:	70 1d       	adc	r23, r0
 996:	80 1d       	adc	r24, r0
 998:	90 1d       	adc	r25, r0
 99a:	08 95       	ret

0000099c <__subdi3>:
 99c:	2a 19       	sub	r18, r10
 99e:	3b 09       	sbc	r19, r11
 9a0:	4c 09       	sbc	r20, r12
 9a2:	5d 09       	sbc	r21, r13
 9a4:	6e 09       	sbc	r22, r14
 9a6:	7f 09       	sbc	r23, r15
 9a8:	80 0b       	sbc	r24, r16
 9aa:	91 0b       	sbc	r25, r17
 9ac:	08 95       	ret

000009ae <__cmpdi2>:
 9ae:	2a 15       	cp	r18, r10
 9b0:	3b 05       	cpc	r19, r11
 9b2:	4c 05       	cpc	r20, r12
 9b4:	5d 05       	cpc	r21, r13
 9b6:	6e 05       	cpc	r22, r14
 9b8:	7f 05       	cpc	r23, r15
 9ba:	80 07       	cpc	r24, r16
 9bc:	91 07       	cpc	r25, r17
 9be:	08 95       	ret

000009c0 <__cmpdi2_s8>:
 9c0:	00 24       	eor	r0, r0
 9c2:	a7 fd       	sbrc	r26, 7
 9c4:	00 94       	com	r0
 9c6:	2a 17       	cp	r18, r26
 9c8:	30 05       	cpc	r19, r0
 9ca:	40 05       	cpc	r20, r0
 9cc:	50 05       	cpc	r21, r0
 9ce:	60 05       	cpc	r22, r0
 9d0:	70 05       	cpc	r23, r0
 9d2:	80 05       	cpc	r24, r0
 9d4:	90 05       	cpc	r25, r0
 9d6:	08 95       	ret

000009d8 <__udivmodhi4>:
 9d8:	aa 1b       	sub	r26, r26
 9da:	bb 1b       	sub	r27, r27
 9dc:	51 e1       	ldi	r21, 0x11	; 17
 9de:	07 c0       	rjmp	.+14     	; 0x9ee <__udivmodhi4_ep>

000009e0 <__udivmodhi4_loop>:
 9e0:	aa 1f       	adc	r26, r26
 9e2:	bb 1f       	adc	r27, r27
 9e4:	a6 17       	cp	r26, r22
 9e6:	b7 07       	cpc	r27, r23
 9e8:	10 f0       	brcs	.+4      	; 0x9ee <__udivmodhi4_ep>
 9ea:	a6 1b       	sub	r26, r22
 9ec:	b7 0b       	sbc	r27, r23

000009ee <__udivmodhi4_ep>:
 9ee:	88 1f       	adc	r24, r24
 9f0:	99 1f       	adc	r25, r25
 9f2:	5a 95       	dec	r21
 9f4:	a9 f7       	brne	.-22     	; 0x9e0 <__udivmodhi4_loop>
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	bc 01       	movw	r22, r24
 9fc:	cd 01       	movw	r24, r26
 9fe:	08 95       	ret

00000a00 <__umulhisi3>:
 a00:	a2 9f       	mul	r26, r18
 a02:	b0 01       	movw	r22, r0
 a04:	b3 9f       	mul	r27, r19
 a06:	c0 01       	movw	r24, r0
 a08:	a3 9f       	mul	r26, r19
 a0a:	70 0d       	add	r23, r0
 a0c:	81 1d       	adc	r24, r1
 a0e:	11 24       	eor	r1, r1
 a10:	91 1d       	adc	r25, r1
 a12:	b2 9f       	mul	r27, r18
 a14:	70 0d       	add	r23, r0
 a16:	81 1d       	adc	r24, r1
 a18:	11 24       	eor	r1, r1
 a1a:	91 1d       	adc	r25, r1
 a1c:	08 95       	ret

00000a1e <malloc>:
 a1e:	0f 93       	push	r16
 a20:	1f 93       	push	r17
 a22:	cf 93       	push	r28
 a24:	df 93       	push	r29
 a26:	82 30       	cpi	r24, 0x02	; 2
 a28:	91 05       	cpc	r25, r1
 a2a:	10 f4       	brcc	.+4      	; 0xa30 <malloc+0x12>
 a2c:	82 e0       	ldi	r24, 0x02	; 2
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <__flp>
 a34:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <__flp+0x1>
 a38:	20 e0       	ldi	r18, 0x00	; 0
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	a0 e0       	ldi	r26, 0x00	; 0
 a3e:	b0 e0       	ldi	r27, 0x00	; 0
 a40:	30 97       	sbiw	r30, 0x00	; 0
 a42:	19 f1       	breq	.+70     	; 0xa8a <malloc+0x6c>
 a44:	40 81       	ld	r20, Z
 a46:	51 81       	ldd	r21, Z+1	; 0x01
 a48:	02 81       	ldd	r16, Z+2	; 0x02
 a4a:	13 81       	ldd	r17, Z+3	; 0x03
 a4c:	48 17       	cp	r20, r24
 a4e:	59 07       	cpc	r21, r25
 a50:	c8 f0       	brcs	.+50     	; 0xa84 <malloc+0x66>
 a52:	84 17       	cp	r24, r20
 a54:	95 07       	cpc	r25, r21
 a56:	69 f4       	brne	.+26     	; 0xa72 <malloc+0x54>
 a58:	10 97       	sbiw	r26, 0x00	; 0
 a5a:	31 f0       	breq	.+12     	; 0xa68 <malloc+0x4a>
 a5c:	12 96       	adiw	r26, 0x02	; 2
 a5e:	0c 93       	st	X, r16
 a60:	12 97       	sbiw	r26, 0x02	; 2
 a62:	13 96       	adiw	r26, 0x03	; 3
 a64:	1c 93       	st	X, r17
 a66:	27 c0       	rjmp	.+78     	; 0xab6 <malloc+0x98>
 a68:	00 93 47 01 	sts	0x0147, r16	; 0x800147 <__flp>
 a6c:	10 93 48 01 	sts	0x0148, r17	; 0x800148 <__flp+0x1>
 a70:	22 c0       	rjmp	.+68     	; 0xab6 <malloc+0x98>
 a72:	21 15       	cp	r18, r1
 a74:	31 05       	cpc	r19, r1
 a76:	19 f0       	breq	.+6      	; 0xa7e <malloc+0x60>
 a78:	42 17       	cp	r20, r18
 a7a:	53 07       	cpc	r21, r19
 a7c:	18 f4       	brcc	.+6      	; 0xa84 <malloc+0x66>
 a7e:	9a 01       	movw	r18, r20
 a80:	bd 01       	movw	r22, r26
 a82:	ef 01       	movw	r28, r30
 a84:	df 01       	movw	r26, r30
 a86:	f8 01       	movw	r30, r16
 a88:	db cf       	rjmp	.-74     	; 0xa40 <malloc+0x22>
 a8a:	21 15       	cp	r18, r1
 a8c:	31 05       	cpc	r19, r1
 a8e:	f9 f0       	breq	.+62     	; 0xace <malloc+0xb0>
 a90:	28 1b       	sub	r18, r24
 a92:	39 0b       	sbc	r19, r25
 a94:	24 30       	cpi	r18, 0x04	; 4
 a96:	31 05       	cpc	r19, r1
 a98:	80 f4       	brcc	.+32     	; 0xaba <malloc+0x9c>
 a9a:	8a 81       	ldd	r24, Y+2	; 0x02
 a9c:	9b 81       	ldd	r25, Y+3	; 0x03
 a9e:	61 15       	cp	r22, r1
 aa0:	71 05       	cpc	r23, r1
 aa2:	21 f0       	breq	.+8      	; 0xaac <malloc+0x8e>
 aa4:	fb 01       	movw	r30, r22
 aa6:	93 83       	std	Z+3, r25	; 0x03
 aa8:	82 83       	std	Z+2, r24	; 0x02
 aaa:	04 c0       	rjmp	.+8      	; 0xab4 <malloc+0x96>
 aac:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <__flp+0x1>
 ab0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__flp>
 ab4:	fe 01       	movw	r30, r28
 ab6:	32 96       	adiw	r30, 0x02	; 2
 ab8:	44 c0       	rjmp	.+136    	; 0xb42 <malloc+0x124>
 aba:	fe 01       	movw	r30, r28
 abc:	e2 0f       	add	r30, r18
 abe:	f3 1f       	adc	r31, r19
 ac0:	81 93       	st	Z+, r24
 ac2:	91 93       	st	Z+, r25
 ac4:	22 50       	subi	r18, 0x02	; 2
 ac6:	31 09       	sbc	r19, r1
 ac8:	39 83       	std	Y+1, r19	; 0x01
 aca:	28 83       	st	Y, r18
 acc:	3a c0       	rjmp	.+116    	; 0xb42 <malloc+0x124>
 ace:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <__brkval>
 ad2:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <__brkval+0x1>
 ad6:	23 2b       	or	r18, r19
 ad8:	41 f4       	brne	.+16     	; 0xaea <malloc+0xcc>
 ada:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 ade:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 ae2:	30 93 46 01 	sts	0x0146, r19	; 0x800146 <__brkval+0x1>
 ae6:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <__brkval>
 aea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 aee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 af2:	21 15       	cp	r18, r1
 af4:	31 05       	cpc	r19, r1
 af6:	41 f4       	brne	.+16     	; 0xb08 <malloc+0xea>
 af8:	2d b7       	in	r18, 0x3d	; 61
 afa:	3e b7       	in	r19, 0x3e	; 62
 afc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b00:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b04:	24 1b       	sub	r18, r20
 b06:	35 0b       	sbc	r19, r21
 b08:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <__brkval>
 b0c:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <__brkval+0x1>
 b10:	e2 17       	cp	r30, r18
 b12:	f3 07       	cpc	r31, r19
 b14:	a0 f4       	brcc	.+40     	; 0xb3e <malloc+0x120>
 b16:	2e 1b       	sub	r18, r30
 b18:	3f 0b       	sbc	r19, r31
 b1a:	28 17       	cp	r18, r24
 b1c:	39 07       	cpc	r19, r25
 b1e:	78 f0       	brcs	.+30     	; 0xb3e <malloc+0x120>
 b20:	ac 01       	movw	r20, r24
 b22:	4e 5f       	subi	r20, 0xFE	; 254
 b24:	5f 4f       	sbci	r21, 0xFF	; 255
 b26:	24 17       	cp	r18, r20
 b28:	35 07       	cpc	r19, r21
 b2a:	48 f0       	brcs	.+18     	; 0xb3e <malloc+0x120>
 b2c:	4e 0f       	add	r20, r30
 b2e:	5f 1f       	adc	r21, r31
 b30:	50 93 46 01 	sts	0x0146, r21	; 0x800146 <__brkval+0x1>
 b34:	40 93 45 01 	sts	0x0145, r20	; 0x800145 <__brkval>
 b38:	81 93       	st	Z+, r24
 b3a:	91 93       	st	Z+, r25
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <malloc+0x124>
 b3e:	e0 e0       	ldi	r30, 0x00	; 0
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	cf 01       	movw	r24, r30
 b44:	df 91       	pop	r29
 b46:	cf 91       	pop	r28
 b48:	1f 91       	pop	r17
 b4a:	0f 91       	pop	r16
 b4c:	08 95       	ret

00000b4e <free>:
 b4e:	cf 93       	push	r28
 b50:	df 93       	push	r29
 b52:	00 97       	sbiw	r24, 0x00	; 0
 b54:	09 f4       	brne	.+2      	; 0xb58 <free+0xa>
 b56:	81 c0       	rjmp	.+258    	; 0xc5a <free+0x10c>
 b58:	fc 01       	movw	r30, r24
 b5a:	32 97       	sbiw	r30, 0x02	; 2
 b5c:	13 82       	std	Z+3, r1	; 0x03
 b5e:	12 82       	std	Z+2, r1	; 0x02
 b60:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <__flp>
 b64:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <__flp+0x1>
 b68:	10 97       	sbiw	r26, 0x00	; 0
 b6a:	81 f4       	brne	.+32     	; 0xb8c <free+0x3e>
 b6c:	20 81       	ld	r18, Z
 b6e:	31 81       	ldd	r19, Z+1	; 0x01
 b70:	82 0f       	add	r24, r18
 b72:	93 1f       	adc	r25, r19
 b74:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <__brkval>
 b78:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <__brkval+0x1>
 b7c:	28 17       	cp	r18, r24
 b7e:	39 07       	cpc	r19, r25
 b80:	51 f5       	brne	.+84     	; 0xbd6 <free+0x88>
 b82:	f0 93 46 01 	sts	0x0146, r31	; 0x800146 <__brkval+0x1>
 b86:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <__brkval>
 b8a:	67 c0       	rjmp	.+206    	; 0xc5a <free+0x10c>
 b8c:	ed 01       	movw	r28, r26
 b8e:	20 e0       	ldi	r18, 0x00	; 0
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	ce 17       	cp	r28, r30
 b94:	df 07       	cpc	r29, r31
 b96:	40 f4       	brcc	.+16     	; 0xba8 <free+0x5a>
 b98:	4a 81       	ldd	r20, Y+2	; 0x02
 b9a:	5b 81       	ldd	r21, Y+3	; 0x03
 b9c:	9e 01       	movw	r18, r28
 b9e:	41 15       	cp	r20, r1
 ba0:	51 05       	cpc	r21, r1
 ba2:	f1 f0       	breq	.+60     	; 0xbe0 <free+0x92>
 ba4:	ea 01       	movw	r28, r20
 ba6:	f5 cf       	rjmp	.-22     	; 0xb92 <free+0x44>
 ba8:	d3 83       	std	Z+3, r29	; 0x03
 baa:	c2 83       	std	Z+2, r28	; 0x02
 bac:	40 81       	ld	r20, Z
 bae:	51 81       	ldd	r21, Z+1	; 0x01
 bb0:	84 0f       	add	r24, r20
 bb2:	95 1f       	adc	r25, r21
 bb4:	c8 17       	cp	r28, r24
 bb6:	d9 07       	cpc	r29, r25
 bb8:	59 f4       	brne	.+22     	; 0xbd0 <free+0x82>
 bba:	88 81       	ld	r24, Y
 bbc:	99 81       	ldd	r25, Y+1	; 0x01
 bbe:	84 0f       	add	r24, r20
 bc0:	95 1f       	adc	r25, r21
 bc2:	02 96       	adiw	r24, 0x02	; 2
 bc4:	91 83       	std	Z+1, r25	; 0x01
 bc6:	80 83       	st	Z, r24
 bc8:	8a 81       	ldd	r24, Y+2	; 0x02
 bca:	9b 81       	ldd	r25, Y+3	; 0x03
 bcc:	93 83       	std	Z+3, r25	; 0x03
 bce:	82 83       	std	Z+2, r24	; 0x02
 bd0:	21 15       	cp	r18, r1
 bd2:	31 05       	cpc	r19, r1
 bd4:	29 f4       	brne	.+10     	; 0xbe0 <free+0x92>
 bd6:	f0 93 48 01 	sts	0x0148, r31	; 0x800148 <__flp+0x1>
 bda:	e0 93 47 01 	sts	0x0147, r30	; 0x800147 <__flp>
 bde:	3d c0       	rjmp	.+122    	; 0xc5a <free+0x10c>
 be0:	e9 01       	movw	r28, r18
 be2:	fb 83       	std	Y+3, r31	; 0x03
 be4:	ea 83       	std	Y+2, r30	; 0x02
 be6:	49 91       	ld	r20, Y+
 be8:	59 91       	ld	r21, Y+
 bea:	c4 0f       	add	r28, r20
 bec:	d5 1f       	adc	r29, r21
 bee:	ec 17       	cp	r30, r28
 bf0:	fd 07       	cpc	r31, r29
 bf2:	61 f4       	brne	.+24     	; 0xc0c <free+0xbe>
 bf4:	80 81       	ld	r24, Z
 bf6:	91 81       	ldd	r25, Z+1	; 0x01
 bf8:	84 0f       	add	r24, r20
 bfa:	95 1f       	adc	r25, r21
 bfc:	02 96       	adiw	r24, 0x02	; 2
 bfe:	e9 01       	movw	r28, r18
 c00:	99 83       	std	Y+1, r25	; 0x01
 c02:	88 83       	st	Y, r24
 c04:	82 81       	ldd	r24, Z+2	; 0x02
 c06:	93 81       	ldd	r25, Z+3	; 0x03
 c08:	9b 83       	std	Y+3, r25	; 0x03
 c0a:	8a 83       	std	Y+2, r24	; 0x02
 c0c:	e0 e0       	ldi	r30, 0x00	; 0
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	12 96       	adiw	r26, 0x02	; 2
 c12:	8d 91       	ld	r24, X+
 c14:	9c 91       	ld	r25, X
 c16:	13 97       	sbiw	r26, 0x03	; 3
 c18:	00 97       	sbiw	r24, 0x00	; 0
 c1a:	19 f0       	breq	.+6      	; 0xc22 <free+0xd4>
 c1c:	fd 01       	movw	r30, r26
 c1e:	dc 01       	movw	r26, r24
 c20:	f7 cf       	rjmp	.-18     	; 0xc10 <free+0xc2>
 c22:	8d 91       	ld	r24, X+
 c24:	9c 91       	ld	r25, X
 c26:	11 97       	sbiw	r26, 0x01	; 1
 c28:	9d 01       	movw	r18, r26
 c2a:	2e 5f       	subi	r18, 0xFE	; 254
 c2c:	3f 4f       	sbci	r19, 0xFF	; 255
 c2e:	82 0f       	add	r24, r18
 c30:	93 1f       	adc	r25, r19
 c32:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <__brkval>
 c36:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <__brkval+0x1>
 c3a:	28 17       	cp	r18, r24
 c3c:	39 07       	cpc	r19, r25
 c3e:	69 f4       	brne	.+26     	; 0xc5a <free+0x10c>
 c40:	30 97       	sbiw	r30, 0x00	; 0
 c42:	29 f4       	brne	.+10     	; 0xc4e <free+0x100>
 c44:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__flp+0x1>
 c48:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__flp>
 c4c:	02 c0       	rjmp	.+4      	; 0xc52 <free+0x104>
 c4e:	13 82       	std	Z+3, r1	; 0x03
 c50:	12 82       	std	Z+2, r1	; 0x02
 c52:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <__brkval+0x1>
 c56:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <__brkval>
 c5a:	df 91       	pop	r29
 c5c:	cf 91       	pop	r28
 c5e:	08 95       	ret

00000c60 <_exit>:
 c60:	f8 94       	cli

00000c62 <__stop_program>:
 c62:	ff cf       	rjmp	.-2      	; 0xc62 <__stop_program>
